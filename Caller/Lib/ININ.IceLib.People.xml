<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ININ.IceLib.People</name>
    </assembly>
    <members>
        <member name="T:ININ.IceLib.People.CustomButtonCache">
            <exclude/><summary>
            A simplified version of a cached object and its attributes.
            </summary>
        </member>
        <member name="M:ININ.IceLib.People.IWatchedObjectHelper`2.HelperMergeDiff(System.Object)">
            <summary>
            Do a difference of the two objects and merge any data.
            </summary>
            <param name="newObject">The new cache object we want to merge in.</param>
            <returns>An collection of changed properties. The colletion is empty if there were no changes.</returns>
        </member>
        <member name="T:ININ.IceLib.People.CustomButtonAvailability">
            <summary>
            When is the button available to be selected.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.CustomButtonAvailability.None">
            <summary>No availability has been specifed.</summary>
        </member>
        <member name="F:ININ.IceLib.People.CustomButtonAvailability.Always">
            <summary>The button should be available always.</summary>
        </member>
        <member name="F:ININ.IceLib.People.CustomButtonAvailability.WithActiveInteractionSelected">
            <summary>The button should be available only with an active interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.People.CustomButtonAvailability.WithInteractionSelected">
            <summary>The button should be available only with any interaction.</summary>
        </member>
        <member name="T:ININ.IceLib.People.CustomButtonAction">
            <summary>
            Action to perform when button is pressed.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.CustomButtonAction.None">
            <summary>No action has been specifed.</summary>
        </member>
        <member name="F:ININ.IceLib.People.CustomButtonAction.CustomNotification">
            <summary>Send a custom notification to a handler.</summary>
        </member>
        <member name="F:ININ.IceLib.People.CustomButtonAction.LaunchApplication">
            <summary>Launch an application.</summary>
        </member>
        <member name="T:ININ.IceLib.People.CustomButtonProperty">
            <summary>
            Each value in this enumeration represents a property in <see cref="T:ININ.IceLib.People.CustomButton"/>.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.CustomButtonProperty.None">
            <summary>No property is defined.</summary>
        </member>
        <member name="F:ININ.IceLib.People.CustomButtonProperty.Id">
            <summary>Represents the <see cref="P:ININ.IceLib.People.CustomButton.Id"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.CustomButtonProperty.ButtonText">
            <summary>Represents the <see cref="P:ININ.IceLib.People.CustomButton.ButtonText"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.CustomButtonProperty.Enabled">
            <summary>Represents the <see cref="P:ININ.IceLib.People.CustomButton.Enabled"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.CustomButtonProperty.IconFileName">
            <summary>Represents the <see cref="P:ININ.IceLib.People.CustomButton.IconFileName"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.CustomButtonProperty.Icon">
            <summary>Represents the <see cref="P:ININ.IceLib.People.CustomButton.Icon"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.CustomButtonProperty.Availability">
            <summary>Represents the <see cref="P:ININ.IceLib.People.CustomButton.Availability"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.CustomButtonProperty.DeactivateAfterUse">
            <summary>Represents the <see cref="P:ININ.IceLib.People.CustomButton.DeactivateAfterUse"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.CustomButtonProperty.Description">
            <summary>Represents the <see cref="P:ININ.IceLib.People.CustomButton.Description"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.CustomButtonProperty.LocalApplication">
            <summary>Represents the <see cref="P:ININ.IceLib.People.CustomButton.LocalApplication"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.CustomButtonProperty.Action">
            <summary>Represents the <see cref="P:ININ.IceLib.People.CustomButton.Action"/> property.</summary>
        </member>
        <member name="T:ININ.IceLib.People.CustomButton">
            <summary>
            Represents a custom button watched object.
            <para>Object instances of this class are managed by the <see cref="T:ININ.IceLib.People.CustomButtonList"/> class.</para>
            </summary>
            <remarks>
            Custom buttons are defined in <b>Interaction Administrator</b> and are used to add user-specific functionality to the client application.
            <para>A custom button can invoke a handler or launch a local application. For example, if you add a custom 
            button in <b>Interaction Administrator</b> and assign the command line to be "C:\Windows\System32\calc.exe",
            then invoking this button launches the calculator.</para>
            <para>The button can be set to be available always, when any interaction is selected or only when an active 
            (not disconnected) interaction is selected. All custom buttons are shown by default and appended to the right 
            side of the Call Control toolbar. The actions performed by custom buttons are also listed on the context menu.</para>
            <para>When custom buttons are added they are retrieved from the server and cached in 
            the <see cref="T:ININ.IceLib.People.CustomButtonList"/> object. Custom buttons are assigned a command line string to execute upon 
            invocation of the button.</para>
            <para>The label and description of the custom button can be localized based on the language identifier of the user's session.
            In <b>Interaction Administrator</b> label and description text can be defined for any number of languages.</para>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.CustomButton.#ctor(System.String,ININ.IceLib.People.CustomButtonCache)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.CustomButton"/> class.
            </summary>
        </member>
        <member name="P:ININ.IceLib.People.CustomButton.Id">
            <summary>
            Gets the unique identifier for this custom button. The <see cref="P:ININ.IceLib.People.CustomButton.ButtonText"/> is used for display purposes.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:ININ.IceLib.People.CustomButton.ButtonText">
            <summary>
            Gets the text to display for this custom button. This is the text that appears on the button.
            </summary>
            <value>The button text.</value>
        </member>
        <member name="P:ININ.IceLib.People.CustomButton.Enabled">
            <summary>
            Gets the enabled status: whether or not the button was configured in Interaction Administrator to 
            appear enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ININ.IceLib.People.CustomButton.IconFileName">
            <summary>
            Gets the icon file name.
            </summary>
            <value>The name of the icon file.</value>
        </member>
        <member name="P:ININ.IceLib.People.CustomButton.Icon">
            <summary>
            Gets the optional icon associated with this button.
            If no icon, then null is returned.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:ININ.IceLib.People.CustomButton.Availability">
            <summary>
            Gets the availability <see cref="T:ININ.IceLib.People.CustomButtonAvailability"/> enumeration value. It indicates whether the 
            button should be available always, only with an active interaction, with any interaction, or whether 
            no availability has been specified. 
            </summary>
            <value>An enumerated value that indicates when the button can be selected.</value>
        </member>
        <member name="P:ININ.IceLib.People.CustomButton.DeactivateAfterUse">
            <summary>
            Gets the deactivate after user value; a Boolean that indicates whether the button will be disabled 
            after first-time use per session.
            </summary>
            <value><c>true</c> if should deactivate after use; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ININ.IceLib.People.CustomButton.Description">
            <summary>
            Gets the descriptive text for this button. Interaction Client displays this description as a tool tip text 
            when users mouse-over the button.
            </summary>
            <value>The description of the button. This text does not appear on the button.</value>
        </member>
        <member name="P:ININ.IceLib.People.CustomButton.LocalApplication">
            <summary>
            Gets the application associated with the action. This is the fully qualified local path to an executable, 
            or a path relative to the local Interaction Client workstation 
            (e.g., C:\Program Files\Interactive Intelligence\application.exe), or a UNC path (e.g., \\hydra\icapplications\application.exe).
            </summary>
            <value>The fully qualified path to the application that will run when the button is pressed.</value>
        </member>
        <member name="P:ININ.IceLib.People.CustomButton.Action">
            <summary>
            Gets the action <see cref="T:ININ.IceLib.People.CustomButtonAction"/> enumeration value. This value indicates whether the button 
            will send a custom notification to a handler, launch an application, or whether no button action was specifed.
            </summary>
            <value>The action.</value>
        </member>
        <member name="T:ININ.IceLib.People.CustomButtonList">
            <summary>Represents a watched list of custom buttons (<see cref="T:ININ.IceLib.People.CustomButton"/>).</summary>
            <remarks>This class maintains a list of custom buttons defined for a user session. The user defines custom buttons in <b>Interaction Administator</b>. The custom buttons are then sent
            from the IC server to the client provided it has the necessary permissions. Each button contains an icon, and 
            localized text and description information based on the language setting of the user's session. The custom buttons are stored in a 
            cache that is updated when there is a change to the list.
            <para>To start a watch, call the <see cref="M:ININ.IceLib.People.CustomButtonList.StartWatching"/> or <see cref="M:ININ.IceLib.People.CustomButtonList.StartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods. The <c>completedCallback</c>
            delegate is invoked when the asynchronous start watch operation completes. To stop a watch call the <see cref="M:ININ.IceLib.People.CustomButtonList.StopWatching"/> or <see cref="M:ININ.IceLib.People.CustomButtonList.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods.
            The <c>StopWatchingCompleted</c> delegate is invoked when the asynchronous stop watch operation completes. An <see cref="T:System.InvalidOperationException"/> is raised if
            <see cref="M:ININ.IceLib.People.CustomButtonList.StartWatching"/> or <see cref="M:ININ.IceLib.People.CustomButtonList.StartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> is called when a watch is already in place. The <see cref="T:System.InvalidOperationException"/> is also raised
            if <see cref="M:ININ.IceLib.People.CustomButtonList.StopWatching"/> or <see cref="M:ININ.IceLib.People.CustomButtonList.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> is called when a watch is not in place.</para>
            <para>When this list of custom buttons changes, the <see cref="E:ININ.IceLib.People.CustomButtonList.WatchedObjectsChanged"/> event is triggered.</para>
            <para>If a watch is in place you can access the list of custom buttons by calling the <see cref="M:ININ.IceLib.People.CustomButtonList.GetList"/> method. An <see cref="T:System.InvalidOperationException"/> is
            raised if a watch is not in place.</para>
            <para><b>Note: </b>The asynchronous methods are preferred since the start, change, and stop watch can be lengthy operations.</para></remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.CustomButtonList.#ctor(ININ.IceLib.People.PeopleManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.CustomButtonList"/> class.
            </summary>
            <param name="peopleManager">A <see cref="P:ININ.IceLib.People.CustomButtonList.PeopleManager"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.People.CustomButtonList.GetList">
            <summary>
            Get a list of custom buttons.
            </summary>
            <exception cref="T:System.InvalidOperationException">If a watch is not in progress.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">If the requested objects are not in the cache.</exception>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.</returns>
        </member>
        <member name="M:ININ.IceLib.People.CustomButtonList.IsWatching">
            <summary>
            Determines whether a watch is active.
            </summary>
            <returns>
            	<c>true</c> if a watch is active; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method determines whether a watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.People.CustomButtonList.StartWatching">
            <summary>
            Starts watching the custom button list.
            </summary>
            <exception cref="T:System.InvalidOperationException">If a watch is already in progress.</exception>
        </member>
        <member name="M:ININ.IceLib.People.CustomButtonList.StartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously starts watching the custom button list.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.People.CustomButtonList.StopWatching">
            <summary>
            Implements a synchronous request to stop watching the custom button list.
            </summary>
            <exception cref="T:System.InvalidOperationException">If a watch is not in progress.</exception>
        </member>
        <member name="M:ININ.IceLib.People.CustomButtonList.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops watching the custom button list.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="P:ININ.IceLib.People.CustomButtonList.Item(System.String)">
            <summary>
            Get an individual custom button definition by its unique name.
            </summary>
            <param name="name">The button to get.</param>
            <value>The custom button.</value>
            <exception cref="T:System.InvalidOperationException">If a watch is not in progress.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the <see cref="T:ININ.IceLib.People.CustomButton"/> requested by <b>name</b> is not in the list.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">If the requested object is not in the cache.</exception>
        </member>
        <member name="E:ININ.IceLib.People.CustomButtonList.WatchedObjectsChanged">
            <summary>
            Occurs when one of the <see cref="T:ININ.IceLib.People.CustomButton"/> watched objects has changed.
            </summary>
            <remarks>
            Note that changes, additions, and removal of objects are monitored for a <see cref="T:ININ.IceLib.People.CustomButtonList"/>.
            <para>
            Each <see cref="P:ININ.IceLib.People.WatchedObjectsEventArgs`1.Changed"/> notification 
            for a <see cref="T:ININ.IceLib.People.CustomButton"/> object is described by the
            integer values defined in the <see cref="T:ININ.IceLib.People.CustomButtonProperty"/> enumeration.
            </para>
            </remarks>
        </member>
        <member name="T:ININ.IceLib.People.CustomButtonListCache">
            <summary>
            Internal cache to managed watched custom client button objects.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.PeopleWatchedObjectsCache`3">
            <exclude/><summary>
            Internal caching of a group of like objects.
            </summary>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedObjectsCache`3.#ctor(System.Boolean)">
             <summary>
             Initializes a new instance of the <see cref="T:ININ.IceLib.People.PeopleWatchedObjectsCache`3"/> class.
             </summary>
            
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedObjectsCache`3.IsWatching(System.Object)">
            <summary>
            Determines whether the specified watcher is watching.
            </summary>
            <param name="watcher">The watcher.</param>
            <returns><c>true</c> if the specified watcher is watching; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedObjectsCache`3.IsWatchingAllObjects">
            <summary>
            Determines wether all objects are being cached.
            </summary>
            <returns><c>true</c> if all objects being watched; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedObjectsCache`3.StartWatching(System.Object,System.String[])">
            <summary>
            Starts a watcher, potentially resulting in a round trip to the server.
            </summary>
            <param name="watcher">The watcher.</param>
            <param name="objectNames">List of object names to watch. If null all objects will be watched
            <c>Null should only be used if the object set is small</c>.</param>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedObjectsCache`3.ChangeWatchedObjects(System.Object,System.String[],System.String[],System.Boolean)">
            <summary>
            Change the watched objects, potentially resulting in a round trip to the server.
            </summary>
            <param name="watcher">The watcher.</param>
            <param name="objectNamesToAdd">The object names to add.</param>
            <param name="objectNamesToRemove">The object names to remove.</param>
            <param name="replaceExisting">if set to <c>true</c> [replace existing].</param>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedObjectsCache`3.StopWatching(System.Object)">
            <summary>
            Stops a watcher, potentially resulting in a round trip to the server.
            </summary>
            <param name="watcher">The watcher.</param>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedObjectsCache`3.StartWatchingImpl(System.String[])">
            <summary>
            Start watching implementation for inheriting classes.
            </summary>
            <param name="objectNames">The attribute names to begin the watch on.</param>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedObjectsCache`3.ChangeWatchingImpl(System.String[],System.String[])">
            <summary>
            A change in watched objects has occured.
            </summary>
            <param name="newWatchedObjects">Objects added or new to the watch.</param>
            <param name="oldWatchedObjects">Objects that were removed from the watch.</param>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedObjectsCache`3.StopWatchingImpl">
            <summary>
            Stop watching implementation for inheriting class.
            This means that there are no more objects to watch.
            </summary>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedObjectsCache`3.NotifyObjectsUpdatedImpl(System.Object,System.Collections.Generic.List{System.String})">
            <summary>
            Change notification implementation for inheriting classes.
            </summary>
            <param name="watcher">The watcher to notify</param>
            <param name="objectNames">The names of the updated objects.</param>
        </member>
        <member name="P:ININ.IceLib.People.PeopleWatchedObjectsCache`3.WatchCount">
            <summary>
            Gets the number of watchers.
            </summary>
            <value>The watch count.</value>
        </member>
        <member name="P:ININ.IceLib.People.PeopleWatchedObjectsCache`3.Watchers">
            <summary>
            Gets the watchers.
            </summary>
            <value>The watchers.</value>
            <remarks>
            Be sure to lock while accessing the watcher list.
            </remarks>
        </member>
        <member name="T:ININ.IceLib.People.UserStatusUpdate">
            <summary>
            This object is used to change a user's status.
            </summary>
            <remarks>To change a user's status, create an instance of this object and supply the desired <see cref="T:ININ.IceLib.People.UserStatus"/>, and then call either
            the <see cref="M:ININ.IceLib.People.UserStatusUpdate.UpdateRequest"/> or <see cref="M:ININ.IceLib.People.UserStatusUpdate.UpdateRequestAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods. If you use the asynchronous version of this method, the <see cref="M:ININ.IceLib.People.UserStatusUpdate.UpdateRequest"/> event
            will be triggered when the update of the user's status has completed.<br/><br/>
            <note>The asynchronous method is preferred since the update can be a lengthy operation.</note></remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusUpdate.#ctor(ININ.IceLib.People.PeopleManager)">
            <overloads>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.UserStatusUpdate"/> class.
            </overloads>
            
            <summary>
            Constructs a <see cref="T:ININ.IceLib.People.UserStatusUpdate"/> object.
            </summary>
            <param name="peopleManager">A <see cref="T:ININ.IceLib.People.PeopleManager"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>This will update the status of the Session user.</remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusUpdate.#ctor(ININ.IceLib.People.PeopleManager,System.String)">
            <summary>
            Constructs a <see cref="T:ININ.IceLib.People.UserStatusUpdate"/> object.
            </summary>
            <param name="peopleManager">A <see cref="T:ININ.IceLib.People.PeopleManager"/> instance.</param>
            <param name="userId">The user ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>This will update the status of the Session user.</remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusUpdate.#ctor(ININ.IceLib.People.PeopleManager,ININ.IceLib.People.UserStatus)">
            <summary>
            Constructs a <see cref="T:ININ.IceLib.People.UserStatusUpdate"/> object from a UserStatus.
            </summary>
            <remarks>The <paramref name="userStatus"/> instance's <see cref="P:ININ.IceLib.People.UserStatusUpdate.StatusMessageDetails"/> must be valid.  Check the <see cref="P:ININ.IceLib.People.StatusMessageDetails.IsValid"/> property before calling this constructor.</remarks>
            <param name="peopleManager">A <see cref="T:ININ.IceLib.People.PeopleManager"/> instance.</param>
            <param name="userStatus">Initial parameters are copied from the
            <see cref="T:ININ.IceLib.People.UserStatus"/> watched object.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="userStatus"/> instance's <see cref="P:ININ.IceLib.People.UserStatusUpdate.StatusMessageDetails"/> is not valid.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusUpdate.UpdateRequest">
            <summary>
            Updates the user status with the specified settings.
            </summary>
            <remarks>
            <para>If the status is not able to be set, an IceLibException will be thrown.  Examples are:
            	<list type="bullet">
            	<item>The status is a forward status and the <see cref="P:ININ.IceLib.People.UserStatusUpdate.ForwardNumber"/> is not able to be converted into a phone number.</item>
            	<item>The status is a forward status, no <see cref="P:ININ.IceLib.People.UserStatusUpdate.ForwardNumber"/> was specified, and no previous forward number had existed for the status.</item>
            	</list>
            </para>
            </remarks>
            <exception cref="T:ININ.IceLib.IceLibException">The Users's status was not able to be set or the Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusUpdate.UpdateRequestAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously updates the user status with the specified settings.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>
            <para>If the status is not able to be set, an IceLibException will be returned to the callback.  Examples are:
            	<list type="bullet">
            	<item>The status is a forward status and the <see cref="P:ININ.IceLib.People.UserStatusUpdate.ForwardNumber"/> is not able to be converted into a phone number.</item>
            	<item>The status is a forward status, no <see cref="P:ININ.IceLib.People.UserStatusUpdate.ForwardNumber"/> was specified, and no previous forward number had existed for the status.</item>
            	</list>
            </para>
            <para>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</para>
            </remarks>
        </member>
        <member name="P:ININ.IceLib.People.UserStatusUpdate.UserId">
            <summary>
            Gets or sets the unique identifier for this user status to update. This is the IC User name.
            </summary>
            <value>The user ID.</value>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The value length is zero.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserStatusUpdate.StatusMessageDetails">
            <summary>
            Gets or sets the status message.
            </summary>
            <value>The status message.</value>
            <remarks>The status message must be valid.  Check the <see cref="P:ININ.IceLib.People.StatusMessageDetails.IsValid"/> property before calling this property.</remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The <see cref="P:ININ.IceLib.People.UserStatusUpdate.StatusMessageDetails"/> is not valid.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserStatusUpdate.Notes">
            <summary>
            Gets or sets the status notes. (Can be <b>null</b>.)
            </summary>
            <value>The notes.</value>
            <remarks>If <b>null</b>, the value last associated with this statusKey will be used.</remarks>
        </member>
        <member name="P:ININ.IceLib.People.UserStatusUpdate.ForwardNumber">
            <summary>
            Gets or sets the status forwarded number. (Can be <b>null</b>.)
            </summary>
            <value>The forward number.</value>
            <exception cref="T:System.ArgumentException">The value length is zero.</exception>
            <remarks>If <b>null</b>, the value last associated with this statusKey will be used.</remarks>
        </member>
        <member name="P:ININ.IceLib.People.UserStatusUpdate.UntilDate">
            <summary>
            Gets or sets the status until date.
            </summary>
            <value>The until date.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserStatusUpdate.UntilTime">
            <summary>
            Gets or sets the status until time.
            </summary>
            <value>The until time.</value>
        </member>
        <member name="T:ININ.IceLib.People.UserStatusCache">
            <exclude/><summary>
            A simplified version of a cached object and its attributes.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.UserStatusProperty">
            <summary>
            Each value in this enumeration represents a property in <see cref="T:ININ.IceLib.People.UserStatus"/>.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserStatusProperty.None">
            <summary>No property is defined.</summary>
        </member>
        <member name="F:ININ.IceLib.People.UserStatusProperty.UserId">
            <summary>Represents the <see cref="P:ININ.IceLib.People.UserStatus.UserId"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.UserStatusProperty.StatusMessageDetails">
            <summary>Represents the <see cref="P:ININ.IceLib.People.UserStatus.StatusMessageDetails"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.UserStatusProperty.Notes">
            <summary>Represents the <see cref="P:ININ.IceLib.People.UserStatus.Notes"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.UserStatusProperty.ForwardNumber">
            <summary>Represents the <see cref="P:ININ.IceLib.People.UserStatus.ForwardNumber"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.UserStatusProperty.UntilDate">
            <summary>Represents the <see cref="P:ININ.IceLib.People.UserStatus.UntilDate"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.UserStatusProperty.UntilTime">
            <summary>Represents the <see cref="P:ININ.IceLib.People.UserStatus.UntilTime"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.UserStatusProperty.OnPhone">
            <summary>Represents the <see cref="P:ININ.IceLib.People.UserStatus.OnPhone"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.UserStatusProperty.OnPhoneChanged">
            <summary>Represents the <see cref="P:ININ.IceLib.People.UserStatus.OnPhoneChanged"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.UserStatusProperty.StatusChanged">
            <summary>Represents the <see cref="P:ININ.IceLib.People.UserStatus.StatusChanged"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.UserStatusProperty.Stations">
            <summary>Represents the <see cref="P:ININ.IceLib.People.UserStatus.Stations"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.UserStatusProperty.ICServers">
            <summary>Represents the <see cref="P:ININ.IceLib.People.UserStatus.ICServers"/> property.</summary>
        </member>
        <member name="T:ININ.IceLib.People.UserStatus">
            <summary>Represents a user's status watched object. For example, Available, Do Not Disturb and so on.
            Object instances of this class are managed by the <see cref="T:ININ.IceLib.People.UserStatusList"/> class.
            </summary>
            <remarks>Each property is represented by an integer value within the <see cref="T:ININ.IceLib.People.UserStatusProperty"/> 
            enumeration. The user's status contains information such as a forward telephone number, status notes, 
            a date and time until which the user will be in the selected status, the date and time they entered 
            that status, and so on.</remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.UserStatus.#ctor(ININ.IceLib.People.UserStatusCache)">
            <summary>
            Initializes a new instance of the <see cref="P:ININ.IceLib.People.UserStatus.StatusMessageDetails"/> class.
            </summary>
        </member>
        <member name="P:ININ.IceLib.People.UserStatus.UserId">
            <summary>
            Gets the unique identifier for this user status entry. This is the IC User name.
            </summary>
            <value>The user ID.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserStatus.StatusMessageDetails">
            <summary>
            Gets the status message definition.
            </summary>
            <value>The status message.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserStatus.Notes">
            <summary>
            Gets the status notes.
            </summary>
            <value>The notes.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserStatus.ForwardNumber">
            <summary>
            Gets the status forwarded number.
            </summary>
            <value>The forward number.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserStatus.UntilDate">
            <summary>
            Gets the status until date.
            </summary>
            <value>The until date</value>
        </member>
        <member name="P:ININ.IceLib.People.UserStatus.UntilTime">
            <summary>
            Gets the status until time.
            </summary>
            <value>The until time.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserStatus.OnPhone">
            <summary>
            Gets a value indicating whether the user is on the phone.
            </summary>
            <value><c>true</c> if on phone; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserStatus.OnPhoneChanged">
            <summary>
            Gets the time the current user went on the phone.
            </summary>
            <value>The time when the on phone changed.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserStatus.StatusChanged">
            <summary>
            Gets the time the user started in this status.
            </summary>
            <value>The time when the status changed.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserStatus.Stations">
            <summary>
            Gets the list of stations.
            </summary>
            <value>The stations.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserStatus.ICServers">
            <summary>
            Gets the list of IC Servers.
            </summary>
            <value>The IC servers.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserStatus.LoggedIn">
            <summary>
            Gets a value indicating whether the user is currently logged in.
            </summary>
            <value>
            	<c>true</c> if this user is logged in; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ININ.IceLib.People.UserStatusPreviousInfo">
            <summary>Represents a user's previous status settings for a particular status.</summary>
            <remarks>
            <para>This is used with the <see cref="T:ININ.IceLib.People.UserStatusList"/> <b>GetPreviousStatusInfo</b> methods.</para>
            </remarks>
        </member>
        <member name="P:ININ.IceLib.People.UserStatusPreviousInfo.StatusId">
            <summary>
            The status message identifier. Use this ID to access the status message definition
            defined in <see cref="T:ININ.IceLib.People.StatusMessageList"/>.
            </summary>
            <value>The status ID.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserStatusPreviousInfo.Notes">
            <summary>
            Gets the status notes.
            </summary>
            <value>The notes.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserStatusPreviousInfo.ForwardNumber">
            <summary>
            Gets the status forwarded number.
            </summary>
            <value>The forward number.</value>
        </member>
        <member name="T:ININ.IceLib.People.GetPreviousStatusInfoCompletedEventArgs">
            <summary>
            Provides data for asynchronous completed events of <see cref="T:ININ.IceLib.People.UserStatusList"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.GetPreviousStatusInfoCompletedEventArgs.#ctor(System.Collections.Generic.Dictionary{System.String,ININ.IceLib.People.UserStatusPreviousInfo},System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.GetPreviousStatusInfoCompletedEventArgs"/> class with the specified values.
            </summary>
            <param name="previousStatusInfo">The previous status info.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <c>true</c> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.People.GetPreviousStatusInfoCompletedEventArgs.PreviousStatusInfo">
            <summary>
            Gets the previous status info associated with the event.
            </summary>
            <value>The previous status info.</value>
            <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> 
            property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException">InnerException</see> 
            property holds a reference to Error.</exception>
        </member>
        <member name="T:ININ.IceLib.People.GetUserStatusCompletedEventArgs">
            <summary>
            Provides data for asynchronous completed events of <see cref="T:ININ.IceLib.People.UserStatusList"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.GetUserStatusCompletedEventArgs.#ctor(ININ.IceLib.People.UserStatus,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.GetUserStatusCompletedEventArgs"/> class with the specified values.
            </summary>
            <param name="userStatus">The user status.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <c>true</c> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.People.GetUserStatusCompletedEventArgs.UserStatus">
            <summary>
            Gets the user status associated with the event.
            </summary>
            <value>The user status.</value>
            <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> 
            property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException">InnerException</see> 
            property holds a reference to Error.</exception>
        </member>
        <member name="T:ININ.IceLib.People.UserStatusList">
            <summary>
            Represents a list of watched user statuses (<see cref="T:ININ.IceLib.People.UserStatus"/>).
            </summary>
            <remarks>This class allows you to start, stop, and change watches on the user status for a number of users. To start a watch for an
            array of users, call <see cref="M:ININ.IceLib.People.UserStatusList.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.People.UserStatusList.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods with an array of user IDs. When the asynchronous start watch operation
            completes, the <c>completedCallback</c> delegate is invoked.
            <para>Yor can change the users for which you want to monitor their status by calling the <see cref="M:ININ.IceLib.People.UserStatusList.ChangeWatchedUsers(System.String[],System.String[],System.Boolean)"/> or <see cref="M:ININ.IceLib.People.UserStatusList.ChangeWatchedUsersAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods and
            passing an array of user IDs. When the asynchronous change watch operation completes, the <c>completedCallback</c> delegate is invoked. </para>
            <para>You can stop watching user status by calling the <see cref="M:ININ.IceLib.People.UserStatusList.StopWatching"/> or <see cref="M:ININ.IceLib.People.UserStatusList.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods. When the asynchronous stop watch operation
            completes the <c>completedCallback</c> delegate is invoked.</para>
            <para>To get the list of watched user status, call the <see cref="M:ININ.IceLib.People.UserStatusList.GetList"/> method. An <see cref="T:System.InvalidOperationException"/> is raised if a watch
            is not in progress.</para>
            <para>When a user status changes, the <see cref="E:ININ.IceLib.People.UserStatusList.WatchedObjectsChanged"/> event is triggered, providing information on the user status that has changed.</para>
            <para>Calling <see cref="M:ININ.IceLib.People.UserStatusList.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.People.UserStatusList.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch has already been started, or calling <see cref="M:ININ.IceLib.People.UserStatusList.ChangeWatchedUsers(System.String[],System.String[],System.Boolean)"/>, <see cref="M:ININ.IceLib.People.UserStatusList.ChangeWatchedUsersAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>,
            <see cref="M:ININ.IceLib.People.UserStatusList.StopWatching"/>, or <see cref="M:ININ.IceLib.People.UserStatusList.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch is not in progress raises the <see cref="T:System.InvalidOperationException"/>.<br/><br/></para>
            <note>The asynchronous methods are preferred since the start, change, and stop watch can be lengthy operations.</note></remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusList.#ctor(ININ.IceLib.People.PeopleManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.UserStatusList"/> class.
            </summary>
            <param name="peopleManager">A <see cref="P:ININ.IceLib.People.UserStatusList.PeopleManager"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusList.GetList">
            <summary>
            Get a list of user statuses being watched.
            </summary>
            <exception cref="T:ININ.IceLib.NotCachedException">If the user status list is not cached.</exception>
            <exception cref="T:System.InvalidOperationException">If a watch is not in progress.</exception>
            <returns>A list of <see cref="T:ININ.IceLib.People.UserStatus"/>.</returns>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusList.IsWatching">
            <overloads>
            Determines whether a watch is active.
            </overloads>
            
            <summary>
            Determines whether a watch is active.
            </summary>
            <returns>
            	<c>true</c> if a watch is active; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method determines whether a watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusList.IsWatching(System.String)">
            <summary>
            Determines whether a watch is active and if the specified value is being watched.
            </summary>
            <param name="userId">The user.</param>
            <returns>
            	<c>true</c> if a watch is active and the specified value is being watched; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>
            This method determines whether a watch is in place for this instance and whether the specified value is being watched.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusList.StartWatching(System.String[])">
            <summary>
            Starts watching the User Status List.
            </summary>
            <param name="userIds">An array of user IDs for watching user status.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">The object is already being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusList.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously starts watching the User Status List.
            </summary>
            <param name="userIds">An array of user IDs for watching user status.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusList.StopWatching">
            <summary>
            Stops watching the User Status List.
            </summary>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusList.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops watching the User Status List.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusList.ChangeWatchedUsers(System.String[],System.String[],System.Boolean)">
            <summary>
            Changes the users being watched.
            </summary>
            <param name="userIDsToAdd">The user IDs to add. (Can be <b>null</b>.)</param>
            <param name="userIDsToRemove">The user IDs to remove. (Can be <b>null</b>.)</param>
            <param name="replaceExisting">if set to <c>true</c>, replace the existing list.</param>
            <remarks>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusList.ChangeWatchedUsersAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes the users being watched.
            </summary>
            <param name="userIDsToAdd">The user IDs to add. (Can be <b>null</b>.)</param>
            <param name="userIDsToRemove">The user IDs to remove. (Can be <b>null</b>.)</param>
            <param name="replaceExisting">if set to <c>true</c>, replace the existing existing list.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>
            <para>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</para>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusList.GetUserStatus(System.String)">
            <summary>
            Gets the status for a User from the server.
            </summary>
            <param name="userId">The user ID.</param>
            <returns>The <see cref="T:ININ.IceLib.People.UserStatus"/>.</returns>
            <remarks>
            <para>This method will return the value from the cache, if the user's status is cached.
            If the user's status is not being cached, it will send a request to the server and get the status.</para>
            <para><note>This method can be particularly inefficient if neither a <see cref="T:ININ.IceLib.People.UserStatusList"/> watch
            nor a <see cref="T:ININ.IceLib.People.StatusMessageList"/> watch is active since both the <see cref="T:ININ.IceLib.People.UserStatus"/> and its
            <see cref="T:ININ.IceLib.People.StatusMessageDetails"/> must be queried from the server.  If neither of these watches is
            active, please consider maintaining a <see cref="T:ININ.IceLib.People.StatusMessageList"/> watch.</note></para>
            </remarks>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusList.GetUserStatusAsync(System.String,System.EventHandler{ININ.IceLib.People.GetUserStatusCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously gets the status for a User from the server.
            </summary>
            <param name="userId">The user ID.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>
            <para>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</para>
            <para>This method will return the value from the cache, if the user's status is cached.
            If the user's status is not being cached, it will send a request to the server and get the status.</para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusList.GetPreviousStatusInfo">
            <overloads>
            Gets the previous status info for the Session User from the server.
            </overloads>
            
            <summary>
            Gets the previous status info for the Session User from the server.
            </summary>
            <returns>The <see cref="T:ININ.IceLib.People.UserStatusPreviousInfo"/> collection that was returned.</returns>
            <remarks>
            <para>This can be useful for pre-filling previous values when a User is setting
            a status, so that old status info can be pre-populated into a dialog. The data
            can then be used with the <see cref="T:ININ.IceLib.People.UserStatusUpdate"/> class to retain previous
            values. The same result could be obtained by setting the Notes and Forward Number
            to <c>null</c> in the <see cref="T:ININ.IceLib.People.UserStatusUpdate"/> class, but usage of the <b>GetPreviousStatusInfo</b>
            method can allow the user to know what values will be set ahead of time.</para>
            </remarks>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusList.GetPreviousStatusInfo(System.String)">
            <summary>
            Gets the previous status info for a User from the server.
            </summary>
            <param name="userId">The user ID.</param>
            <returns>The <see cref="T:ININ.IceLib.People.UserStatusPreviousInfo"/> collection that was returned.</returns>
            <remarks>
            <para>This can be useful for pre-filling previous values when a User is setting
            a status, so that old status info can be pre-populated into a dialog. The data
            can then be used with the <see cref="T:ININ.IceLib.People.UserStatusUpdate"/> class to retain previous
            values. The same result could be obtained by setting the Notes and Forward Number
            to <c>null</c> in the <see cref="T:ININ.IceLib.People.UserStatusUpdate"/> class, but usage of the <b>GetPreviousStatusInfo</b>
            method can allow the user to know what values will be set ahead of time.</para>
            </remarks>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusList.GetPreviousStatusInfoAsync(System.EventHandler{ININ.IceLib.People.GetPreviousStatusInfoCompletedEventArgs},System.Object)">
            <overloads>
            Asynchronously gets the previous status info for the Session User from the server.
            </overloads>
            
            <summary>
            Asynchronously gets the previous status info for the Session User from the server.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>
            <para>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</para>
            <para>This can be useful for pre-filling previous values when a User is setting
            a status, so that old status info can be pre-populated into a dialog. The data
            can then be used with the <see cref="T:ININ.IceLib.People.UserStatusUpdate"/> class to retain previous
            values. The same result could be obtained by setting the Notes and Forward Number
            to <c>null</c> in the <see cref="T:ININ.IceLib.People.UserStatusUpdate"/> class, but usage of the <b>GetPreviousStatusInfo</b>
            method can allow the user to know what values will be set ahead of time.</para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserStatusList.GetPreviousStatusInfoAsync(System.String,System.EventHandler{ININ.IceLib.People.GetPreviousStatusInfoCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously gets the previous status info for a User from the server.
            </summary>
            <param name="userId">The user ID.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>
            <para>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</para>
            <para>This can be useful for pre-filling previous values when a User is setting
            a status, so that old status info can be pre-populated into a dialog. The data
            can then be used with the <see cref="T:ININ.IceLib.People.UserStatusUpdate"/> class to retain previous
            values. The same result could be obtained by setting the Notes and Forward Number
            to <c>null</c> in the <see cref="T:ININ.IceLib.People.UserStatusUpdate"/> class, but usage of the <b>GetPreviousStatusInfo</b>
            method can allow the user to know what values will be set ahead of time.</para>
            </remarks>
        </member>
        <member name="P:ININ.IceLib.People.UserStatusList.Item(System.String)">
            <summary>
            Get an individual status for a user.
            </summary>
            <param name="userId">The status to get.</param>
            <value>The status details.</value>
            <exception cref="T:System.InvalidOperationException">If a watch is not in progress.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">If the requested <b>userId</b> is not in the cache.</exception>
        </member>
        <member name="E:ININ.IceLib.People.UserStatusList.WatchedObjectsChanged">
            <summary>
            Occurs when one of the <see cref="T:ININ.IceLib.People.UserStatus"/> watched objects has changed.
            </summary>
            <remarks>
            Note that only changes to existing objects in the watch are monitored.
            There are no objects added to or removed from the <see cref="T:ININ.IceLib.People.UserStatusList"/> watched objects.
            <para>
            Each <see cref="P:ININ.IceLib.People.WatchedObjectsEventArgs`1.Changed"/> notification 
            for a <see cref="T:ININ.IceLib.People.UserStatus"/> object is described by the
            integer values defined in the <see cref="T:ININ.IceLib.People.UserStatusProperty"/> enumeration.
            </para>
            </remarks>
        </member>
        <member name="T:ININ.IceLib.People.UserStatusListCache">
            <exclude/><summary>
            Watched class to manage a list of IC user's statuses.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.WatchedObjectsEventArgs`1">
            <summary>
            Provides data for the watched objects changed event for a watched object.
            </summary>
            <typeparam name="TPropertyEnum">Type parameter to indicate the type of property values that have changed.</typeparam>
            <remarks>This class extends EventArgs, the base class for classes containing event data.</remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.WatchedObjectsEventArgs`1.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.ObjectModel.ReadOnlyCollection{`0}},System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Collections.ObjectModel.ReadOnlyCollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.WatchedObjectsEventArgs`1"/> class with the specified values.
            </summary>
        </member>
        <member name="P:ININ.IceLib.People.WatchedObjectsEventArgs`1.Changed">
            <summary>
            Get the existing objects that changed. This is a map with
            the object indentifier as the key and a <see cref="T:System.Collections.Generic.List`1"/> of integers
            indicating which properties have changed.
            </summary>
            <value>The changed objects.</value>
        </member>
        <member name="P:ININ.IceLib.People.WatchedObjectsEventArgs`1.Added">
            <summary>
            Get the existing object identifiers that were added.
            </summary>
            <value>The added objects.</value>
        </member>
        <member name="P:ININ.IceLib.People.WatchedObjectsEventArgs`1.Removed">
            <summary>
            Get the existing object identifiers that were removed.
            </summary>
            <value>The removed objects.</value>
        </member>
        <member name="T:ININ.IceLib.People.StatusMessageDetailsCache">
            <exclude/><summary>
            A simplified version of a cached object and its attributes.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.StatusMessageDetailsCache._InstalledPath">
            <summary>
            Returns the path where the assembly is running from.  It will look for the
            assembly first and if the GetModules call returns no elements, it will return
            the path of the executing executable.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.StatusMessageProperty">
            <summary>
            Each value in this enumeration represents a property in <see cref="T:ININ.IceLib.People.StatusMessageDetails"/>.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.StatusMessageProperty.None">
            <summary>No property is defined.</summary>
        </member>
        <member name="F:ININ.IceLib.People.StatusMessageProperty.Id">
            <summary>Represents the <see cref="P:ININ.IceLib.People.StatusMessageDetails.Id"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.StatusMessageProperty.MessageText">
            <summary>Represents the <see cref="P:ININ.IceLib.People.StatusMessageDetails.MessageText"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.StatusMessageProperty.IconFileName">
            <summary>Represents the <see cref="P:ININ.IceLib.People.StatusMessageDetails.IconFileName"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.StatusMessageProperty.GroupTag">
            <summary>Represents the <see cref="P:ININ.IceLib.People.StatusMessageDetails.GroupTag"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.StatusMessageProperty.CanHaveDate">
            <summary>Represents the <see cref="P:ININ.IceLib.People.StatusMessageDetails.CanHaveDate"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.StatusMessageProperty.CanHaveTime">
            <summary>Represents the <see cref="P:ININ.IceLib.People.StatusMessageDetails.CanHaveTime"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.StatusMessageProperty.IsDoNotDisturbStatus">
            <summary>Represents the <see cref="P:ININ.IceLib.People.StatusMessageDetails.IsDoNotDisturbStatus"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.StatusMessageProperty.IsSelectableStatus">
            <summary>Represents the <see cref="P:ININ.IceLib.People.StatusMessageDetails.IsSelectableStatus"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.StatusMessageProperty.IsPersistentStatus">
            <summary>Represents the <see cref="P:ININ.IceLib.People.StatusMessageDetails.IsPersistentStatus"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.StatusMessageProperty.IsForwardStatus">
            <summary>Represents the <see cref="P:ININ.IceLib.People.StatusMessageDetails.IsForwardStatus"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.StatusMessageProperty.IsAfterCallWorkStatus">
            <summary>Represents the <see cref="P:ININ.IceLib.People.StatusMessageDetails.IsAfterCallWorkStatus"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.StatusMessageProperty.IsAcdStatus">
            <summary>Represents the <see cref="P:ININ.IceLib.People.StatusMessageDetails.IsAcdStatus"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.StatusMessageProperty.IsAllowFollowUpStatus">
            <summary>Represents the <see cref="P:ININ.IceLib.People.StatusMessageDetails.IsAllowFollowUpStatus"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.StatusMessageProperty.SystemId">
            <summary>Represents the <see cref="P:ININ.IceLib.People.StatusMessageDetails.SystemId"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.StatusMessageProperty.Icon">
            <summary>Represents the <see cref="P:ININ.IceLib.People.StatusMessageDetails.Icon"/> property.</summary>
        </member>
        <member name="T:ININ.IceLib.People.StatusMessageDetails">
            <summary>
            Represents the details for a status message watched object. Object instances of this class are managed by 
            the <see cref="T:ININ.IceLib.People.StatusMessageList"/> class.
            </summary>
            <remarks>This class contains information about a status message, such as its description, icon, and type 
            of status (Do Not Disturb, After Call Work, Persistent, etc). Users can add, remove, and modify status messages in 
            <b>Interaction Administrator</b>. Each property is represented by an integer value within the 
            <see cref="T:ININ.IceLib.People.StatusMessageProperty"/> enumeration.<br/><br/>
            <note>The IC server only provides the file name on the server of the status message icons. In order
            to access these icons, they must be installed in the "StatusIcons" subdirectory of the directory 
            where your application executable resides. If the appropriate icon cannot be found, the icon will be 
            subsituted with the stock "Available" icon if the status is not a "Do Not Disturb" status, or the
            stock "Do Not Disturb" icon if the status is a "Do Not Disturb" status.</note>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.StatusMessageDetails.#ctor(System.String,ININ.IceLib.People.StatusMessageDetailsCache)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.StatusMessageDetails"/> class.
            </summary>
        </member>
        <member name="M:ININ.IceLib.People.StatusMessageDetails.Equals(System.Object)">
            <overloads>
            Determines whether two StatusMessageDetails instances are equal.
            </overloads>
            
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.People.StatusMessageDetails.Equals(ININ.IceLib.People.StatusMessageDetails)">
            <summary>
            Determines whether the specified StatusMessageDetails is equal to the current StatusMessageDetails.
            </summary>
            <param name="other">The StatusMessageDetails to compare with the current StatusMessageDetails.</param>
            <returns><c>true</c> if the specified StatusMessageDetails is equal to the current StatusMessageDetails; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ININ.IceLib.People.StatusMessageDetails.op_Equality(ININ.IceLib.People.StatusMessageDetails,ININ.IceLib.People.StatusMessageDetails)">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.People.StatusMessageDetails.op_Inequality(ININ.IceLib.People.StatusMessageDetails,ININ.IceLib.People.StatusMessageDetails)">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.People.StatusMessageDetails.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.People.StatusMessageDetails.Id">
            <summary>
            Gets the unique internal identifier for this status. See <see cref="P:ININ.IceLib.People.StatusMessageDetails.MessageText"/> for display usages.
            </summary>
            <remarks>This internal name for the status is not localized. It is the "Message Name" created when 
            the status was defined in Interaction Administrator. The <see cref="P:ININ.IceLib.People.StatusMessageDetails.MessageText"/> on the other hand,
            is the localized string that is displayed in Interaction Client. For example, the ID "AcdAgentNotAnswering",
            corresponds to MessageText "ACD - Agent Not Answering". The key difference is that status MessageTexts are 
            localized, and status IDs are not.
            </remarks>
            <value>The ID. e.g.: "AcdAgentNotAnswering".</value>
        </member>
        <member name="P:ININ.IceLib.People.StatusMessageDetails.MessageText">
            <summary>
            Gets the localized message text when displaying this status.
            </summary>
            <value>The message text. e.g.: "ACD - Agent Not Answering".</value>
            <remarks>This is the text that appears in Interaction Client's 
            list of selectable statuses.</remarks>
        </member>
        <member name="P:ININ.IceLib.People.StatusMessageDetails.IconFileName">
            <summary>
            Gets the path to an icon file used to display for this status.
            </summary>
            <remarks><note>The IC server only provides the file name on the server of the status message icons. In order
            to access these icons, they must be installed in the "StatusIcons" subdirectory of the directory 
            where your application executable resides. If the appropriate icon cannot be found, the icon will be 
            subsituted with the stock "Available" icon if the status is not a "Do Not Disturb" status, or the
            stock "Do Not Disturb" icon if the status is a "Do Not Disturb" status.</note></remarks>
            <value>The name of the icon file.</value>
        </member>
        <member name="P:ININ.IceLib.People.StatusMessageDetails.Icon">
            <summary>
            Gets the icon associated with this status message.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:ININ.IceLib.People.StatusMessageDetails.GroupTag">
            <summary>
            Gets the group this status belongs to for reporting. 
            </summary>
            <remarks>A <b>Status Group</b> is a name that loosely categorizes a status message for reporting purposes. 
            When a new status is defined in Interaction Administrator using the <i>System Configuration</i> > 
            <i>Status Messages</i> container, it is mapped to a Status Group for reporting purposes. 
            <para>For example, statuses such as "Gone Home", "On Vacation", and "Out of the office" are mapped to 
            the UNAVAILABLE group, while "Available" and "Available, No ACD" are mapped to AVAILABLE. 
            The default status groups are <c>AVAILABLE</c>, <c>BREAK</c>, <c>FOLLOWUP</c>, <c>TRAINING</c>, and
            <c>UNAVAILABLE</c>. Additional groups can be user-defined.</para>
            <para>In general, status <i>messages</i> indicate the details of agent activity and add granularity to reporting. 
            Conversely, status <i>groups</i> roll up related status conditions.</para>
            </remarks>
            <value>The group tag assigned to this status.</value>
        </member>
        <member name="P:ININ.IceLib.People.StatusMessageDetails.CanHaveDate">
            <summary>
            Gets a value indicating whether this status can have an ending date.
            </summary>
            <value>
            	<c>true</c> if this status can have an ending date; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ININ.IceLib.People.StatusMessageDetails.CanHaveTime">
            <summary>
            Gets a value indicating whether this status can have an ending time.
            </summary>
            <value>
            	<c>true</c> if this status can have an ending time; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ININ.IceLib.People.StatusMessageDetails.IsDoNotDisturbStatus">
            <summary>
            Gets a value indicating whether this instance is a do not disturb status.
            </summary>
            <value>
            	<c>true</c> if this instance is a do not disturb status; otherwise, <c>false</c>.
            </value>
            <remarks>When a user has this status, they do not wish to be disturbed.</remarks>
        </member>
        <member name="P:ININ.IceLib.People.StatusMessageDetails.IsSelectableStatus">
            <summary>
            Gets a value indicating whether this status is selectable by an agent.
            </summary>
            <value>
            	<c>true</c> if this instance is a selectable status; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ININ.IceLib.People.StatusMessageDetails.IsPersistentStatus">
            <summary>
            Gets a value indicating whether the status can persist when the agent logs out of IC.
            </summary>
            <value>
            	<c>true</c> if this instance is a persistent status; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ININ.IceLib.People.StatusMessageDetails.IsForwardStatus">
            <summary>
            Gets a value indicating whether this instance is a forward status.
            </summary>
            <value>
            	<c>true</c> if this instance is forward status; otherwise, <c>false</c>.
            </value>
            <remarks>When a user has this status, they are available at a different phone number.</remarks>
        </member>
        <member name="P:ININ.IceLib.People.StatusMessageDetails.IsAfterCallWorkStatus">
            <summary>
            Gets a value indicating whether this status requires after call work (ACW).
            </summary>
            <value>
            	<c>true</c> if this instance is an after call work status; otherwise, <c>false</c>.
            </value>
            <remarks>Indicates that an agent is in
            "Follow Up" mode (<see cref="P:ININ.IceLib.People.StatusMessageDetails.IsAllowFollowUpStatus"/>) after an ACD call.</remarks>
        </member>
        <member name="P:ININ.IceLib.People.StatusMessageDetails.IsAcdStatus">
            <summary>
            Gets a value indicating whether this status allows ACD calls.
            </summary>
            <value>
            	<c>true</c> if this instance is an ACD status; otherwise, <c>false</c>.
            </value>
            <remarks>Indicates an agent is available to receive ACD calls.</remarks>
        </member>
        <member name="P:ININ.IceLib.People.StatusMessageDetails.IsAllowFollowUpStatus">
            <summary>
            Gets a value indicating whether this status allows follow up.
            </summary>
            <value>
            	<c>true</c> if this instance is an allow follow up status; otherwise, <c>false</c>.
            </value>
            <remarks>Indicates that an agent's status can
            change to "Follow Up" after an ACD call terminates.</remarks>
        </member>
        <member name="P:ININ.IceLib.People.StatusMessageDetails.IsValid">
            <summary>
            Gets whether this status message is valid.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
            <remarks>This only gets set to false as a result of calls to the indexer on <see cref="T:ININ.IceLib.People.StatusMessageList"/>.</remarks>
        </member>
        <member name="P:ININ.IceLib.People.StatusMessageDetails.SystemId">
            <summary>
            Gets an unique numeric identifier for this status message.
            </summary>
            <value>The system ID.</value>
        </member>
        <member name="T:ININ.IceLib.People.StatusMessageList">
            <summary>
            Represents a watched list of status messages. Use <see cref="T:ININ.IceLib.People.StatusMessageDetails"/> to 
            get the details of a status message watched object.
            </summary>
            <remarks>The list of status messages can be modified in <b>Interaction Administrator</b>. To start watching 
            the list of status messages, call the <see cref="M:ININ.IceLib.People.StatusMessageList.StartWatching"/> or <see cref="M:ININ.IceLib.People.StatusMessageList.StartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods. 
            The <c>completedCallback</c> delegate is invoked when the asynchronous start watch operation completes. 
            To stop watching, call the <see cref="M:ININ.IceLib.People.StatusMessageList.StopWatching"/> or <see cref="M:ININ.IceLib.People.StatusMessageList.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods. 
            The <c>completedCallback</c> delegate is invoked when the asynchronous stop watch operation completes.
            <para>Once a watch is in place any changes to the status message list trigger the <see cref="E:ININ.IceLib.People.StatusMessageList.WatchedObjectsChanged"/> 
            event. You can access the list of status messages by calling <see cref="M:ININ.IceLib.People.StatusMessageList.GetList"/>. Calling 
            <see cref="M:ININ.IceLib.People.StatusMessageList.GetList"/> if a watch is not in progress raises the <see cref="T:System.InvalidOperationException"/>. 
            Calling <see cref="M:ININ.IceLib.People.StatusMessageList.StartWatching"/> or <see cref="M:ININ.IceLib.People.StatusMessageList.StartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch is
            already in place, or calling <see cref="M:ININ.IceLib.People.StatusMessageList.StopWatching"/> or <see cref="M:ININ.IceLib.People.StatusMessageList.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch
            is not in place also raises the <see cref="T:System.InvalidOperationException"/>.<br/><br/></para>
            <note>The asynchronous methods are preferred since the start, change, and stop watch can be 
            lengthy operations.</note>
            <para>There are two classes in IceLib for watching status messages. The <see cref="T:ININ.IceLib.People.StatusMessageList"/> class
            allows you to watch the list of all status messages defined in IC that the session user has the rights to view. The 
            <see cref="T:ININ.IceLib.People.FilteredStatusMessageList"/> class allows you to watch the status messages that are available
            for a particular IC user. The list of available status messages for a user can vary based on workgroup membership, role, and user settings
            in <b>Interaction Administrator.</b></para>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.StatusMessageList.#ctor(ININ.IceLib.People.PeopleManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.StatusMessageList"/> class.
            </summary>
            <param name="peopleManager">A <see cref="P:ININ.IceLib.People.StatusMessageList.PeopleManager"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.People.StatusMessageList.IsValidStatus(System.String)">
            <summary>
            Determines whether a given status is defined.
            </summary>
            <param name="name">The status message to check.</param>
            <returns>
            	<c>true</c> if the specified status is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.People.StatusMessageList.GetList">
            <summary>
            Get a list of the defined status messages.
            </summary>
            <returns>An array of <see cref="T:ININ.IceLib.People.StatusMessageDetails"/>.</returns>
            <exception cref="T:ININ.IceLib.NotCachedException">There are no objects in the cache.</exception>
            <exception cref="T:System.InvalidOperationException">A watch is not in progress.</exception>
        </member>
        <member name="M:ININ.IceLib.People.StatusMessageList.IsWatching">
            <summary>
            Determines whether a watch is active.
            </summary>
            <returns>
            	<c>true</c> if a watch is active; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method determines whether a watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.People.StatusMessageList.StartWatching">
            <summary>
            Starts watching the Status Message List.
            </summary>
            <exception cref="T:System.InvalidOperationException">A watch is already in progress.</exception>
        </member>
        <member name="M:ININ.IceLib.People.StatusMessageList.StartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously starts watching the Status Message List.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.People.StatusMessageList.StopWatching">
            <summary>
            Stops watching the Status Message List.
            </summary>
            <exception cref="T:System.InvalidOperationException">A watch is not in progress.</exception>
        </member>
        <member name="M:ININ.IceLib.People.StatusMessageList.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops watching the Status Message List.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="P:ININ.IceLib.People.StatusMessageList.Item(System.String)">
            <summary>
            Get an individual status message definition by its unique name.
            </summary>
            <param name="name">The status message to get.</param>
            <value>The status message details.</value>
            <exception cref="T:System.InvalidOperationException">If a watch is not in progress.</exception>
            <remarks>
            <para>If the status message is not defined, a StatusMessageDetails is still returned, with
            <see cref="P:ININ.IceLib.People.StatusMessageDetails.IsValid"/> set to false.  The <see cref="P:ININ.IceLib.People.StatusMessageDetails.IconFileName"/>
            will be set to "invalid.ico".  If this icon file exists, <see cref="P:ININ.IceLib.People.StatusMessageDetails.Icon"/> will
            return it, otherwise a default invalid icon will be returned.</para>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.People.StatusMessageList.WatchedObjectsChanged">
            <summary>
            Occurs when one of the <see cref="T:ININ.IceLib.People.StatusMessageDetails"/> watched objects has changed.
            </summary>
            <remarks>
            Note that changes, additions, and removal of objects are monitored for a <see cref="T:ININ.IceLib.People.StatusMessageList"/>.
            <para>
            Each <see cref="P:ININ.IceLib.People.WatchedObjectsEventArgs`1.Changed"/> notification 
            for a <see cref="T:ININ.IceLib.People.StatusMessageDetails"/> object is described by the
            integer values defined in the <see cref="T:ININ.IceLib.People.StatusMessageProperty"/> enumeration.
            </para>
            </remarks>
        </member>
        <member name="T:ININ.IceLib.People.StatusMessageListCache">
            <exclude/><summary>
            Watched class to manage a list of IC objects of the same type.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.UserEntryCache">
            <exclude/><summary>
            A simplified version of a cached object and its attributes.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.UserEntryProperty">
            <summary>
            Each value in this enumeration represents a property in <see cref="T:ININ.IceLib.People.UserEntry"/>.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserEntryProperty.None">
            <summary>No property is defined.</summary>
        </member>
        <member name="F:ININ.IceLib.People.UserEntryProperty.UserId">
            <summary>Represents the <see cref="P:ININ.IceLib.People.UserEntry.UserId"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.UserEntryProperty.DisplayName">
            <summary>Represents the <see cref="P:ININ.IceLib.People.UserEntry.DisplayName"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.UserEntryProperty.Company">
            <summary>Represents the <see cref="P:ININ.IceLib.People.UserEntry.Company"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.UserEntryProperty.Department">
            <summary>Represents the <see cref="P:ININ.IceLib.People.UserEntry.Department"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.UserEntryProperty.Extension">
            <summary>Represents the <see cref="P:ININ.IceLib.People.UserEntry.Extension"/> property.</summary>
        </member>
        <member name="F:ININ.IceLib.People.UserEntryProperty.HomeSite">
            <summary>Represents the <see cref="P:ININ.IceLib.People.UserEntry.HomeSite"/> property.</summary>
        </member>
        <member name="T:ININ.IceLib.People.UserEntry">
            <summary>Represents a user entry watched object. For example, their display name, company, extension, etc.
            Object instances of this class are managed by the <see cref="T:ININ.IceLib.People.UserEntryList"/> class.
            </summary>
            <remarks>Each property is represented by an integer value within the <see cref="T:ININ.IceLib.People.UserEntryProperty"/> 
            enumeration. The user's entry contains information such as a display name, department, and home site,
            and so on.</remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.UserEntry.#ctor(ININ.IceLib.People.UserEntryCache)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.UserEntry"/> class.
            </summary>
        </member>
        <member name="P:ININ.IceLib.People.UserEntry.UserId">
            <summary>
            The unique identifier for this user entry. This is the IC User ID.
            </summary>
            <value>The user ID.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserEntry.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserEntry.Company">
            <summary>
            Gets the Company.
            </summary>
            <value>The Company.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserEntry.Department">
            <summary>
            Gets the Department.
            </summary>
            <value>The Department.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserEntry.Extension">
            <summary>
            Gets the Extension.
            </summary>
            <value>The Extension.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserEntry.HomeSite">
            <summary>
            Gets the HomeSite.
            </summary>
            <value>The HomeSite.</value>
        </member>
        <member name="T:ININ.IceLib.People.UserEntryList">
            <summary>
            Represents a list of watched user entries (<see cref="T:ININ.IceLib.People.UserEntry"/>).
            </summary>
            <remarks>This class allows you to start, stop, and change watches on the user entry for a number of users. To start a watch for an
            array of users, call <see cref="M:ININ.IceLib.People.UserEntryList.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.People.UserEntryList.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods with an array of user IDs. When the asynchronous start watch operation
            completes, the <c>completedCallback</c> delegate is invoked.
            <para>Yor can change the users for which you want to monitor their entry by calling the <see cref="M:ININ.IceLib.People.UserEntryList.ChangeWatchedUsers(System.String[],System.String[],System.Boolean)"/> or <see cref="M:ININ.IceLib.People.UserEntryList.ChangeWatchedUsersAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods and
            passing an array of user IDs. When the asynchronous change watch operation completes, the <c>completedCallback</c> delegate is invoked. </para>
            <para>You can stop watching user entry by calling the <see cref="M:ININ.IceLib.People.UserEntryList.StopWatching"/> or <see cref="M:ININ.IceLib.People.UserEntryList.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods. When the asynchronous stop watch operation
            completes the <c>completedCallback</c> delegate is invoked.</para>
            <para>To get the list of watched user entries, call the <see cref="M:ININ.IceLib.People.UserEntryList.GetList"/> method. An <see cref="T:System.InvalidOperationException"/> is raised if a watch
            is not in progress.</para>
            <para>When a user entry changes, the <see cref="E:ININ.IceLib.People.UserEntryList.WatchedObjectsChanged"/> event is triggered, providing information on the user entry that has changed.</para>
            <para>Calling <see cref="M:ININ.IceLib.People.UserEntryList.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.People.UserEntryList.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch has already been started, or calling <see cref="M:ININ.IceLib.People.UserEntryList.ChangeWatchedUsers(System.String[],System.String[],System.Boolean)"/>, <see cref="M:ININ.IceLib.People.UserEntryList.ChangeWatchedUsersAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>,
            <see cref="M:ININ.IceLib.People.UserEntryList.StopWatching"/>, or <see cref="M:ININ.IceLib.People.UserEntryList.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch is not in progress raises the <see cref="T:System.InvalidOperationException"/>.<br/><br/></para>
            <note>The asynchronous methods are preferred since the start, change, and stop watch can be lengthy operations.</note></remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.UserEntryList.#ctor(ININ.IceLib.People.PeopleManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.UserEntryList"/> class.
            </summary>
            <param name="peopleManager">A <see cref="P:ININ.IceLib.People.UserEntryList.PeopleManager"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserEntryList.GetList">
            <summary>
            Get a list of user entries being watched.
            </summary>
            <exception cref="T:ININ.IceLib.NotCachedException">If the user entry list is not cached.</exception>
            <returns>A list of <see cref="T:ININ.IceLib.People.UserEntry"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserEntryList.IsWatching">
            <overloads>
            Determines whether a watch is active.
            </overloads>
            
            <summary>
            Determines whether a watch is active.
            </summary>
            <returns>
            	<c>true</c> if a watch is active; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method determines whether a watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserEntryList.IsWatching(System.String)">
            <summary>
            Determines whether a watch is active and if the specified value is being watched.
            </summary>
            <param name="userId">The user.</param>
            <returns>
            	<c>true</c> if a watch is active and the specified value is being watched; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>
            This method determines whether a watch is in place for this instance and whether the specified value is being watched.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserEntryList.StartWatching(System.String[])">
            <summary>
            Starts watching the User Entry List.
            </summary>
            <param name="userIds">An array of user IDs for watching user entry.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">The object is already being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserEntryList.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously starts watching the User Entry List.
            </summary>
            <param name="userIds">An array of user IDs for watching user entry.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserEntryList.StopWatching">
            <summary>
            Stops watching the User Entry List.
            </summary>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserEntryList.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops watching the User Entry List.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserEntryList.ChangeWatchedUsers(System.String[],System.String[],System.Boolean)">
            <summary>
            Changes the users being watched.
            </summary>
            <param name="userIDsToAdd">The user IDs to add. (Can be <b>null</b>.)</param>
            <param name="userIDsToRemove">The user IDs to remove. (Can be <b>null</b>.)</param>
            <param name="replaceExisting">if set to <c>true</c>, replace the existing existing list.</param>
            <remarks>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserEntryList.ChangeWatchedUsersAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes the users being watched.
            </summary>
            <param name="userIDsToAdd">The user IDs to add. (Can be <b>null</b>.)</param>
            <param name="userIDsToRemove">The user IDs to remove. (Can be <b>null</b>.)</param>
            <param name="replaceExisting">if set to <c>true</c>, replace the existing existing list.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>
            <para>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</para>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            </remarks>
        </member>
        <member name="P:ININ.IceLib.People.UserEntryList.Item(System.String)">
            <summary>
            Get an individual entry for a user.
            </summary>
            <param name="userId">The entry to get.</param>
            <value>The entry details.</value>
            <exception cref="T:System.InvalidOperationException">If a watch is not in progress.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">If the requested <b>userId</b> is not in the cache.</exception>
        </member>
        <member name="E:ININ.IceLib.People.UserEntryList.WatchedObjectsChanged">
            <summary>
            Occurs when one of the <see cref="T:ININ.IceLib.People.UserEntry"/> watched objects has changed.
            </summary>
            <remarks>
            Note that only changes to existing objects in the watch are monitored.
            There are no objects added to or removed from the <see cref="T:ININ.IceLib.People.UserEntryList"/> watched objects.
            <para>
            Each <see cref="P:ININ.IceLib.People.WatchedObjectsEventArgs`1.Changed"/> notification 
            for a <see cref="T:ININ.IceLib.People.UserEntry"/> object is described by the
            integer values defined in the <see cref="T:ININ.IceLib.People.UserEntryProperty"/> enumeration.
            </para>
            </remarks>
        </member>
        <member name="T:ININ.IceLib.People.UserEntryListCache">
            <exclude/><summary>
            Watched class to manage a list of IC user entries.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.Localization">
            <summary>
            Helper class for accessing string from resource files.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.PeopleManager">
            <summary>
            Provides access to all watched attribute and object classes in the People namespace.
            </summary>
            <remarks>
            This class serves as the initial entry point into the People namespace. It contains references to 
            all watched object and watched attribute caches. All classes in the People namespace send and receive
            messages to/from the IC system via the <see cref="P:ININ.IceLib.People.PeopleManager.Session"/> object of the <see cref="T:ININ.IceLib.People.PeopleManager"/>.<br/><br/>
            <note>The <see cref="T:ININ.IceLib.People.PeopleManager"/> class is a singleton object and is accessed using the
            <see cref="M:ININ.IceLib.People.PeopleManager.GetInstance(ININ.IceLib.Connection.Session)"/> method.</note><br/>
            <example>
            <code lang="C#" unescaped="false">
            Session session = <span style="color:blue">new</span> Session();
            session.Connect(...);
            PeopleManager peopleManager = PeopleManager.GetInstance(session);
            </code>
            </example>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.PeopleManager.GetInstance(ININ.IceLib.Connection.Session)">
            <summary>
            Gets a PeopleManager.
            </summary>
            <param name="session">The Session with which it is associated.</param>
            <returns>The PeopleManager object.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.People.PeopleManager.Session">
            <summary>
            Gets the Session with which this PeopleManager is associated.
            </summary>
            <value>The session object.</value>
        </member>
        <member name="P:ININ.IceLib.People.PeopleManager.PeopleId">
            <summary>
            Gets the unique ID for this object instance.
            </summary>
            <value>The people ID.</value>
        </member>
        <member name="T:ININ.IceLib.People.WatchedAttributesEventArgs">
            <summary>
            Provides data for the WatchedAttributesChangedEvent event of a 
            <see cref="T:ININ.IceLib.People.WorkgroupDetails"/> class or
            <see cref="T:ININ.IceLib.People.UserSettings"/> derived classes.
            </summary>
            <remarks>This class extends EventArgs, the base class for classes containing event data.</remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.WatchedAttributesEventArgs.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.WatchedAttributesEventArgs"/> class with the specified values.
            </summary>
            <param name="attributeNames">The attribute names.</param>
        </member>
        <member name="P:ININ.IceLib.People.WatchedAttributesEventArgs.AttributeNames">
            <summary>
            Gets the attribute names associated with the change.
            </summary>
            <value>The attribute names.</value>
        </member>
        <member name="T:ININ.IceLib.People.PeopleWatchedAttributeCache">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedAttributeCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.PeopleWatchedAttributeCache"/> class.
            </summary>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedAttributeCache.IsWatching(System.Object)">
            <summary>
            Determines whether the specified watcher is watching.
            </summary>
            <param name="watcher">The watcher.</param>
            <returns><c>true</c> if the specified watcher is watching; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedAttributeCache.StartWatching(System.Object,System.String[])">
            <summary>
            Starts a watcher, potentially resulting in a round trip to the server.
            </summary>
            <param name="watcher">The watcher.</param>
            <param name="attributeNames">The new attribute names.</param>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedAttributeCache.ChangeWatchedAttributes(System.Object,System.String[],System.String[],System.Boolean)">
            <summary>
            Changes a watcher, potentially resulting in a round trip to the server.
            </summary>
            <param name="watcher">The watcher.</param>
            <param name="attributeNamesToAdd">The attribute names to add.</param>
            <param name="attributeNamesToRemove">The attribute names to remove.</param>
            <param name="replaceExisting">if set to <c>true</c> [replace existing].</param>
            <remarks>This will throw an exception if a watch is not in progress.</remarks>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedAttributeCache.StopWatching(System.Object)">
            <summary>
            Stops a watcher, potentially resulting in a round trip to the server.
            </summary>
            <param name="watcher">The watcher.</param>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedAttributeCache.StartWatchingImpl(System.String[])">
            <summary>
            Start watching implementation for inheriting classes.
            </summary>
            <param name="attributeNames">The attribute names.</param>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedAttributeCache.ChangeWatchedAttributesImpl(System.String[],System.Boolean)">
            <summary>
            Change watch implementation for inheriting classes.
            </summary>
            <param name="attributeNames">The attribute names.</param>
            <param name="removeOnly">if set to <c>true</c> if only removing.</param>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedAttributeCache.StopWatchingImpl">
            <summary>
            Stop watching implementation for inheriting classes.
            </summary>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedAttributeCache.GetWatcherAttributes(System.String[])">
            <summary>
            Gets the watchers for the specified attributes.
            </summary>
            <param name="attributeNames">The attribute names.</param>
            <returns>The watchers.</returns>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedAttributeCache.IsAttributeWatched(System.String)">
            <summary>
            Determines whether the attribute is being watched.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if the attribute is being watched; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedAttributeCache.GetAttributeAsString(System.String)">
            <summary>
            Gets the attribute as a string.
            </summary>
            <param name="name">The name.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedAttributeCache.GetAttributeAsStrings(System.String)">
            <summary>
            Gets the attribute as a string array.
            </summary>
            <param name="name">The name.</param>
            <returns>The string array.</returns>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedAttributeCache.GetAttributeAsObject(System.String)">
            <summary>
            Gets the attribute as an object.
            </summary>
            <param name="name">The name.</param>
            <returns>A System.Object.</returns>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedAttributeCache.GetAttributeAsBool(System.String)">
            <summary>
            Gets the attribute as a bool.
            </summary>
            <param name="name">The name.</param>
            <returns>The bool.</returns>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedAttributeCache.GetAttributeAsInt32(System.String)">
            <summary>
            Gets the attribute as int32.
            </summary>
            <param name="name">The name.</param>
            <returns>The integer value. This will return 0 if the attribute value is empty or not set.</returns>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedAttributeCache.SetAttribute(System.String,System.String)">
            <summary>
            Sets the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedAttributeCache.SetAttribute(System.String,System.String[])">
            <summary>
            Sets the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="attributeValue">The attribute value as a string array.</param>
        </member>
        <member name="M:ININ.IceLib.People.PeopleWatchedAttributeCache.SetAttributeAsObject(System.String,System.Object)">
            <summary>
            Sets the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="attributeValue">The attribute value as a System.Object.</param>
        </member>
        <member name="P:ININ.IceLib.People.PeopleWatchedAttributeCache.WatchCount">
            <summary>
            Gets the number of watchers.
            </summary>
            <value>The watch count.</value>
        </member>
        <member name="P:ININ.IceLib.People.PeopleWatchedAttributeCache.Watchers">
            <summary>
            Gets the watchers.
            </summary>
            <value>The watchers.</value>
            <remarks>
            Be sure to lock while accessing the watcher list.
            </remarks>
        </member>
        <member name="T:ININ.IceLib.People.PeopleWatchedAttributeCache.AttributeEntry">
            <exclude/><summary>
            Inner class for PeopleWatchedAttributeCache. Stores the attribute name and its value.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.UserAccessListsAttributes">
            <summary>
            Attribute strings for the <see cref="T:ININ.IceLib.People.UserAccessListsSettings"></see> watched class.
            </summary>
            <doccompleted/>
        </member>
        <member name="F:ININ.IceLib.People.UserAccessListsAttributes.ViewWorkgroupQueueList">
            <summary>
            Get the list of workgroup queues for view only access.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserAccessListsAttributes.ModifyWorkgroupQueueList">
            <summary>
            Get the list of workgroup queues that can be modified. For example, queues that can 
            pick up, transfer interactions from, and so on.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserAccessListsAttributes.ViewWorkgroupList">
            <summary>
            Get the list of workgroups for view only access.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserAccessListsAttributes.ViewUserQueueList">
            <summary>
            Get the list of user queues for view only access.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserAccessListsAttributes.ModifyUserQueueList">
            <summary>
            Get the list of user queues that can be modified. This allows the user
            to make changes to other users' status, pick up calls, and so on.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserAccessListsAttributes.ViewStationQueueList">
            <summary>
            Get the list of station queues for view only access.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserAccessListsAttributes.ModifyStationQueueList">
            <summary>
            Get the list of station queues that can be modified.  For example,
            pick up, transfer from, and so on.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserAccessListsAttributes.ViewLineQueueList">
            <summary>
            Get the list of line queues for view only access.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserAccessListsAttributes.ModifyLineQueueList">
            <summary>
            Get the list of line queues that can be modified.  For example,
            pick up, transfer from, and so on.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserAccessListsAttributes.ActivateSelfList">
            <summary>
            Get the list of queues the user can activate themselves.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserAccessListsAttributes.ClientButtonsList">
            <summary>
            Get the list of call control buttons that the user can configure.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserAccessListsAttributes.PhoneNumberClassificationList">
            <summary>
            Get the list of dial plan phone number classifications that the user can use.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserAccessListsAttributes.AccountCodesList">
            <summary>
            Get the list of account codes the user can use.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserAccessListsAttributes.StatusMessages">
            <summary>
            Get the list of status messages the user can user 
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserAccessListsAttributes.OptimizerSchedulingUnitsList">
            <summary>
            Get the list of optimizer scheduling units that the user has access to.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.AccountCode">
            <summary>
            Represents an account code.
            </summary>
            <remarks><i>Account codes</i> are used in IC to associate calls with accounts. An account 
            code is a number assigned to an account name in Interaction Administrator. 
            Account codes can be assigned to incoming and outgoing calls for reporting purposes. For example, 
            Interaction Client users can assign account codes to incoming and outgoing calls from the Interactions 
            page, or from any queue. Users who have been given access to an account code can assign it to a call so 
            it can be tracked. Account codes can also be used to track outgoing calls made to specific customers, or to 
            track incoming call information for billing purposes.<br/><br/>
            <note>For more information about Account Codes, refer to the topic titled <i>Account Codes in IC</i> in 
            the <i>Technical Reference Documents</i> section of the <i>IC Documentation library</i> on your 
            server.</note>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.AccountCode.ToString">
            <summary>
            Get a string containing the account code code ID and Description elements. 
            </summary>
            <returns>A string with the following format: {ID,Description}.</returns>
        </member>
        <member name="P:ININ.IceLib.People.AccountCode.Id">
            <summary>
            Gets the account code's ID.
            </summary>
            <value>The account code ID number.</value>
        </member>
        <member name="P:ININ.IceLib.People.AccountCode.Description">
            <summary>
            Gets the descriptive name for this account code as it was defined in Interaction Administrator.
            </summary>
            <value>The description of the account code. e.g.: ManagedTours, Inc.</value>
        </member>
        <member name="T:ININ.IceLib.People.UserAccessListsSettings">
            <summary>
            Represents the access control lists settings for an IC user. These settings are configured in the 
            Access Control tab in <b>Interaction Administrator</b>.
            </summary>
            <remarks>Access control options are set in Interaction Administrator at the Default User, Roles, 
            User, or Workgroup level. These options determine which queues a User, Workgroup or Role can view 
            and which queues they can modify (that is, perform Interaction Client functions such as pick up 
            calls, listen in on calls, place calls on hold, change status, and so on).</remarks>
            <doccompleted/>
        </member>
        <member name="T:ININ.IceLib.People.UserSettings">
            <summary>
            Represents the basic settings for an IC user.
            </summary>
            <remarks>
            Derived classes must invoke the public constructor.
            <code lang="C#" escaped="false">
            <span style="color:blue">public class</span> MyUserSettings : UserSettings
            {
                <span style="color:blue">public</span> MyUserSettings(PeopleManager peopleManager) : <c><span style="color:blue">base</span>(peopleManager)</c>
                {
                }
            ...
            }
            </code>
            <para>This class implements a watched attribute object for basic user settings for an IC user.</para>
            <para>To start a watch call <see cref="M:ININ.IceLib.People.UserSettings.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.People.UserSettings.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> with an array of attributes to watch. When the asynchronous start watch
            completes the <c>completedCallback</c> delegate is invoked. To stop a watch call <see cref="M:ININ.IceLib.People.UserSettings.StopWatching"/> or <see cref="M:ININ.IceLib.People.UserSettings.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When
            the asynchronous stop watch operation completes, the <c>completedCallback</c> delegate is invoked. To change the list of attributes
            that are watched call the <see cref="M:ININ.IceLib.People.UserSettings.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)"/> or <see cref="M:ININ.IceLib.People.UserSettings.ChangeWatchedAttributesAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> with the new array of attributes to watch. When the asynchronous
            change watching operation completes, the <c>completedCallback</c> delegate is invoked.</para>
            <para>When an attribute changes, the <see cref="E:ININ.IceLib.People.UserSettings.WatchedAttributesChanged"/> event is triggered providing information about which attributes have changed.</para>
            <para>Calling <see cref="M:ININ.IceLib.People.UserSettings.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.People.UserSettings.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch is already in place, or calling 
            <see cref="M:ININ.IceLib.People.UserSettings.StopWatching"/>, <see cref="M:ININ.IceLib.People.UserSettings.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>, <see cref="M:ININ.IceLib.People.UserSettings.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)"/>, or <see cref="M:ININ.IceLib.People.UserSettings.ChangeWatchedAttributesAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch
            is not in place, raises the <see cref="T:System.InvalidOperationException"/>.</para>
            <para>Accessing a property for an attribute that is not being watched raises the <see cref="T:ININ.IceLib.NotCachedException"/>.<br/><br/></para>
            <note>The asynchronous version of these methods is preferred since the start, stop, and change watch operations can be lengthy.</note>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.UserSettings.#ctor(ININ.IceLib.People.PeopleManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.UserSettings"/> class for
            the current session user.
            </summary>
            <param name="peopleManager">A <see cref="P:ININ.IceLib.People.UserSettings.PeopleManager"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserSettings.GetAttributeAsString(System.String)">
            <summary>
             Gets the values for the named attribute.
            </summary>
            <param name="attributeName">Name of attribute to get.</param>
            <returns>String value for that attribute. If this is a multi-value attribute, then
            the first value in the array is returned. If there is no value associated with this
            attribute then an empty string is returned.</returns>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserSettings.GetAttributeAsStrings(System.String)">
            <summary>
             Gets the string values for the named attribute.
            </summary>
            <param name="attributeName">Name of attribute to get.</param>
            <returns>The string array of values associated with this attribute.</returns>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserSettings.GetAttributeAsBool(System.String)">
            <summary>
            Gets boolean value for the named attribute. A <c>true</c> boolean attribute has a string value.
            of "Yes".
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns><c>true</c> if the string value is set to "Yes".</returns>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserSettings.IsWatching">
            <overloads>
            Determines whether a watch is active.
            </overloads>
            
            <summary>
            Determines whether a watch is active.
            </summary>
            <returns>
            	<c>true</c> if a watch is active; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method determines whether a watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserSettings.IsWatching(System.String)">
            <summary>
            Determines whether a watch is active and if the specified value is being watched.
            </summary>
            <param name="attributeName">The setting.</param>
            <returns>
            	<c>true</c> if a watch is active and the specified value is being watched; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>
            This method determines whether a watch is in place for this instance and whether the specified value is being watched.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserSettings.StartWatching(System.String[])">
            <summary>
            Starts watching user settings.
            </summary>
            <param name="attributeNames">An array of settings to watch.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">The object is already being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserSettings.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously starts watching user setttings.
            </summary>
            <param name="attributeNames">An array of settings to watch.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserSettings.StopWatching">
            <summary>
            Stops watching user settings.
            </summary>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserSettings.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops watching user settings.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserSettings.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)">
            <summary>
            Changes the user settings watched.
            </summary>
            <param name="attributeNamesToAdd">The attribute names to add. (Can be <b>null</b>.)</param>
            <param name="attributeNamesToRemove">The attribute names to remove. (Can be <b>null</b>.)</param>
            <param name="replaceExisting">if set to <c>true</c>, replace the existing existing list.</param>
            <remarks>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The object is already being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserSettings.ChangeWatchedAttributesAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes the user settings watched.
            </summary>
            <param name="attributeNamesToAdd">The attribute names to add. (Can be <b>null</b>.)</param>
            <param name="attributeNamesToRemove">The attribute names to remove. (Can be <b>null</b>.)</param>
            <param name="replaceExisting">if set to <c>true</c>, replace the existing existing list.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>
            <para>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</para>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.People.UserSettings.WatchedAttributesChanged">
            <summary>
            Occurs when one of the watched attribute values has been changed.
            </summary>
        </member>
        <member name="M:ININ.IceLib.People.UserAccessListsSettings.#ctor(ININ.IceLib.People.PeopleManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.UserAccessListsSettings"/> class for
            the current session user.
            </summary>
            <param name="peopleManager">A <see cref="T:ININ.IceLib.People.PeopleManager"/> instance.</param>
        </member>
        <member name="P:ININ.IceLib.People.UserAccessListsSettings.ViewWorkgroupQueueList">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserAccessListsAttributes.ViewWorkgroupQueueList"/> access control list of workgroup queues that this user can view but not modify.
            </summary>
            <value>The view workgroup queue list.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserAccessListsSettings.ModifyWorkgroupQueueList">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserAccessListsAttributes.ModifyWorkgroupQueueList"/> access control list of workgroup 
            queues that can be modified. From these queues the user can pick up, transfer from, etc. 
            </summary>
            <value>The modify workgroup queue list.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserAccessListsSettings.ViewWorkgroupList">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserAccessListsAttributes.ViewWorkgroupList"/> access control list of workgroups 
            that this user can view but not modify.
            </summary>
            <value>The view workgroup list.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserAccessListsSettings.ViewUserQueueList">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserAccessListsAttributes.ViewUserQueueList"/> access control list of user queues that this user can view but not modify.
            </summary>
            <value>The view user queue list.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserAccessListsSettings.ModifyUserQueueList">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserAccessListsAttributes.ModifyUserQueueList"/> access control list of user queues 
            that can be modified by this user to make changes to other users' status, pick up calls, and so on.
            </summary>
            <value>The modify user queue list.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserAccessListsSettings.ViewStationQueueList">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserAccessListsAttributes.ViewStationQueueList"/> access control list of station queues that this user can view but not modify.
            </summary>
            <value>The view station queue list.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserAccessListsSettings.ModifyStationQueueList">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserAccessListsAttributes.ModifyStationQueueList"/> access control list of station queues that this user can modify.
            </summary>
            <value>The modify station queue list.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserAccessListsSettings.ViewLineQueueList">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserAccessListsAttributes.ViewLineQueueList"/> access control list of line queues that this user can view but not modify.
            </summary>
            <value>The view line queue list.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserAccessListsSettings.ModifyLineQueueList">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserAccessListsAttributes.ModifyLineQueueList"/> access control list of line queues that this user can modify.
            </summary>
            <value>The modify line queue list.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserAccessListsSettings.ActivateSelfList">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserAccessListsAttributes.ActivateSelfList"/> access control list of queues this user can activate.
            </summary>
            <value>The activate self list.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserAccessListsSettings.ClientButtonsList">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserAccessListsAttributes.ClientButtonsList"/> access control list of call control buttons this user can configure.
            </summary>
            <value>The client buttons list.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserAccessListsSettings.PhoneNumberClassificationList">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserAccessListsAttributes.PhoneNumberClassificationList"/> access control list of dial plan phone number classifications that this user can use.
            </summary>
            <remarks>Phone numbers that can be identified by a pattern in the numbers, or an explicit group of 
            phone numbers with a common purpose are called phone number "classifications". For example, internal
            calls could be identified by the "Internal" classification, toll free (for example, 800 numbers) could 
            be identified by the "Toll Free" classification, and calls to emergency services (such as 911, fire 
            department, police, and hospital) could be identified by the "Emergency" classification. 
            <para>When IC users dial a phone number, IC matches the number dialed with the appropriate classification 
            pattern. It then checks the user's dialing privileges to determine if the user or station is authorized 
            to place the call. In this way, IC uses phone number classifications to control individual users, 
            workgroups, roles, and station dialing privileges.</para></remarks>
            <value>The phone number classification list.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserAccessListsSettings.StatusMessageList">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserAccessListsAttributes.StatusMessages"/> access control list of all status messages that the user can see.
            </summary>
            <remarks>Status messages are filtered by workgroup so that the list of status messages the user can see is
            the union of all status messages from their assigned workgroup.</remarks>
            <value>The list of status messages.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserAccessListsSettings.AccountCodesList">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserAccessListsAttributes.AccountCodesList"/> access control list.
            This list value is a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>  of account codes that this user can use.
            </summary>
            <value>The account codes list.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserAccessListsSettings.OptimizerSchedulingUnitsList">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserAccessListsAttributes.OptimizerSchedulingUnitsList"/> access control list.
            </summary>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="T:ININ.IceLib.People.UserDataAttributes">
            <summary>
            Attribute strings for the <see cref="T:ININ.IceLib.People.UserDataSettings"></see> watched class.
            </summary>
            <doccompleted/>
        </member>
        <member name="F:ININ.IceLib.People.UserDataAttributes.SupervisedWorkgroups">
            <summary>
            List of workgroups supervised by the user.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserDataAttributes.Workgroups">
            <summary>
            List of workgroups this user is a member of.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserDataAttributes.PlayAcdAgentGreeting">
            <summary>
            Indicates whether the agent's greeting ("smile") prompt should
            be played for callers at the beginning of every ACD call to this agent.
            </summary>
            <remarks>When True, the agent's greeting is played for callers at the beginning of 
            every ACD call sent to the agent.</remarks>
        </member>
        <member name="T:ININ.IceLib.People.UserDataSettings">
            <summary>
            Represents miscellaneous data settings for an IC user, such as the user's workgroup membership, 
            supervisory rights, and greeting preference. These settings are configured in <i>Interaction Administrator</i>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.UserDataSettings.#ctor(ININ.IceLib.People.PeopleManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.UserDataSettings"/> class for
            the current session user.
            </summary>
            <param name="peopleManager">A <see cref="T:ININ.IceLib.People.PeopleManager"/> instance.</param>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserDataSettings.SupervisedWorkgroups">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserDataAttributes.SupervisedWorkgroups"/> for the user.
            </summary>
            <value>The supervised workgroups.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserDataSettings.Workgroups">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserDataAttributes.Workgroups"/> the user is a member of.
            </summary>
            <value>The workgroups.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserDataSettings.PlayAcdAgentGreeting">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserDataAttributes.PlayAcdAgentGreeting"/> value.
            </summary>
            <value>
            	<c>true</c> if should play an ACD agent greeting; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="T:ININ.IceLib.People.UserRightsAttributes">
            <summary>
            Attribute strings for the <see cref="T:ININ.IceLib.People.UserRightsSettings"></see> watched class.
            </summary>
            <doccompleted/>
        </member>
        <member name="F:ININ.IceLib.People.UserRightsAttributes.CanDisconnectInteraction">
            <summary>
            Allows the user to disconnect an interaction.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserRightsAttributes.CanHoldInteraction">
            <summary>
            Allows the user to place an interaction on hold.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserRightsAttributes.CanCoach">
            <summary>
            Allows the user to coach another user.
            </summary>
            <remarks>
            This allows users to add themselves to another agent's call on any user 
            or station queue they have permission to monitor. It enables them to 
            provide advice to the agent without the customer knowing that anyone 
            is assisting on the call. 
            </remarks> 
        </member>
        <member name="F:ININ.IceLib.People.UserRightsAttributes.CanRecordInteraction">
            <summary>
            Allows the user to record an interaction.
            </summary>
            <remarks>
            The recording is saved as a .wav file. After the call is completed, 
            the .wav file is attached to an email that is sent to the user.
            </remarks>
        </member>
        <member name="F:ININ.IceLib.People.UserRightsAttributes.CanSendInteractionToVoicemail">
            <summary>
            Allows the user to send an interaction to their voice mail.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserRightsAttributes.CanTransferInteraction">
            <summary>
            Allows the user to transfer an interaction to another user.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserRightsAttributes.CanInvokeTracker">
            <summary>
            Allows the user to invoke tracker for an interaction.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserRightsAttributes.CanPauseInteraction">
            <summary>
            Allows the user to pause an interaction.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserRightsAttributes.CanGetAssistance">
            <summary>
            Allows users that are members of a workgroup to request assistance from a supervisor.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserRightsAttributes.CanPickupInteraction">
            <summary>
            Allows the user to answer an interaction or take an interaction off hold.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserRightsAttributes.CanHavePrivateInteractions">
            <summary>
            Allows the user to prevent other users from recording or listening
            to their conversation.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserRightsAttributes.CanMuteInteraction">
            <summary>
            Allows the user to mute an interaction.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserRightsAttributes.CanListenOnInteraction">
            <summary>
            Allows the user to listen to another interaction.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserRightsAttributes.CanJoinInteraction">
            <summary>
            Allows the user to join an interaction or conference between other agents.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserRightsAttributes.CanCustomizeClient">
            <summary>
            Allows the user to customize their client.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserRightsAttributes.PersistentConnection">
            <summary>
            Allows the user to start a remote client with the persistant option. 
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserRightsAttributes.ShowMonitorColumns">
            <summary>
            Allows the user to show monitor columns.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.UserRightsSettings">
            <summary>
            Represents the basic user rights settings for an IC user. User rights are set in
            <i>Interaction Administrator</i> at the Default User, User or Workgroup level.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.UserRightsSettings.#ctor(ININ.IceLib.People.PeopleManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.UserRightsSettings"/> class for
            the current session user.
            </summary>
            <param name="peopleManager">A <see cref="T:ININ.IceLib.People.PeopleManager"/> instance.</param>
        </member>
        <member name="P:ININ.IceLib.People.UserRightsSettings.CanDisconnectInteraction">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserRightsAttributes.CanDisconnectInteraction"/> value.
            </summary>
            <value>
            	<c>true</c> if this instance can disconnect an interaction; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserRightsSettings.CanHoldInteraction">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserRightsAttributes.CanHoldInteraction"/> value.
            </summary>
            <value>
            	<c>true</c> if this instance can hold an interaction; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserRightsSettings.CanCoach">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserRightsAttributes.CanCoach"/> value.
            </summary>
            <value><c>true</c> if this instance can coach; otherwise, <c>false</c>.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserRightsSettings.CanRecordInteraction">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserRightsAttributes.CanRecordInteraction"/> value.
            </summary>
            <value>
            	<c>true</c> if this instance can record an interaction; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserRightsSettings.CanSendInteractionToVoicemail">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserRightsAttributes.CanSendInteractionToVoicemail"/> value.
            </summary>
            <value>
            	<c>true</c> if this instance can send an interaction to voicemail; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserRightsSettings.CanTransferInteraction">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserRightsAttributes.CanTransferInteraction"/> value.
            </summary>
            <value>
            	<c>true</c> if this instance can transfer an interaction; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserRightsSettings.CanInvokeTracker">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserRightsAttributes.CanInvokeTracker"/> value.
            </summary>
            <value>
            	<c>true</c> if this instance can invoke tracker; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserRightsSettings.CanPauseInteraction">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserRightsAttributes.CanPauseInteraction"/> value.
            </summary>
            <value>
            	<c>true</c> if this instance can pause an interaction; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserRightsSettings.CanGetAssistance">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserRightsAttributes.CanGetAssistance"/> value.
            </summary>
            <value>
            	<c>true</c> if this instance can get assistance; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserRightsSettings.CanPickupInteraction">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserRightsAttributes.CanPickupInteraction"/> value.
            </summary>
            <value>
            	<c>true</c> if this instance can pickup an interaction; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserRightsSettings.CanHavePrivateInteractions">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserRightsAttributes.CanHavePrivateInteractions"/> value.
            </summary>
            <value>
            	<c>true</c> if this instance can have private interactions; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserRightsSettings.CanMuteInteraction">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserRightsAttributes.CanMuteInteraction"/> value.
            </summary>
            <value>
            	<c>true</c> if this instance can mute an interaction; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserRightsSettings.CanListenOnInteraction">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserRightsAttributes.CanListenOnInteraction"/> value.
            </summary>
            <value>
            	<c>true</c> if this instance can listen on an interaction; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserRightsSettings.CanJoinInteraction">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserRightsAttributes.CanJoinInteraction"/> value.
            </summary>
            <value><c>true</c> if can show join button; otherwise, <c>false</c>.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserRightsSettings.CanCustomizeClient">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserRightsAttributes.CanCustomizeClient"/> value.
            </summary>
            <value>
            	<c>true</c> if this instance can customize the client; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserRightsSettings.PersistentConnection">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserRightsAttributes.PersistentConnection"/> value. 
            </summary>
            <remarks>When a persistent voice connection is made with an IC Server, the audio path between 
            the station and the server <i>persists</i> (is not disconnected) until the station initiates the 
            disconnection. This allows the server to route calls to the station more quickly, by reusing the 
            existing audio path.
            </remarks>
            <value><c>true</c> if can have a persistent connection; otherwise, <c>false</c>.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserRightsSettings.ShowMonitorColumns">
            <summary>
            Gets the <see cref="F:ININ.IceLib.People.UserRightsAttributes.ShowMonitorColumns"/> value.
            </summary>
            <value><c>true</c> if can show monitor columns; otherwise, <c>false</c>.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserSettingsCache.RequestUserSettingsWatch(System.Boolean)">
            <exclude/><summary>
            Request to turn on or off the user settings watch.
            </summary>
            <param name="enableWatch">Set to <c>true</c> to turn enableWatch.</param>
            <returns><c>true</c> if message was sent and response received.</returns>
        </member>
        <member name="P:ININ.IceLib.People.UserSettingsCache.PeopleManager">
            <summary>Gets the PeopleManager associated with this cache.</summary>
        </member>
        <member name="T:ININ.IceLib.People.WorkgroupCache">
            <summary>
            Watched class to manage a set of workgroups.
            </summary>
        </member>
        <member name="M:ININ.IceLib.People.WorkgroupCache.RequestWorkgroupDetailsWatch(System.Boolean)">
            <exclude/><summary>
            Request to turn on or off the workgroup details watch.
            </summary>
            <param name="enableWatch">Set to <c>true</c> to turn enableWatch.</param>
            <returns><c>true</c> if message was sent and response received.</returns>
        </member>
        <member name="P:ININ.IceLib.People.WorkgroupCache.PeopleManager">
            <summary>Gets the <see cref="P:ININ.IceLib.People.WorkgroupCache.PeopleManager"/> associated with this cache.</summary>
        </member>
        <member name="P:ININ.IceLib.People.WorkgroupCache.Name">
            <summary>Gets the workgroup's name associated with this cache.</summary>
        </member>
        <member name="T:ININ.IceLib.People.WrapUpCode">
            <summary>
            Represents a wrap-up code definition. Wrap-up codes are provided for agents to submit the resolution of an
            ACD interaction.
            </summary>
            <remarks>Inteaction Client users can assign wrap-up codes to an interaction to describe it. For example, 
            a wrap-up code such as "Billing Problem", "New Order", or "Service Request" might be assigned to a 
            telephone call. IC provides several reports specific to wrap-up codes. Wrap-up codes are defined in 
            Interaction Administrator. Each code has a descriptive name, an internal-use ID, and customer-defined 
            digits that are unique among wrap-up codes.</remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.WrapUpCode.#ctor(System.String,System.String,System.String)">
            <summary>
            Construct the wrap-up code based on its name, digits, and description.
            </summary>
            <param name="id">Unique identifier for the wrap-up code.</param>
            <param name="digits">Wrap-up code digits.</param>
            <param name="displayName">Wrap-up code display name.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.People.WrapUpCode.ToString">
            <summary>
            Get a string showing the wrap-up code elements. 
            </summary>
            <returns>A string with the following format: {Id,Digits,DisplayName}.</returns>
        </member>
        <member name="P:ININ.IceLib.People.WrapUpCode.Id">
            <summary>
            Get the wrap-up code unique ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:ININ.IceLib.People.WrapUpCode.Digits">
            <summary>
            Get the wrap-up code digits.
            </summary>
            <value>The digits.</value>
        </member>
        <member name="P:ININ.IceLib.People.WrapUpCode.Description">
            <summary>
            Get the wrap-up code display name.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:ININ.IceLib.People.WorkgroupAttributes">
            <summary>
            Attribute strings for the <see cref="T:ININ.IceLib.People.WorkgroupDetails"/> watched class.
            </summary>
            <doccompleted/>
        </member>
        <member name="F:ININ.IceLib.People.WorkgroupAttributes.Extension">
            <summary>The workgroup's extension.</summary>
        </member>
        <member name="F:ININ.IceLib.People.WorkgroupAttributes.HasQueue">
            <summary>
            Indicates whether the workgroup is operating as a queue. See also <see cref="F:ININ.IceLib.People.WorkgroupAttributes.QueueType"/>.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.WorkgroupAttributes.HasMailbox">
            <summary>Indicates that the workgroup has a mailbox.</summary>
        </member>
        <member name="F:ININ.IceLib.People.WorkgroupAttributes.QueueType">
            <summary>
            The workgroup queue type. This can have the values: Custom, ACD, Group Ring, Sequential, or Round-robin.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.WorkgroupAttributes.HasActivation">
            <summary>Indicates that the workgroup has been activated by the user.
            This setting is only relevant if <see cref="F:ININ.IceLib.People.WorkgroupAttributes.HasQueue"/> is enabled.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.WorkgroupAttributes.IsActive">
            <summary>Indicates that the workgroup is ready to receive interactions.</summary>
        </member>
        <member name="F:ININ.IceLib.People.WorkgroupAttributes.IsWrapUpActive">
            <summary>Indicates that wrap-up codes are active for this workgroup.</summary>
        </member>
        <member name="F:ININ.IceLib.People.WorkgroupAttributes.Supervisors">
            <summary>List of available supervisors for this workgroup.</summary>
        </member>
        <member name="F:ININ.IceLib.People.WorkgroupAttributes.Members">
            <summary>List of members for this workgroup.</summary>
        </member>
        <member name="F:ININ.IceLib.People.WorkgroupAttributes.ActiveMembers">
            <summary>List of activated members for this workgroup.</summary>
        </member>
        <member name="F:ININ.IceLib.People.WorkgroupAttributes.WrapUpClientTimeout">
            <summary>Time in seconds to wait for a wrap-up code.</summary>
        </member>
        <member name="F:ININ.IceLib.People.WorkgroupAttributes.WrapUpCodes">
            <summary>
            A list of wrap-up codes available for this workgroup. See also <see cref="T:ININ.IceLib.People.WrapUpCode"/>.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.WorkgroupDetails">
            <summary>
            Represents the common details for an IC workgroup.
            </summary>
            <remarks>
            This class implements a watched attribute object to watch for changes of workgroup attributes.
            <para>To start a watch, call <see cref="M:ININ.IceLib.People.WorkgroupDetails.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.People.WorkgroupDetails.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> and pass 
            in an array of workgroup attribute strings. When the asynchronous start watch completes, the <c>completedCallback</c> 
            delegate is invoked.</para>
            <para>To stop a watch, call <see cref="M:ININ.IceLib.People.WorkgroupDetails.StopWatching"/> or <see cref="M:ININ.IceLib.People.WorkgroupDetails.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the 
            asynchonous stop watch operation completes, the <c>completedCallback</c> delegate is invoked.</para>
            <para>To change the list of attributes to watch, call <see cref="M:ININ.IceLib.People.WorkgroupDetails.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)"/> or 
            <see cref="M:ININ.IceLib.People.WorkgroupDetails.ChangeWatchedAttributesAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous change watch operation completes, the 
            <c>completedCallback</c> delegate is invoked.</para>
            <para>When workgroup details change, the <see cref="E:ININ.IceLib.People.WorkgroupDetails.WatchedAttributesChanged"/> event is raised, 
            providing information about the workgroup details attributes that have changed.</para>
            <para>Calling <see cref="M:ININ.IceLib.People.WorkgroupDetails.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.People.WorkgroupDetails.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch is already 
            started, or calling <see cref="M:ININ.IceLib.People.WorkgroupDetails.StopWatching"/>, <see cref="M:ININ.IceLib.People.WorkgroupDetails.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>, <see cref="M:ININ.IceLib.People.WorkgroupDetails.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)"/>,
            or <see cref="M:ININ.IceLib.People.WorkgroupDetails.ChangeWatchedAttributesAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch is not in progress raises the 
            <see cref="T:System.InvalidOperationException"/>.</para> 
            <para>Attempting to access a workgroup attribute that is not being watched raises the 
            <see cref="T:ININ.IceLib.NotCachedException"/>.</para>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.WorkgroupDetails.#ctor(ININ.IceLib.People.PeopleManager,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.WorkgroupDetails"/> class.
            </summary>
            <param name="peopleManager">A <see cref="P:ININ.IceLib.People.WorkgroupDetails.PeopleManager"/> instance.</param>
            <param name="name">The name of the workgroup.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.People.WorkgroupDetails.IsWatching">
            <overloads>
            Determines whether a watch is active.
            </overloads>
            
            <summary>
            Determines whether a watch is active.
            </summary>
            <returns>
            	<c>true</c> if a watch is active; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method determines whether a watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.People.WorkgroupDetails.IsWatching(System.String)">
            <summary>
            Determines whether a watch is active and if the specified value is being watched.
            </summary>
            <param name="attributeName">The workgroup attribute.</param>
            <returns>
            	<c>true</c> if a watch is active and the specified value is being watched; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>
            This method determines whether a watch is in place for this instance and whether the specified value is being watched.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.People.WorkgroupDetails.StartWatching(System.String[])">
            <summary>
            Starts watching an array of workgroup attributes.
            </summary>
            <param name="attributeNames">Array of workgroup attributes to watch.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">The object is already being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.WorkgroupDetails.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously starts watching an array of workgroup attributes.
            </summary>
            <param name="attributeNames">A list of workgroup attributes that the user is requesting to watch.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.People.WorkgroupDetails.StopWatching">
            <summary>
            Stops watching the workgroup attributes.
            </summary>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.WorkgroupDetails.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops watching a list of workgroup attributes.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.People.WorkgroupDetails.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)">
            <summary>
            Changes the list of workgroup attributes to watch.
            </summary>
            <param name="attributeNamesToAdd">The attribute names to add. (Can be <b>null</b>.)</param>
            <param name="attributeNamesToRemove">The attribute names to remove. (Can be <b>null</b>.)</param>
            <param name="replaceExisting">if set to <c>true</c>, replace the existing existing list.</param>
            <remarks>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.WorkgroupDetails.ChangeWatchedAttributesAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes the list of workgroup attributes to watch.
            </summary>
            <param name="attributeNamesToAdd">The attribute names to add. (Can be <b>null</b>.)</param>
            <param name="attributeNamesToRemove">The attribute names to remove. (Can be <b>null</b>.)</param>
            <param name="replaceExisting">if set to <c>true</c>, replace the existing existing list.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>
            <para>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</para>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            </remarks>
        </member>
        <member name="P:ININ.IceLib.People.WorkgroupDetails.Name">
            <summary>
            Gets the name of the Workgroup.
            </summary>
            <value>The name.</value>
        </member>
        <member name="E:ININ.IceLib.People.WorkgroupDetails.WatchedAttributesChanged">
            <summary>
            Occurs when one of the watched attribute values has been changed.
            </summary>
        </member>
        <member name="P:ININ.IceLib.People.WorkgroupDetails.Extension">
            <summary>
            Gets the extension for the Workgroup.
            </summary>
            <value>The extension.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.WorkgroupDetails.HasQueue">
            <summary>
            Gets whether the Workgroup has a Queue associated with it.
            </summary>
            <value><c>true</c> if this instance has a queue; otherwise, <c>false</c>.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.WorkgroupDetails.HasMailbox">
            <summary>
            Gets whether the Workgroup has a mailbox associated with it.
            </summary>
            <value>
            	<c>true</c> if this instance has a mailbox; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.WorkgroupDetails.QueueType">
            <summary>
            Gets the QueueType for the Workgroup.
            </summary>
            <value>The type of the queue.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.WorkgroupDetails.HasActivation">
            <summary>
            Gets whether the Workgroup has activation.
            </summary>
            <value>
            	<c>true</c> if this instance has activation; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.WorkgroupDetails.IsActive">
            <summary>
            Gets whether the Workgroup is active.
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.WorkgroupDetails.IsWrapUpActive">
            <summary>
            Gets whether the Workgroup has wrap up active.
            </summary>
            <value>
            	<c>true</c> if this instance has wrap up active; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.WorkgroupDetails.Supervisors">
            <summary>
            Gets the Workgroup's supervisors.
            </summary>
            <value>The supervisors.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.WorkgroupDetails.Members">
            <summary>
            Gets the Workgroup's members.
            </summary>
            <value>The members.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.WorkgroupDetails.ActiveMembers">
            <summary>
            Gets the Workgroup's active members.
            </summary>
            <value>The active members.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.WorkgroupDetails.WrapUpClientTimeout">
            <summary>
            Gets workgroup's wrap up client timeout value.
            </summary>
            <value>The wrap up client timeout.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.People.WorkgroupDetails.WrapUpCodes">
            <summary>
            Gets the workgroups's wrap-up codes.
            </summary>
            <value>The wrap up codes.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="T:ININ.IceLib.People.UserWorkgroupActivationCache">
            <summary>
            A simplified version of a cached object and its attributes.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.UserWorkgroupActivationProperty">
            <summary>
            Each value in this enumeration represents a a property in <see cref="T:ININ.IceLib.People.UserWorkgroupActivation"/>
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserWorkgroupActivationProperty.None">
            <summary>
            No Property is defined.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserWorkgroupActivationProperty.UserId">
            <summary>
            Represents the <see cref="P:ININ.IceLib.People.UserWorkgroupActivation.UserId"/> property.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserWorkgroupActivationProperty.Workgroup">
            <summary>
            Represents the <see cref="P:ININ.IceLib.People.UserWorkgroupActivation.Workgroup"/> property.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.UserWorkgroupActivationProperty.IsActive">
            <summary>
            Represents the <see cref="P:ININ.IceLib.People.UserWorkgroupActivation.IsActive"/> property.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.UserWorkgroupActivation">
            <summary>Represents the status of a user's activation in a workgroup. When a user is activated in a workgroup, 
            then the user is eligible to handle ACD interactions.</summary>
            <remarks>
            <para>This class contains the name of a workgroup and a boolean flag to indicate if the user is activated in that workgroup. Agents and supervisors
            can activate/deactivate an agent from an ACD workgroup.</para>
            <para>Object instances of this class are managed by the <see cref="T:ININ.IceLib.People.UserWorkgroupActivationList"/> 
            class. Each property is represented by an integer value in the <see cref="T:ININ.IceLib.People.UserWorkgroupActivationProperty"/> 
            enumeration.</para>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.UserWorkgroupActivation.GetUserWorkgroups(ININ.IceLib.People.PeopleManager)">
            <summary>
            Retrieves the list of workgroups to which a user is assigned.
            </summary>
            <param name="peopleManager">An instance of <see cref="T:ININ.IceLib.People.PeopleManager"/>.</param>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> containing the workgroups to which the current user is a assigned.</returns>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserWorkgroupActivation.GetUserWorkgroupActivations(ININ.IceLib.People.PeopleManager,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Given a list of workgroups to which the current user is assigned, this method returns an array of booleans indicating
            if the user is activated in the workgroup.
            </summary>
            <param name="peopleManager">The <see cref="T:ININ.IceLib.People.PeopleManager"/> instance.</param>
            <param name="workgroups">The <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of workgroups to which the user is assigned.</param>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of workgroup activation flags.</returns>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="P:ININ.IceLib.People.UserWorkgroupActivation.UserId">
            <summary>
            The user identifier.
            </summary>
            <value>The user ID.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserWorkgroupActivation.Workgroup">
            <summary>
            A workgroup to which this user is assigned.
            </summary>
            <value>The workgroup.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserWorkgroupActivation.IsActive">
            <summary>
            Retruns <c>true</c> if the user is activated in this workgroup.
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ININ.IceLib.People.UserWorkgroupActivationList">
            <summary>
            Class to implement a list of <see cref="T:ININ.IceLib.People.UserWorkgroupActivation"/> objects.
            </summary>
            <remarks>This class implements a list of user workgroup activations. It can start and stop watches 
            for these objects.
            <para>Users have the ability to activate and deactivate themselves in ACD workgroups. If a user is 
            activated in a workgroup to which they are assigned, they are available to handle ACD interactions.</para>
            <para>To begin a watch on a user's workgroup activation, call the <see cref="M:ININ.IceLib.People.UserWorkgroupActivationList.StartWatching(System.String[])"/> or 
            <see cref="M:ININ.IceLib.People.UserWorkgroupActivationList.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods, passing in a string array of workgroups for which you are 
            interested in watching this user's activation. The <c>completedCallback</c> delegate is invoked when 
            the asynchronous start watch operation has completed.</para>
            <para>To stop watching user workgroup activations, call the <see cref="M:ININ.IceLib.People.UserWorkgroupActivationList.StopWatching"/> or 
            <see cref="M:ININ.IceLib.People.UserWorkgroupActivationList.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods. The <c>completedCallback</c> delegate is invoked when the 
            asynchronous stop watch operation completes. You can get the list of all workgroups for which the user 
            is assigned from the helper method <see cref="M:ININ.IceLib.People.UserWorkgroupActivation.GetUserWorkgroups(ININ.IceLib.People.PeopleManager)"/>.</para>
            <para>For example: If a user is a member of both the Support and Custom Service workgroups and activates himself to begin
            handling interactions for the Support workgroup, the <see cref="E:ININ.IceLib.People.UserWorkgroupActivationList.WatchedObjectsChanged"/> event will be triggered if a watch 
            is in progress.</para>
            <para>To access the list of workgroup activations, call the <see cref="M:ININ.IceLib.People.UserWorkgroupActivationList.GetList"/> method. If a watch is 
            not in progress an <see cref="T:System.InvalidOperationException"/> is raised.</para>
            <para>Calling <see cref="M:ININ.IceLib.People.UserWorkgroupActivationList.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.People.UserWorkgroupActivationList.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods when a watch is 
            already in progress, or calling <see cref="M:ININ.IceLib.People.UserWorkgroupActivationList.StopWatching"/> or <see cref="M:ININ.IceLib.People.UserWorkgroupActivationList.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods when 
            a watch is not in progress raises the <see cref="T:System.InvalidOperationException"/>.<br/><br/></para>
            <note>The asynchronous methods are preferred since the start, change, and stop watch can be lengthy operations.</note>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.UserWorkgroupActivationList.StartWatching(System.String[])">
            <summary>
            Starts watching the User Workgroup Activation List.
            </summary>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">The object is already being watched.</exception>
            <param name="workgroupNames">A list of workgroups for which an agent's self activation is monitored.</param>
        </member>
        <member name="M:ININ.IceLib.People.UserWorkgroupActivationList.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously starts watching the User Workgroup Activation.
            </summary>
            <param name="workgroupNames">A list of workgroup names to monitor.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserWorkgroupActivationList.ChangeWatchedWorkgroups(System.String[],System.String[],System.Boolean)">
            <summary>
            Changes the workgroups being watched.
            </summary>
            <param name="workgroupNamesToAdd">The workgroup names to add. (Can be <b>null</b>.)</param>
            <param name="workgroupNamesToRemove">The workgroup names to remove. (Can be <b>null</b>.)</param>
            <param name="replaceExisting">if set to <c>true</c>, replace the existing list.</param>
            <remarks>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserWorkgroupActivationList.ChangeWatchedWorkgroupsAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes the workgroups being watched.
            </summary>
            <param name="workgroupNamesToAdd">The workgroup names to add. (Can be <b>null</b>.)</param>
            <param name="workgroupNamesToRemove">The workgroup names to remove. (Can be <b>null</b>.)</param>
            <param name="replaceExisting">if set to <c>true</c>, replace the existing existing list.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>
            <para>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</para>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserWorkgroupActivationList.StopWatching">
            <summary>
            Stops watching the user workgroup activation list.
            </summary>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserWorkgroupActivationList.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops watching the user workgroup activation list.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserWorkgroupActivationList.IsWatching">
            <overloads>
            Determines whether a watch is active.
            </overloads>
            
            <summary>
            Determines whether a watch is active.
            </summary>
            <returns>
            	<c>true</c> if a watch is active; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method determines whether a watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserWorkgroupActivationList.IsWatching(System.String)">
            <summary>
            Determines whether a watch is active and if the specified value is being watched.
            </summary>
            <param name="workgroupName">The workgroup.</param>
            <returns>
            	<c>true</c> if a watch is active and the specified value is being watched; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>
            This method determines whether a watch is in place for this instance and whether the specified value is being watched.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.People.UserWorkgroupActivationList.#ctor(ININ.IceLib.People.PeopleManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.UserWorkgroupActivationList"/> class.
            </summary>
            <param name="peopleManager">A <see cref="P:ININ.IceLib.People.UserWorkgroupActivationList.PeopleManager"/> instance.</param>
        </member>
        <member name="M:ININ.IceLib.People.UserWorkgroupActivationList.GetList">
            <summary>
            Get a list of user statuses being watched.
            </summary>
            <exception cref="T:ININ.IceLib.NotCachedException">If the user workgroup activation list is not cached.</exception>
            <exception cref="T:System.InvalidOperationException">If a watch is not in progress.</exception>
            <returns>A list of <see cref="T:ININ.IceLib.People.UserWorkgroupActivation"/>.</returns>
        </member>
        <member name="P:ININ.IceLib.People.UserWorkgroupActivationList.Item(System.String)">
            <summary>
            Get an individual user workgroup activation for a user.
            </summary>
            <param name="workgroup">The workgroup to get.</param>
            <value>The user workgroup activation.</value>
            <exception cref="T:System.InvalidOperationException">If a watch is not in progress.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">If the <see cref="T:ININ.IceLib.People.UserWorkgroupActivation"/> request by <b>workgroup</b> is not in the cache.</exception>
        </member>
        <member name="E:ININ.IceLib.People.UserWorkgroupActivationList.WatchedObjectsChanged">
            <summary>
            Occurs when one of the <see cref="T:ININ.IceLib.People.UserWorkgroupActivation"/> watched objects has changed.
            </summary>
            <remarks>
            Note that only changes to existing objects in the watch are monitored.
            There are no objects added to or removed from the <see cref="T:ININ.IceLib.People.UserWorkgroupActivationList"/> watched objects.
            <para>
            Each <see cref="P:ININ.IceLib.People.WatchedObjectsEventArgs`1.Changed"/> notification 
            for a <see cref="T:ININ.IceLib.People.UserWorkgroupActivation"/> object is described by the
            integer values defined in the <see cref="T:ININ.IceLib.People.UserWorkgroupActivationProperty"/> enumeration.
            </para>
            </remarks>
        </member>
        <member name="T:ININ.IceLib.People.UserWorkgroupActivationUpdate">
            <summary>
            This object is used to update a user's workgroup activation.
            </summary>
            <remarks>This class is used to modify a user's workgroup activation. To modify a user's workgroup activation,
            create an object of this class and set the <see cref="P:ININ.IceLib.People.UserWorkgroupActivationUpdate.Workgroup"/>, <see cref="P:ININ.IceLib.People.UserWorkgroupActivationUpdate.IsActive"/>, and <see cref="P:ININ.IceLib.People.UserWorkgroupActivationUpdate.UserId"/> properties and then call the <see cref="M:ININ.IceLib.People.UserWorkgroupActivationUpdate.UpdateRequest"/> or <see cref="M:ININ.IceLib.People.UserWorkgroupActivationUpdate.UpdateRequestAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods
            to change the workgroup activation for a particular workgroup. If the <see cref="M:ININ.IceLib.People.UserWorkgroupActivationUpdate.UpdateRequestAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> method is called the 
            <c>completedCallback</c> delegate will be invoked when the user's workgroup activation has been modified.</remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.UserWorkgroupActivationUpdate.#ctor(ININ.IceLib.People.PeopleManager,ININ.IceLib.People.UserWorkgroupActivation)">
            <summary>
            Constructs a <see cref="T:ININ.IceLib.People.UserWorkgroupActivationUpdate"/> object.
            </summary>
            <param name="peopleManager">A <see cref="T:ININ.IceLib.People.PeopleManager"/> instance.</param>
            <param name="userWorkgroupActivation">Initial parameters are copied from the
            <see cref="T:ININ.IceLib.People.UserWorkgroupActivation"/> instance.</param>
        </member>
        <member name="M:ININ.IceLib.People.UserWorkgroupActivationUpdate.UpdateRequest">
            <summary>
            Updates the User Workgroup Activation.
            </summary>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.People.UserWorkgroupActivationUpdate.UpdateRequestAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously updates the User Workgroup Activation.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="P:ININ.IceLib.People.UserWorkgroupActivationUpdate.Workgroup">
            <summary>
            The workgroup identifier.
            </summary>
            <value>The workgroup.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserWorkgroupActivationUpdate.IsActive">
            <summary>
            Gets or sets a value indicating whether the user is active in this workgroup.
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserWorkgroupActivationUpdate.UserId">
            <summary>
            The user's identifier.
            </summary>
            <value>The user ID.</value>
        </member>
        <member name="P:ININ.IceLib.People.UserWorkgroupActivationUpdate.PeopleManager">
            <summary>
            A reference to the <see cref="T:ININ.IceLib.People.PeopleManager"/> instance.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.UserWorkgroupActivationListCache">
            <summary>
            Watched class to manage a list of IC's user workgroup activations.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.NamespaceDoc">
             <summary>
             <para>The <b>ININ.IceLib.People</b> namespace contains classes for accessing 
             Interaction Center workgroups, status messages, users and users' statuses.</para>
             <para><b>Attribute Watches.</b> Some object classes get specific settings for the session user. 
             These objects are <i>watched</i>, meaning that any time an attribute is changed, the internal
             cache of that object is kept up to date. Whenever that attribute's property is referenced
             the current value will be returned. An event notification is available when any of the attributes 
             changes in value. Examples of watched attribute classes are:</para>
             <para><list type="bullet">
             <item><see cref="T:ININ.IceLib.People.UserRightsSettings"/></item>
             <item><see cref="T:ININ.IceLib.People.UserAccessListsSettings"/></item>
             <item><see cref="T:ININ.IceLib.People.UserDataSettings"/></item>
             <item><see cref="T:ININ.IceLib.People.UserSettings"/></item>
             <item><see cref="T:ININ.IceLib.People.WorkgroupDetails"/></item>
             </list></para>
             <example>The following example illustrates an attribute watch to watch attributes for user 
             workgroup details.
             <para>
             <code escaped="false" lang="C#">
             <span style="color:blue">public class</span> WorkgroupDetailsWatcher
             {
                  PeopleManager _PeopleManager;
                  WorkgroupDetails _WorkgroupDetails;
                  <span style="color:blue">string</span> _WorkgroupName = <span style="color:red">"Marketing"</span>;
                  //We are interested in watching the Members and Supervisors attributes of the Workgroup Details.
                  <span style="color:blue">string</span>[] _WatchedAttributes = new <span style="color:blue">string</span>[] { WorkgroupAttributes.Members, WorkgroupAttributes.Supervisors };
             
                  <span style="color:blue">public</span> WorkgroupDetailsWatcher(PeopleManager peopleManager)
                  {
                      _PeopleManager = peopleManager;
                  }
                   <span style="color:blue">private void</span> WorkgroupDetailsChanged(<span style="color:blue">object</span> sender, ININ.IceLib.People.WatchedAttributesEventArgs e)
                  {
                      DisplayAttributes();
                  }
                  <span style="color:blue">private void</span> DisplayAttributes()
                  {
                      ReadOnlyCollection&lt;string&gt; members = _WorkgroupDetails.Members;
                      StringBuilder sb = new StringBuilder();
             
                      sb.Append(<span style="color:red">"The members of "</span>).Append(_WorkgroupName).Append(<span style="color:red">" are "</span>);
             
                      <span style="color:blue">foreach</span> (string member <span style="color:blue">in</span> members)
                      {
                         sb.Append(member).Append(<span style="color:red">"\n"</span>);  
                      }
             
                      MessageBox.Show(sb.ToString());
                  }
                  <span style="color:blue">public override void</span> StartWatch()
                  {
                      if( _WorkgroupDetails == <span style="color:blue">null</span> )
                      {
                          _WorkgroupDetails = new WorkgroupDetails(_PeopleManager, _WorkgroupName);
                          _WorkgroupDetails.WatchedAttributesChanged += <span style="color:blue">new</span> EventHandler&lt;WatchedAttributesEventArgs&gt;(WorkgroupDetailsChanged);
                          _WorkgroupDetails.StartWatchingCompleted += <span style="color:blue">new</span> AsyncCompletedEventHandler(_WorkgroupDetails_StartWatchingCompleted);
                          _WorkgroupDetails.StopWatchingCompleted += <span style="color:blue">new</span> AsyncCompletedEventHandler(_WorkgroupDetails_StopWatchingCompleted);
                      
                      }
                      _WorkgroupDetails.StartWatchingAsync(_WatchedAttributes, <span style="color:blue">null</span>);
                  }
                  <span style="color:blue">void</span> _WorkgroupDetails_StopWatchingCompleted(<span style="color:blue">object</span> sender, AsyncCompletedEventArgs e)
                  {
                      MessageBox.Show(<span style="color:red">"WorkgroupDetails.StopWatchingAsync succeeded!"</span>);
                  }
                   
                  <span style="color:blue">void</span> _WorkgroupDetails_StartWatchingCompleted(<span style="color:blue">object</span> sender, AsyncCompletedEventArgs e)
                  {
                      DisplayAttributes();  
                  }
                  <span style="color:blue">public override void</span> StopWatch()
                  {
                      if( _WorkgroupDetails == <span style="color:blue">null</span> )
                      {
                          MessageBox.Show(<span style="color:red">"A start watch has not been called"</span>);
                          <span style="color:blue">return</span>;
                      }
                      _WorkgroupDetails.StopWatchingAsync(<span style="color:blue">null</span>);
                  }
              }
             </code>
             </para>
             </example>
             <para>
             <b>Object Watches.</b> Some of these classes represent object watches. They are used to 
             maintain a list of objects and watch for changes to those objects. The internal cache of these
             objects is kept up to data so anytime an object's property is referenced the current value
             will be returned. An event notification is available when a set of watched objects changes.
             Examples of watched object classes are:
             <see cref="T:ININ.IceLib.People.StatusMessageList"/> watching <see cref="T:ININ.IceLib.People.StatusMessageDetails"/> objects,
             <see cref="T:ININ.IceLib.People.UserStatusList"/> watching <see cref="T:ININ.IceLib.People.UserStatus"/> objects,
             <see cref="T:ININ.IceLib.People.UserWorkgroupActivationList"/> watching <see cref="T:ININ.IceLib.People.UserWorkgroupActivation"/> objects,
             and <see cref="T:ININ.IceLib.People.CustomButtonList"/> watching <see cref="T:ININ.IceLib.People.CustomButton"/> objects.
             </para>
             <example>The following example illustrates an object watch on the list of custom buttons defined for the user in <b>Interaction Administrator</b>.
             When the list changes, this code is notified of the change.
             <para>
             <code escaped="false" lang="C#">
             
                <span style="color:blue">public class</span> CustomButtonListWatcher
                {
                   <span style="color:blue">private</span> CustomButtonList _CustomButtonList;
                   <span style="color:blue">private</span> PeopleManager _PeopleManager = PeopleManager.GetInstance(_Session);
             
                   <span style="color:blue">public void</span> StartWatch()
                   {
                     <span style="color:green">// Create the call back and send the asynchronous query</span>
                     if( _CustomButtonList == <span style="color:blue">null</span> )
                     {
                          _CustomButtonList = <span style="color:blue">new</span> CustomButtonList(_PeopleManager);
            
                          _CustomButtonList.WatchedObjectsChanged += <span style="color:blue">new</span> EventHandler&lt;WatchedObjectsEventArgs&gt;(CustomButtonListChanged);
                          _CustomButtonList.StartWatchingCompleted += <span style="color:blue">new</span> AsyncCompletedEventHandler(_CustomButtonList_StartWatchingCompleted);
                          _CustomButtonList.StopWatchingCompleted += <span style="color:blue">new</span> AsyncCompletedEventHandler(_CustomButtonList_StopWatchingCompleted);
                     }
                     _CustomButtonList.StartWatchingAsync(<span style="color:blue">null</span>);
                }         
             
                 <span style="color:blue">void</span> _CustomButtonList_StartWatchingCompleted(<span style="color:blue">object</span> sender, AsyncCompletedEventArgs e)
                 {
                     ReadOnlyCollection&lt;CustomButton&gt; buttonList = _CustomButtonList.GetList();
            
                     <span style="color:blue">foreach</span>(CustomButton button <span style="color:blue">in</span> buttonList)
                     {
                        <span style="color:green">//Display the text of the button</span>
                        MessageBox.Show(button.Text);
                     }
                 }
            
                <span style="color:blue">void</span> _CustomButtonList_StopWatchingCompleted(<span style="color:blue">object</span> sender, AsyncCompletedEventArgs e)
                {
                    MessageBox.Show(<span style="color:red">"No longer watching the Custom Button List"</span>);
                }
                <span style="color:blue">private void</span> CustomButtonListChanged(<span style="color:blue">object</span> sender, WatchedObjectsEventArgs e)
                {
                    <span style="color:green">//The custom button list has changed, display the list again showing the updates </span>
                    ReadOnlyCollection&lt;CustomButton&gt; buttonList = _CustomButtonList.GetList();
            
                    <span style="color:blue">foreach</span>(CustomButton button <span style="color:blue">in</span> buttonList)
                    {
                        MessageBox.Show(button.Text);
                    }
                }
              }
             </code>
             </para>
             </example>
             </summary>
             <doccompleted/>
        </member>
        <member name="T:ININ.IceLib.People.ResponseManagement.NamespaceDoc">
            <summary>
            <para>The <b>ININ.IceLib.People.ResponseManagement</b> namespace contains classes for retrieving 
            Interaction Center Response Documents and for editing user specific Response Documents. These are typically 
            a collection of frequently asked questions. The agents can use the standard answers defined in these 
            Response Documents when he or she is participating in a chat session.</para>
            <para><i>Response Management</i> is the general term for features that allow a user to send 
            pre-defined responses, such as textual messages, URLs, or files to other persons participating in a 
            <i>Chat</i> interaction. Messages, URLs, or files can be sent from Interaction 
            Client, and using this API, from your custom applications.<br/><br/></para>
            <note>To use Response Management, you must have Web Services installed and configured on your Web server. 
            For details, see <i>Installing and Using IC's Web Services</i> in the <i>IC Documentation Library</i> on the 
            IC Server.  The library of <i>response documents</i> is stored on the IC server, and may be administered 
            using the <i>Response Management</i> container.</note>
            <para>Response Management works as follows:</para>
            <para>A web visitor requests an interactive Chat session.</para>
            <para>An agent is alerted by the Interaction Client (or a custom IceLib application). The agent "picks up" 
            the interaction request.</para>
            <para><list type="bullet">
            <item>For a <i>Chat</i>, Interaction Client pops a dialog on the agent's workstation that allows the agent to 
            begin an interactive typing session with the customer. The Responses tab of the agent's Chat dialog can 
            contain the names of preset standard text messages, URLs which the agent can push the visitor's browser, 
            and text file names. The agent can drag any combination of these responses into the Response field. When 
            a URL is sent, the remote chat participant’s web browser opens to that address.<br/><br/></item>
            </list></para>
            <para>Some Interaction Center products allow users to add personal responses, such as a personal greeting 
            or a frequently sent file or URL, to the Response Management library. These personal responses are listed on 
            the Responses tab under the [User Name].xml directory, and are not available to other Interaction Client 
            users.<br/><br/></para>
            <para><b>Response Management Objects</b></para>
            <para>A <see cref="T:ININ.IceLib.People.ResponseManagement.ResponseItem">ResponseItem</see> represents 
            Interaction Messages, Interaction Urls and Interaction Files:</para>
            <para><list type="bullet">
            <item>An <i>Interaction Message</i> is a note, URL, or file that an agent can send to a web visitor during 
            an interactive session. Interaction Message objects typically display short messages. For example, an 
            Interaction Message titled 'Standard Response Times' could contain 'Standard response times for a support 
            request are .....'.<br/><br/></item>
            <item>An <i>Interaction Url</i> stores frequently used Urls. For example, an Interaction Url titled 'Support web site' 
            could be defined as 'http://www.inin.com/support'.<br/><br/></item>
            <item>An <i>Interaction File</i> points to a file path. For example, an Interaction File titled 'Icelib Documentation' 
            could point to 'C:\Program Files\Interactive Intelligence\Icelib\Documentation\Icelib.chm'.</item>
            </list></para>
            <para><see cref="T:ININ.IceLib.People.ResponseManagement.ResponseItemType">ResponseItemType</see> indicates 
            if a ResponseItem is a Message or a Url or a File or a document.</para>
            <para><see cref="T:ININ.IceLib.People.ResponseManagement.ResponseDocument"/> is a collection of Interaction 
            Messages, Interaction Urls and Interaction Files. A ResponseDocument may contain <see cref="N:ININ.IceLib.People.ResponseManagement">
            nodes</see> that in turn contain a collection of Interaction Messages, Interaction Urls and Interaction Files.
            A response node can contain child nodes.</para>
            <para><see cref="T:ININ.IceLib.People.ResponseManagement.ResponseNode"/> is a collection of Interaction Messages, 
            Interaction Urls and Interaction Files. A ResponseNode may contain more ResponseNodes and also ResponseItems.</para>
            <para><see cref="T:ININ.IceLib.People.ResponseManagement.ResponseManager"/> has the capability to retrive Response 
            Documents, Interaction Messages, Interaction Urls and Interaction Files. In addition, ResponseManager can also
            receive any updates at the server.</para>
            <para><see cref="T:ININ.IceLib.People.ResponseManagement.EditableResponseDocument"/> is a Response Document that
            can be edited by the application. By default, all documents are read-only. User can add response nodes and 
            response items to the editable document. The editable can be obtained from the ResponseManager's UserDocument 
            property.</para>
            <para><see cref="T:ININ.IceLib.People.ResponseManagement.EditableResponseItem"/> is a Response Item that can be 
            edited by the application. By default, the ResponseItems are read-only. EditableResponseItems can be obtained 
            from either EditableResponseNode or from EditableResponseDocument.</para>
            <para><see cref="T:ININ.IceLib.People.ResponseManagement.EditableResponseNode"/> is a Response Node that can be 
            edited by the application. By default, the ResponseNodes are read-only. EditableResponseNodes can be obtained 
            from either EditableResponseNode or from EditableResponseDocument.</para>
            <para><see cref="T:ININ.IceLib.People.ResponseManagement.ResponseChangedEventArgs"/> indicates that there has 
            been a change in Response documents at the server. Set a event handler for 
            <see cref="E:ININ.IceLib.People.ResponseManagement.ResponseManager.ResponseChanged"/> to receive updates.</para>
            <example>
            This example shows how the classes ResponseManager and ResponseManager can be used to get Response Documents, 
            Interaction Messages, Interaction Urls and Interaction Files.
            <code escaped="false" lang="C#">
            public class MyResponseManagementClass
            {
                private Session _Session;
                private PeopleManager _PeopleManager;
                private ResponseManager _ResponseManager;
            
                private void MyClient_StartWatchingCompleted(object sender, AsyncCompletedEventArgs e)
                {
                    if ( e.Error != null )
                    {
                        // handle the error
                        return;
                    }
            
                    // this means that our request 'StartWatching' to the server was successful.
                    // TODO: Add your code here.
                }
            
                private void InitiateResponseManagement()
                {
                    if (_PeopleManager == null)
                        _PeopleManager = PeopleManager.GetInstance(_Session);
                    if (_ResponseManager == null)
                        _ResponseManager = new ResponseManager(_PeopleManager);
            
                    // The following statements will make sure that the data obtained from the server is always upto date.
                    _ResponseManager.StartWatchingCompleted += new AsyncCompletedEventHandler(MyClient_StartWatchingCompleted);
                    object userStateObject1 = new object();
                    _ResponseManager.StartWatchingAsync(userStateObject1);
            
                    // Handle updates
                    _ResponseManager.ResponseAdded += new EventHandler&lt;ResponseChangedEventArgs&gt;(MyClient_HandleResponsesAdded);
                    _ResponseManager.ResponseChanged += new EventHandler&lt;ResponseChangedEventArgs&gt;(MyClient_HandleResponsesChanged);
                    _ResponseManager.ResponseDeleted += new EventHandler&lt;ResponseChangedEventArgs&gt;(MyClient_HandleResponsesDeleted);
            
                    // The following statements will get the response management data from the server.
                    _ResponseManager.GetAvailableResponsesCompleted += new AsyncCompletedEventHandler(MyClient_GetAvailableResponsesCompleted);
                    object userStateObject2 = new object();
                    _ResponseManager.GetAvailableResponsesAsync(userStateObject2);
                }
            
                private void LoadResponseManagementTreeView()
                {
                    EditableResponseDocument userDocument = _ResponseManager.UserDocument;
                    ReadOnlyCollection&lt;ResponseDocument&gt; serverDocuments = _ResponseManager.ServerDocuments;
                    ReadOnlyCollection&lt;ResponseItem&gt; interactionMessages = _ResponseManager.InteractionMessages;
                    ReadOnlyCollection&lt;ResponseItem&gt; interactionUrls = _ResponseManager.InteractionUrls;
                    ReadOnlyCollection&lt;ResponseItem&gt; interactionFiles = _ResponseManager.InteractionFiles;
                    // ......
                    // ......
                }
            
                private void MyClient_GetAvailableResponsesCompleted(object sender, AsyncCompletedEventArgs e)
                {
                    if (e.Error != null)
                    {
                        // handle the error
                        return;
                    }
            
                    LoadResponseManagementTreeView();
                }
            
                private void MyClient_HandleResponsesAdded(object sender, ResponseChangedEventArgs e)
                {
                    switch(e.ChangedResponseType)
                    {
                        case ChangedResponseType.File:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.Message:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.Url:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.ServerDocument:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.UserDocument:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        default:
                            break;
                    }
                }
            
                private void MyClient_HandleResponsesAdded(object sender, ResponseChangedEventArgs e)
                {
                    switch(e.ChangedResponseType)
                    {
                        case ChangedResponseType.File:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.Message:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.Url:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.ServerDocument:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.UserDocument:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        default:
                            break;
                    }
                }
            
                private void MyClient_HandleResponsesDeleted(object sender, ResponseChangedEventArgs e)
                {
                    switch(e.ChangedResponseType)
                    {
                        case ChangedResponseType.File:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.Message:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.Url:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.ServerDocument:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.UserDocument:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        default:
                            break;
                    }
                }
            
                public AddResponseItem(string name, string text)
                {
                    EditableResponseDocument userDoc = _ResponseManager.UserDocument;
                    userDoc.AddResponseItem(new EditableResponseItem(ResponseItemType.Message, name, text));
                }
            
                public UpdateResponseItem(EditableResponseNode parent, ResponseItem item, string name, string text)
                {
                    EditableResponseItem editableItem = parent.GetEditableResponseItem(item);
                    editableItem.Name = name;
                    editableItem.Value = text;
                }
            
                public SaveDocument()
                {
                    _ResponseManager.SaveUserDocumentAsync();
                }
            }
            </code>
            </example>
            </summary>
            <doccompleted/>
        </member>
        <member name="T:ININ.IceLib.People.ResponseManagement.ResponseItemType">
            <summary>
            Represents the type of Response.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.ResponseManagement.ResponseItemType.None">
            <summary>
            None specified.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.ResponseManagement.ResponseItemType.Message">
            <summary>
            A note response.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.ResponseManagement.ResponseItemType.Url">
            <summary>
            A url response.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.ResponseManagement.ResponseItemType.File">
            <summary>
            A file response.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.ResponseManagement.ResponseItem">
            <summary>
            Represents a read-only ResponseItem object. Each ResponseItem has a unique identifier, name, type, and value.
            </summary>
            <remarks>
            <para>A <b>ResponseItem</b> represents Interaction Messages, Interaction Urls and Interaction Files:</para>
            <para><list type="bullet">
            <item>An <i>Interaction Message</i> is a note, URL, or file that an agent can send to a web visitor during 
            an interactive session. Interaction Message objects typically display short messages. For example, an 
            Interaction Message titled 'Standard Response Times' could contain 'Standard response times for a support 
            request are ...'.<br/><br/></item>
            <item>An <i>Interaction Url</i> stores frequently used Urls. For example, an Interaction Url titled 
            'Support web site' could be defined as 'http://www.inin.com/support'.<br/><br/></item>
            <item>An <i>Interaction File</i> points to a file path. For example, an Interaction File titled 
            'Icelib Documentation' could point to 'C:\Program Files\Interactive Intelligence\Icelib\Documentation\Icelib.chm'.</item>
            </list></para>
            </remarks>
            <doccompleted/>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseItem.ResponseItemType">
            <summary>
            Gets the type of this Response Item.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseItem.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseItem.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseItem.Id">
            <summary>
            Gets the unique identifier of this Response Item. This typically only useful if an application is persisting information about Response Items between sessions.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="T:ININ.IceLib.People.ResponseManagement.EditableResponseItem">
            <summary>
            Represents an editable ResponseItem. Please refer to <see cref="T:ININ.IceLib.People.ResponseManagement.ResponseItem"/> for more information.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.EditableResponseItem.#ctor(ININ.IceLib.People.ResponseManagement.ResponseItemType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.ResponseManagement.EditableResponseItem"/> class.
            </summary>
            <param name="type">The type enumeration indicates whether this item is a simple note message, URL, or file response.</param>
            <param name="name">Returns or assigns a name to this ResponseItem.</param>
            <param name="itemValue">The value (File Name / Text / Url).</param>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.EditableResponseItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.EditableResponseItem.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:ININ.IceLib.People.ResponseManagement.ResponseNode">
            <summary>
            Represents a read-only Response Node.
            </summary>
            <remarks>
            <para>ResponseNode contains a collection of Interaction Messages, Interaction URLs and Interaction Files. A ResponseNode may contain more ResponseNodes and also ResponseItems.</para>
            </remarks>
            <doccompleted/>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseNode.Name">
            <summary>
            Gets the name of this ResponseNode.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseNode.Id">
            <summary>
            Gets the unique identifier. This typically only useful if an application is persisting information about Response Nodes between sessions.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseNode.ResponseNodes">
            <summary>
            Gets the read-only response nodes.
            </summary>
            <value>The nodes collection.</value>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseNode.ResponseItems">
            <summary>
            Gets the read-only response items.
            </summary>
            <value>The collection of ResponseItems.</value>
        </member>
        <member name="T:ININ.IceLib.People.ResponseManagement.EditableResponseNode">
            <summary>
            Represents an editable Node in the Response Document. Please refer to <see cref="T:ININ.IceLib.People.ResponseManagement.ResponseNode"/> for more information.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.EditableResponseNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.ResponseManagement.EditableResponseNode"/> class.  This object is a collection 
            of Interaction Messages, Interaction Urls and Interaction Files. A ResponseNode may contain more ResponseNodes 
            and also ResponseItems.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.EditableResponseNode.AddResponseNode(ININ.IceLib.People.ResponseManagement.EditableResponseNode)">
            <summary>
            Adds the Response Node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.EditableResponseNode.RemoveResponseNode(ININ.IceLib.People.ResponseManagement.ResponseNode)">
            <summary>
            Removes the Response Node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.EditableResponseNode.GetEditableResponseNode(ININ.IceLib.People.ResponseManagement.ResponseNode)">
            <summary>
            Gets the editable Response Node.
            </summary>
            <param name="node">The node.</param>
            <returns>The editable response node.</returns>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.EditableResponseNode.AddResponseItem(ININ.IceLib.People.ResponseManagement.EditableResponseItem)">
            <summary>
            Adds the Response Item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.EditableResponseNode.RemoveResponseItem(ININ.IceLib.People.ResponseManagement.ResponseItem)">
            <summary>
            Removes the Response Item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.EditableResponseNode.GetEditableResponseItem(ININ.IceLib.People.ResponseManagement.ResponseItem)">
            <summary>
            Gets the editable Response Item.
            </summary>
            <param name="item">The item.</param>
            <returns>The editable response item.</returns>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.EditableResponseNode.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:ININ.IceLib.People.ResponseManagement.ResponseDocument">
            <summary>
            Represents a read-only Response Document.
            </summary>
            <remarks>
            <para>ResponseDocument is a collection of Interaction Messages, Interaction Urls and Interaction Files. 
            A ResponseDocument may contain <see cref="N:ININ.IceLib.People.ResponseManagement">nodes</see> that in 
            turn contains a collection of Interaction Messages, Interaction URLs and Interaction Files. A response 
            node in turn can contain child nodes.</para>
            </remarks>
            <doccompleted/>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseDocument.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:ININ.IceLib.People.ResponseManagement.EditableResponseDocument">
            <summary>
            Represents an editable Response Document.  Please refer to <see cref="T:ININ.IceLib.People.ResponseManagement.ResponseDocument"/> for more information.
            </summary>
            <remarks>A Response Document is a collection of Interaction Messages, Interaction URLs and Interaction Files. 
            A ResponseDocument may contain nodes that in turn contain a collection of Interaction Messages, 
            Interaction Urls and Interaction Files. A response node can contain child nodes.</remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.EditableResponseDocument.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.ResponseManagement.EditableResponseDocument"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="description">The description.</param>
            <param name="server">The server.</param>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.EditableResponseDocument.AddResponseNode(ININ.IceLib.People.ResponseManagement.EditableResponseNode)">
            <summary>
            Adds the Response Node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.EditableResponseDocument.RemoveResponseNode(ININ.IceLib.People.ResponseManagement.ResponseNode)">
            <summary>
            Removes the Response Node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.EditableResponseDocument.GetEditableResponseNode(ININ.IceLib.People.ResponseManagement.ResponseNode)">
            <summary>
            Gets the editable Response Node.
            </summary>
            <param name="node">The node.</param>
            <returns>Editable Response Node.</returns>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.EditableResponseDocument.AddResponseItem(ININ.IceLib.People.ResponseManagement.EditableResponseItem)">
            <summary>
            Adds the Response Item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.EditableResponseDocument.RemoveResponseItem(ININ.IceLib.People.ResponseManagement.ResponseItem)">
            <summary>
            Removes the Response Item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.EditableResponseDocument.GetEditableResponseItem(ININ.IceLib.People.ResponseManagement.ResponseItem)">
            <summary>
            Gets the editable Response Item.
            </summary>
            <param name="item">The item.</param>
            <returns>Editable Response Item.</returns>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.EditableResponseDocument.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.EditableResponseDocument.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:ININ.IceLib.People.ResponseManagement.ChangedResponseType">
            <summary>
            Represents the type of Response that has changed.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.ResponseManagement.ChangedResponseType.None">
            <summary>
            No item type specified.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.ResponseManagement.ChangedResponseType.ResponseItem">
            <summary>
            Represents either a interaction message or a url or a file
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.ResponseManagement.ChangedResponseType.ServerDocument">
            <summary>
            A server Document item.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.ResponseManagement.ChangedResponseType.UserDocument">
            <summary>
            A user Document item.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.ResponseManagement.ResponseChangedEventArgs">
            <summary>
            Provides data for the event <see cref="E:ININ.IceLib.People.ResponseManagement.ResponseManager.ResponseChanged"/>.
            </summary>
            <remarks>
            <para>When this method is called, it indicates that something has changed on the server that has relevance to 
            the logged-in user. The change could be any of Interaction Message, Interaction Url, Interaction File, 
            a Server document, or a User Document.  The example code below illustrates the details about this event args.</para>
            </remarks>
            <code escaped="false" lang="C#">
                responseManager.ResponseAdded += new EventHandler&lt;ResponseChangedEventArgs&gt;(MyClient_HandleResponsesAdded);
                responseManager.ResponseChanged += new EventHandler&lt;ResponseChangedEventArgs&gt;(MyClient_HandleResponsesChanged);
                responseManager.ResponseDeleted += new EventHandler&lt;ResponseChangedEventArgs&gt;(MyClient_HandleResponsesDeleted);
            
                private void MyClient_HandleResponsesAdded(object sender, ResponseChangedEventArgs e)
                {
                    switch(e.ChangedResponseType)
                    {
                        case ChangedResponseType.ResponseItem:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.ServerDocument:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.UserDocument:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        default:
                            break;
                    }
                }
            
                private void MyClient_HandleResponsesAdded(object sender, ResponseChangedEventArgs e)
                {
                    switch(e.ChangedResponseType)
                    {
                        case ChangedResponseType.File:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.Message:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.Url:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.ServerDocument:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.UserDocument:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        default:
                            break;
                    }
                }
            
                private void MyClient_HandleResponsesDeleted(object sender, ResponseChangedEventArgs e)
                {
                    switch(e.ChangedResponseType)
                    {
                        case ChangedResponseType.File:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.Message:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.Url:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.ServerDocument:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        case ChangedResponseType.UserDocument:
                        {
                            // TODO: Add your code here
                            break;
                        }
                        default:
                            break;
                    }
            </code>
            <doccompleted/>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseChangedEventArgs.ChangedResponseType">
            <summary>
            Gets the type of the changed response.
            </summary>
            <value>The type of the changed response.</value>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseChangedEventArgs.ResponseItem">
            <summary>
            Gets the interaction message / interaction url / interaction file that was changed.
            </summary>
            <value>The interaction message / interaction url / interaction file.</value>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseChangedEventArgs.ServerDocument">
            <summary>
            Gets the server document that was changed.
            </summary>
            <value>The server document.</value>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseChangedEventArgs.UserDocument">
            <summary>
            Gets the server document that was changed.
            </summary>
            <value>The server document.</value>
        </member>
        <member name="T:ININ.IceLib.People.ResponseManagement.ResponseManager">
            <summary>
            The ResponseManager class has the capability to retrieve Response Documents, Interaction Messages, 
            Interaction Urls and Interaction Files. It can also watch for changes to response management data, 
            and receive any updates at the server.
            </summary>
            <remarks>
            Use this class to get response management documents, interaction messages, interaction urls and 
            interaction files.
            </remarks>
            <example>
            This example shows how the classes ResponseManager and PeopleManager can be used to get Response Documents, 
            Interaction Messages, Interaction Urls and Interaction Files.
            <code>
            public class MyResponseManagementClass
            {
                private Session _Session;
                private PeopleManager _PeopleManager;
                private ResponseManager _ResponseManager;
            
                private void MyClient_StartWatchingCompleted(object sender, AsyncCompletedEventArgs e)
                {
                    if ( e.Error != null )
                    {
                        // handle the error
                        return;
                    }
            
                    // this means that our request 'StartWatching' to the server was successful.
                    // TODO: Add your code here.
                }
            
                private void InitiateResponseManagement()
                {
                    if (_PeopleManager == null)
                        _PeopleManager = PeopleManager.GetInstance(_Session);
                    if (_ResponseManager == null)
                        _ResponseManager = new ResponseManager(_PeopleManager);
            
                    // The following statements will make sure that the data obtained from the server is always upto date.
                    _ResponseManager.StartWatchingCompleted += new AsyncCompletedEventHandler(MyClient_StartWatchingCompleted);
                    object userStateObject1 = new object();
                    _ResponseManager.StartWatchingAsync(userStateObject1);
            
                    // The following statements will get the response management data from the server.
                    _ResponseManager.GetAvailableResponsesCompleted += new AsyncCompletedEventHandler(MyClient_GetAvailableResponsesCompleted);
                    object userStateObject2 = new object();
                    _ResponseManager.GetAvailableResponsesAsync(userStateObject2);
                }
            
                private void LoadResponseManagementTreeView()
                {
                    EditableResponseDocument userDocument = _ResponseManager.UserDocument;
                    ReadOnlyCollection&lt;ResponseDocument&gt; serverDocuments = _ResponseManager.ServerDocuments;
                    ReadOnlyCollection&lt;ResponseItem&gt; interactionMessages = _ResponseManager.InteractionMessages;
                    ReadOnlyCollection&lt;ResponseItem&gt; interactionUrls = _ResponseManager.InteractionUrls;
                    ReadOnlyCollection&lt;ResponseItem&gt; interactionFiles = _ResponseManager.InteractionFiles;
                    // ......
                    // ......
                }
            
                private void MyClient_GetAvailableResponsesCompleted(object sender, AsyncCompletedEventArgs e)
                {
                    if (e.Error != null)
                    {
                        // handle the error
                        return;
                    }
            
                    LoadResponseManagementTreeView();
                }
            
                // TODO: Add your methods here
            }
            </code>
            </example>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.ResponseManager.#ctor(ININ.IceLib.People.PeopleManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.ResponseManagement.ResponseManager"/> class.
            </summary>
            <param name="peopleManager">The people manager.</param>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.ResponseManager.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.ResponseManager.GetAvailableResponses">
            <summary>
            Gets the available responses.
            </summary>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.ResponseManager.GetAvailableResponsesAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Gets the available responses asynchronously.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">State of the user.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.ResponseManager.SaveUserDocument">
            <summary>
            Saves the user document.
            </summary>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.ResponseManager.SaveUserDocumentAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Saves the user document asynchronously.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">State of the user.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.ResponseManager.IsWatching">
            <summary>
            Determines whether a watch is active.
            </summary>
            <returns>
            	<c>true</c> if a watch is active; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method determines whether a watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.ResponseManager.StartWatching">
            <summary>
            Subscribes for changes; Start monitoring changes to the response management data.
            </summary>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The object is already being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.ResponseManager.StartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Subscribes for changes asynchronously; Start monitoring changes to the response management data.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">State of the user.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.ResponseManager.StopWatching">
            <summary>
            Unsubscribes for changes; Stop monitoring changes to the response management data.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.ResponseManagement.ResponseManager.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Unsubscribes for changes asynchronously; Stop monitoring changes to the response management data.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">State of the user.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseManager.PeopleManager">
            <summary>
            Gets the PeopleManager with which this Response Management object is associated.
            </summary>
            <value>The people manager.</value>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseManager.UserId">
            <summary>
            Gets the user ID this Response Management is object is associated with.
            </summary>
            <value>The user id.</value>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseManager.InitCollapsed">
            <summary>
            Gets if the preferred approach is to show the tree view collapsed / expanded.
            This is a Server Parameter. This can be set using Interaction Administrator.
            </summary>
            <value><c>true</c>, if collapsed; <c>false</c> otherwise.</value>
            <exception cref="T:System.InvalidOperationException">If a watch is not in progress.</exception>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseManager.UserDocument">
            <summary>
            Gets the user document.
            </summary>
            <value>The user document.</value>
            <exception cref="T:System.InvalidOperationException">If a watch is not in progress.</exception>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseManager.ServerDocuments">
            <summary>
            Gets the server documents.
            </summary>
            <value>The server documents.</value>
            <exception cref="T:System.InvalidOperationException">If a watch is not in progress.</exception>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseManager.InteractionMessages">
            <summary>
            Gets the interaction messages.
            </summary>
            <value>The interaction messages.</value>
            <exception cref="T:System.InvalidOperationException">If a watch is not in progress.</exception>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseManager.InteractionUrls">
            <summary>
            Gets the interaction message Urls.
            </summary>
            <value>The interaction message Urls.</value>
            <exception cref="T:System.InvalidOperationException">If a watch is not in progress.</exception>
        </member>
        <member name="P:ININ.IceLib.People.ResponseManagement.ResponseManager.InteractionFiles">
            <summary>
            Gets the interaction message files.
            </summary>
            <value>The interaction message files.</value>
            <exception cref="T:System.InvalidOperationException">If a watch is not in progress.</exception>
        </member>
        <member name="E:ININ.IceLib.People.ResponseManagement.ResponseManager.ResponseAdded">
            <summary>
            Occurs when new items are added at the server.
            </summary>
        </member>
        <member name="E:ININ.IceLib.People.ResponseManagement.ResponseManager.ResponseChanged">
            <summary>
            Occurs when existing items are updated at the server.
            </summary>
        </member>
        <member name="E:ININ.IceLib.People.ResponseManagement.ResponseManager.ResponseDeleted">
            <summary>
            Occurs when existing items are deleted on the server.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Internal.XMLRxNode">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XMLRxNode.Title">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XMLRxNode.Guid">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XMLRxNode.ChildNodes">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XMLRxNode.Items">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="T:ININ.IceLib.Internal.XMLRxItem">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XMLRxItem.Title">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XMLRxItem.Name">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XMLRxItem.Type">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XMLRxItem.Guid">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XMLRxItem.Text">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="T:ININ.IceLib.Internal.XMLRxDoc">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XMLRxDoc.Description">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XMLRxDoc.Server">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="T:ININ.IceLib.Internal.XMLRxLegacyItem">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XMLRxLegacyItem.Title">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XMLRxLegacyItem.Text">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="T:ININ.IceLib.Internal.XMLRxData">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XMLRxData.Server">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XMLRxData.InitCollapsed">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XMLRxData.XMLUserDoc">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XMLRxData.XMLServerDocs">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XMLRxData.XMLMessages">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XMLRxData.XMLUrls">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XMLRxData.XMLFiles">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="T:ININ.IceLib.People.ResponseManagement.ResponseManagementCache">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="T:ININ.IceLib.People.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ININ.IceLib.People.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ININ.IceLib.People.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.LicenseNameAttributes">
            <summary>
            Static constants for common IC license names used in the <see cref="T:ININ.IceLib.People.LicenseRequest"/> class.
            </summary>
            <doccompleted/>
        </member>
        <member name="F:ININ.IceLib.People.LicenseNameAttributes.TrackerAccess">
            <summary>
            This is a license that provides the session user access to the Tracker Plugin.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.LicenseNameAttributes.OperatorClientAccess">
            <summary>
            This is a license that provides the session user access to the Interaction Client - Operator Edition.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.LicenseNameAttributes.OptimizerAccess">
            <summary>
            This is a license that provides the session user access to the Optimizer Plugin.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.LicenseNameAttributes.EICFeatureVersion">
            <summary>
            This is a feature license that provides the session user with the Enterprise Interaction Center (EIC)
            set of functionality.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.LicenseNameAttributes.CICFeatureVersion">
            <summary>
            This is a feature license that provides the session user with the Contact Interaction Center (CIC) 
            set of functionality.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.LicenseNameAttributes.SICFeatureVersion">
            <summary>
            This is a feature license that provides the session user with the Service Interaction Center (SIC) 
            set of functionality.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.LicenseNameAttributes.CommuniteFeatureVersion">
            <summary>
            This is a feature license that provides the session user with the Communité
            set of functionality.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.LicenseNameAttributes.RecorderBaseFeature">
            <summary>
            This is a feature license that provides the session user with the Recorder functionality.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.LicenseNameAttributes.RecorderAdvancedFeature">
            <summary>
            This is a feature license that provides the session user with advanced Recorder functionality.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.LicenseNameAttributes.ReportAssistantSupervisorPluginAccess">
            <summary>
            This is license that provides access to the session user for the supervisor report assistant reporting plugin.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.LicenseRequestType">
            <summary>
            Enumeration for the type of operation requested for a license.
            </summary>
            <docktask/>
        </member>
        <member name="F:ININ.IceLib.People.LicenseRequestType.Query">
            <summary>
            Queries the availability of a license for a session user.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.LicenseRequestType.Request">
            <summary>
            Requests a license for a session user.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.LicenseRequestType.Replace">
            <summary>
            Requests a replacement of a license for a session user.
            </summary>
        </member>
        <member name="F:ININ.IceLib.People.LicenseRequestType.Release">
            <summary>
            Requests a release of a license for a session user.
            </summary>
        </member>
        <member name="T:ININ.IceLib.People.LicenseRequest">
            <summary>
            This class implements a license request operation. 
            </summary>
            <remarks>Objects of this class are used to perform license operation requests. The license requests that
            can be performed are query, request, replace, and release.
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.LicenseRequest.#ctor">
            <summary>
            The default constructor creates an instance of the LicenseRequest class.
            </summary>
        </member>
        <member name="M:ININ.IceLib.People.LicenseRequest.#ctor(System.String)">
            <summary>
            Creates a default license request object that queries the existence of the requested license.
            </summary>
            <param name="name">The name of the requested license.</param>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.LicenseRequest.#ctor(System.String,ININ.IceLib.People.LicenseRequestType)">
            <summary>
            Creates a license request object to perform a query, request, replace, or release operation on a license.
            </summary>
            <param name="name">The license name.</param>
            <param name="licenseRequestType">The type of operation to perform on this license.</param>
            <doccompleted/>
        </member>
        <member name="P:ININ.IceLib.People.LicenseRequest.LicenseRequestType">
            <summary>
            Gets the type of the license request.
            </summary>
            <value>The type of the license request.</value>
        </member>
        <member name="P:ININ.IceLib.People.LicenseRequest.Name">
            <summary>
            Gets the license name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:ININ.IceLib.People.LicenseOperationCompletedEventArgs">
            <summary>
            Arguments returned by the asynchronous license operation request.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.LicenseOperationCompletedEventArgs.#ctor(System.Collections.Generic.IList{System.Boolean},System.Exception,System.Boolean,System.Object)">
            <summary>
            Creates an instance of <see cref="T:ININ.IceLib.People.LicenseOperationCompletedEventArgs"/>.
            </summary>
            <param name="licenseOperationResults">The license operation results to return to the user.</param>
            <param name="error">The exception.</param>
            <param name="cancelled">Not currently supported.</param>
            <param name="userState">The user-supplied object to be passed to the asynchronous license operation.</param>
        </member>
        <member name="P:ININ.IceLib.People.LicenseOperationCompletedEventArgs.LicenseOperationResults">
            <summary>
            Set of flags indicating the result of each license operation.
            </summary>
            <value>The license operation results.</value>
            <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> 
            property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException">InnerException</see> 
            property holds a reference to Error.</exception>
        </member>
        <member name="T:ININ.IceLib.People.LicenseManagement">
             <summary>
             This class provides support for performing license operations for the session user.
             </summary>
             <example>
             <code escaped="false" lang="C#">
             ...
             
             LicenseRequest request = <span style="color:blue">new</span> LicenseRequest(textBoxLicense.Text, LicenseRequestType.Query);
             Collection&lt;LicenseRequest&gt; requests = new Collection&lt;LicenseRequest&gt;();
            
             requests.Add(request);
            
             if (_LicenseManager != <span style="color:blue">null</span>)
             {
                _LicenseManager.LicenseOperationAsync(requests, queryLicenseCompleted, textBoxLicense.Text);
             }
            
             <span style="color:blue:">private void</span> queryLicenseCompleted(<span style="color:blue">object</span> sender, LicenseOperationCompletedEventArgs e)
             {
                 if (e.Error == <span style="color:blue">null</span>)
                 {
                     ReadOnlyCollection&lt;bool&gt; results;
                     <span style="color:blue">string</span> license;
            
                     <span style="color:blue">string</span> message;
            
                     results = e.LicenseOperationResults;
                     license = e.UserState <span style="color:blue">as string</span>;
            
                     if (results[0] == <span style="color:blue">true</span>)
                     {
                         message = license + <span style="color:red">" is available for "</span> + m_Session.UserId;
                         MessageBox.Show(this, message, "People Client", MessageBoxButtons.OK, MessageBoxIcon.Information);
                     }
                     else
                     {
                         message = license + <span style="color:red">" is not available for "</span> + m_Session.UserId;
                         MessageBox.Show(<span style="color:blue">this</span>, message, "People Client", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                     }
                        
                 }
             }
             </code>
             </example>
             <remarks>To perform a license operation, create a <see cref="T:ININ.IceLib.People.LicenseRequest"/> object and set the appropriate flag for the 
             requested operation, then call <see cref="M:ININ.IceLib.People.LicenseManagement.LicenseOperation(System.Collections.Generic.IList{ININ.IceLib.People.LicenseRequest})"/> or <see cref="M:ININ.IceLib.People.LicenseManagement.LicenseOperationAsync(System.Collections.Generic.IList{ININ.IceLib.People.LicenseRequest},System.EventHandler{ININ.IceLib.People.LicenseOperationCompletedEventArgs},System.Object)"/> providing a list of
             <see cref="T:ININ.IceLib.People.LicenseRequest"/> objects. The asynchronous version of this method contains an optional callback function that is
             invoked when this operation completes. When this operation completes it returns a list of boolean flags indicating success or failure of
             each <see cref="T:ININ.IceLib.People.LicenseRequest"/>.<br/><br/>
             <note>The document titled <i>IC Licensing Overview</i> provides additional information about licensing. 
             It includes details on IC Server Feature Licenses, IC Client Access Licenses, and steps for configuring 
             and managing license information with Interaction Administrator and the Interactive Intelligence License 
             Management Web site.<para>You will find <i>IC Licensing Overview</i> in the <i>Technical Reference 
             Documents</i> section of the <i>IC Documentation Library</i> on your IC Server.</para></note> 
             </remarks>
             <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.LicenseManagement.#ctor(ININ.IceLib.People.PeopleManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.LicenseManagement"/> class.
            </summary>
            <param name="peopleManager">The <see cref="T:ININ.IceLib.People.PeopleManager"/> instance for this session user.</param>
        </member>
        <member name="M:ININ.IceLib.People.LicenseManagement.LicenseOperation(System.Collections.Generic.IList{ININ.IceLib.People.LicenseRequest})">
            <summary>Issues a synchronous request to perform license operations (query, request, release, replace) on a set of licenses.</summary>
            <param name="licenseRequests">A set of license operations to perform.</param>
            <returns>A set of boolean flags indicating the results of each <see cref="T:ININ.IceLib.People.LicenseRequest"/>.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.People.LicenseManagement.LicenseOperationAsync(System.Collections.Generic.IList{ININ.IceLib.People.LicenseRequest},System.EventHandler{ININ.IceLib.People.LicenseOperationCompletedEventArgs},System.Object)">
            <summary>Issues an asynchronous request to perform license operations (query, request, release, replace) on a set of licenses.</summary>
            <param name="licenseRequests">A set of license operation requests to perform.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="T:ININ.IceLib.People.FilteredStatusMessageChangedEventArgs">
            <summary>
            Provides data for the filtered status message list changed event.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.FilteredStatusMessageChangedEventArgs.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.ObjectModel.ReadOnlyCollection{ININ.IceLib.People.StatusMessageDetails}})">
            <summary>
            Constructs an object of type <see cref="T:ININ.IceLib.People.FilteredStatusMessageChangedEventArgs"/>.
            </summary>
            <param name="changed">The status messages that have changed for a given user.</param>
        </member>
        <member name="P:ININ.IceLib.People.FilteredStatusMessageChangedEventArgs.Changed">
            <summary>
            Contains a collection of status messages that have changed for a given user.
            </summary>
            <value>The changed status messages.</value>
        </member>
        <member name="T:ININ.IceLib.People.FilteredStatusMessageList">
            <summary>Represents a watched list of (<see cref="T:ININ.IceLib.People.StatusMessageDetails"/>) available for a set of users.</summary>
            <remarks>The list of status messages that is available to a user is filtered by the the available status messages for the workgroups to which
            the user belongs. To start watching the list of status messages available to a set of users, call the <see cref="M:ININ.IceLib.People.FilteredStatusMessageList.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.People.FilteredStatusMessageList.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> 
            methods, providing an array of user names that you want to watch. 
            The <c>completedCallback</c> delegate is invoked when the asynchronous start watch operation completes. 
            To stop watching, call the <see cref="M:ININ.IceLib.People.FilteredStatusMessageList.StopWatching"/> or <see cref="M:ININ.IceLib.People.FilteredStatusMessageList.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods. 
            The <c>completedCallback</c> delegate is invoked when the asynchronous stop watch operation completes.
            To change the set of users you wish to watch, call <see cref="M:ININ.IceLib.People.FilteredStatusMessageList.ChangeWatchedUsers(System.String[],System.String[],System.Boolean)"/> or <see cref="M:ININ.IceLib.People.FilteredStatusMessageList.ChangeWatchedUsersAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods providing the 
            new set of users you wish to watch. This replaces the former set of users with a new set of users to watch. The 
            <c>completedCallback</c> delegate is invoked when the asynchronous change watch operation completes.
            <para>Once a watch is in place, any changes to the status message list trigger the <see cref="E:ININ.IceLib.People.FilteredStatusMessageList.WatchedObjectsChanged"/> 
            event. You can access the list of status messages by calling <see cref="M:ININ.IceLib.People.FilteredStatusMessageList.GetList"/>. Calling 
            <see cref="M:ININ.IceLib.People.FilteredStatusMessageList.GetList"/> if a watch is not in progress raises the <see cref="T:System.InvalidOperationException"/>. 
            Calling <see cref="M:ININ.IceLib.People.FilteredStatusMessageList.StartWatching(System.String[])"/>,<see cref="M:ININ.IceLib.People.FilteredStatusMessageList.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>, <see cref="M:ININ.IceLib.People.FilteredStatusMessageList.ChangeWatchedUsers(System.String[],System.String[],System.Boolean)"/>, or <see cref="M:ININ.IceLib.People.FilteredStatusMessageList.ChangeWatchedUsersAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch is
            already in place for a given user, or calling <see cref="M:ININ.IceLib.People.FilteredStatusMessageList.StopWatching"/> or <see cref="M:ININ.IceLib.People.FilteredStatusMessageList.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch
            is not in place also raises the <see cref="T:System.InvalidOperationException"/>.<br/><br/></para>
            <note>The asynchronous methods are preferred since the start, change, and stop watch can be 
            lengthy operations.</note>
            <para>There are two classes in IceLib for watching status messages. The <see cref="T:ININ.IceLib.People.StatusMessageList"/> class
            allows you to watch the list of all status messages defined in IC that the session user has the rights to view. The 
            <see cref="T:ININ.IceLib.People.FilteredStatusMessageList"/> class allows you to watch the status messages that are available
            for a particular IC user. The list of available status messages for a user can vary based on workgroup membership, role, and user settings
            in <b>Interaction Administrator.</b></para>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.People.FilteredStatusMessageList.#ctor(ININ.IceLib.People.PeopleManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.People.FilteredStatusMessageList"/> class.
            </summary>
            <param name="peopleManager">A <see cref="P:ININ.IceLib.People.FilteredStatusMessageList.PeopleManager"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.People.FilteredStatusMessageList.CanHaveStatus(System.String,System.String)">
            <summary>
            Determines whether a user can have a given status.
            </summary>
            <param name="userId">The user ID.</param>
            <param name="statusId">The status ID.</param>
            <returns>
            	<c>true</c> if the user can have the specified status; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException">If a watch is not in progress.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The user ID is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.FilteredStatusMessageList.GetList">
            <summary>
            Gets the table of filtered status messages lists for all users watched by this object.
            </summary>
            <returns>The lists of filtered status messages for all users watched by this object.</returns>
            <exception cref="T:System.InvalidOperationException">If a watch is not in progress.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">No user IDs are being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.People.FilteredStatusMessageList.IsWatching">
            <overloads>
            Determines whether a watch is active.
            </overloads>
            
            <summary>
            Determines whether a watch is active.
            </summary>
            <returns>
            	<c>true</c> if a watch is active; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method determines whether a watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.People.FilteredStatusMessageList.IsWatching(System.String)">
            <summary>
            Determines whether a watch is active and if the specified value is being watched.
            </summary>
            <param name="userId">The user.</param>
            <returns>
            	<c>true</c> if a watch is active and the specified value is being watched; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>
            This method determines whether a watch is in place for this instance and whether the specified value is being watched.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.People.FilteredStatusMessageList.StartWatching(System.String[])">
            <summary>
            Starts watching the Filtered Status Message List for a set of users.
            </summary>
            <param name="userIds">An array of users to request a watch of their status message list.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">A watch is already in progress.</exception>
        </member>
        <member name="M:ININ.IceLib.People.FilteredStatusMessageList.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously starts watching the Filtered Status Message List for a set of users.
            </summary>
            <param name="userIds">An array of users to request a watch of their status message list.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.People.FilteredStatusMessageList.StopWatching">
            <summary>
            Stops watching the Filtered Status Message List for a set of users.
            </summary>
            <exception cref="T:System.InvalidOperationException">A watch is not in progress.</exception>
        </member>
        <member name="M:ININ.IceLib.People.FilteredStatusMessageList.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops watching the Filtered Status Message List.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.People.FilteredStatusMessageList.ChangeWatchedUsers(System.String[],System.String[],System.Boolean)">
            <summary>
            Changes the set of user names for a watch of their Filtered Status Message list.
            </summary>
            <param name="userIDsToAdd">The user IDs to add. (Can be <b>null</b>.)</param>
            <param name="userIDsToRemove">The user IDs to remove. (Can be <b>null</b>.)</param>
            <param name="replaceExisting">if set to <c>true</c>, replace the existing existing list.</param>
            <remarks>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">A watch is not in progress.</exception>
        </member>
        <member name="M:ININ.IceLib.People.FilteredStatusMessageList.ChangeWatchedUsersAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes the set of user names for a watch of their filtered status message list.
            </summary>
            <param name="userIDsToAdd">The user IDs to add. (Can be <b>null</b>.)</param>
            <param name="userIDsToRemove">The user IDs to remove. (Can be <b>null</b>.)</param>
            <param name="replaceExisting">if set to <c>true</c>, replace the existing existing list.</param>
            <param name="completedCallback">Delegate caled when the operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>
            <para>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</para>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            </remarks>
        </member>
        <member name="P:ININ.IceLib.People.FilteredStatusMessageList.Item(System.String)">
            <summary>
            Gets the list of filtered status messages for the given user.
            </summary>
            <param name="userId">The user to retrieve the list of filtered status messages.</param>
            <returns>The list of filtered status messages for the given <paramref name="userId"/>.</returns>
            <exception cref="T:System.InvalidOperationException">If a watch is not in progress.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The user ID is not being watched.</exception>
        </member>
        <member name="E:ININ.IceLib.People.FilteredStatusMessageList.WatchedObjectsChanged">
            <summary>
            Occurs when one of the <see cref="T:ININ.IceLib.People.FilteredStatusMessageList"/> watched objects has changed.
            </summary>
            <remarks>
            Note that changes, additions, and removal of objects are monitored for a <see cref="T:ININ.IceLib.People.FilteredStatusMessageList"/>.
            <para>
            Each <see cref="P:ININ.IceLib.People.FilteredStatusMessageChangedEventArgs.Changed"/> notification for a given user
            is described the <see cref="T:ININ.IceLib.People.StatusMessageDetails"/> object defined in the collection of <see cref="T:ININ.IceLib.People.StatusMessageDetails"/> objects.
            </para>
            </remarks>
        </member>
        <member name="P:ININ.IceLib.People.FilteredStatusMessageListCache.WatchCount">
            <summary>
            Gets the number of watchers.
            </summary>
            <value>The watch count.</value>
        </member>
    </members>
</doc>
