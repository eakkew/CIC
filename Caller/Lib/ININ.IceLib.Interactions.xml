<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ININ.IceLib.Interactions</name>
    </assembly>
    <members>
        <member name="T:ININ.IceLib.Interactions.Localization">
            <summary>
            Helper class for accessing string from resource files.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.StreamHelpers">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.WatchedAttributeCache">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.WatchedAttributeCache"/> class.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.WatchedAttributeCache"/> class.
            </summary>
            <param name="managedWatcherType">Specifies the type of watchers to manage.</param>
            <remarks>Unmanaged watchers will not be allowed.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.WatchedAttributeCache"/> class.
            </summary>
            <param name="managedWatcherType">Specifies the type of watchers to manage.</param>
            <param name="unmanagedWatcherType">Specifies the type of unmanaged watchers that will be allowed.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.IsAttributeWatched(System.String)">
            <summary>
            Determines whether the attribute is being watched.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if the attribute is being watched; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.IsWatchingUnmanaged(System.Object)">
            <summary>
            Determines whether this interaction is being watched by the specified unmanaged watcher.
            </summary>
            <param name="watcher">The watcher.</param>
            <returns>
            	<c>true</c> if is being watched by the specified watcher; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.GetWatchedAttributes">
            <summary>
            Gets the watched attributes (both managed and unmanaged).
            </summary>
            <returns>The watched attributes.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.StartWatching(System.Object,System.String[])">
            <summary>
            Starts a watcher, potentially resulting in a round trip to the server.
            </summary>
            <param name="watcher">The watcher.</param>
            <param name="attributeNames">The new attribute names.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.ChangeWatchedAttributes(System.Object,System.String[],System.String[],System.Boolean)">
            <summary>
            Changes a watcher, potentially resulting in a round trip to the server.
            </summary>
            <param name="watcher">The watcher.</param>
            <param name="attributeNamesToAdd">The attribute names to add. (Can be <b>null</b>.)</param>
            <param name="attributeNamesToRemove">The attribute names to remove. (Can be <b>null</b>.)</param>
            <param name="replaceExisting">if set to <c>true</c>, replace the existing existing list.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.StopWatching(System.Object)">
            <summary>
            Stops a watcher, potentially resulting in a round trip to the server.
            </summary>
            <param name="watcher">The watcher.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.StartWatchingImpl(System.String[])">
            <summary>
            Start watching implementation for inheriting classes.
            </summary>
            <param name="attributeNames">The attribute names.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.ChangeWatchedAttributesImpl(System.String[],System.Boolean)">
            <summary>
            Change watch implementation for inheriting classes.
            </summary>
            <param name="attributeNames">The attribute names.</param>
            <param name="removeOnly">if set to <c>true</c> only removing.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.StopWatchingImpl">
            <summary>
            Stop watching implementation for inheriting classes.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.NotifyAttributesUpdatedImpl(System.Object,System.Collections.Generic.List{System.String})">
            <summary>
            Change notification implementation for inheriting classes.
            </summary>
            <param name="watcher">The watcher.</param>
            <param name="attributeNames">The attribute names.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.FetchAttributeValuesImpl(System.String[])">
            <summary>
            Attribute initialization for inheriting classes.
            </summary>
            <param name="attributeNames">The attribute names.</param>
            <returns>The attribute Values.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.UpdateAttributeCacheImpl(System.String,System.String)">
            <summary>
            Attribute cache updating for inheriting classes.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.StartWatchingUnmanaged(System.Object,System.String[])">
            <summary>
            Starts a watcher, potentially resulting in a round trip to the server.
            </summary>
            <param name="watcher">The watcher.</param>
            <param name="attributeNames">The new attribute names.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.ChangeWatchedAttributesUnmanaged(System.Object,System.String[])">
            <summary>
            Changes a watcher, potentially resulting in a round trip to the server.
            </summary>
            <param name="watcher">The watcher.</param>
            <param name="attributeNames">The new attribute names.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.StopWatchingUnmanaged(System.Object)">
            <summary>
            Stops a watcher, potentially resulting in a round trip to the server.
            </summary>
            <param name="watcher">The watcher.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.GetInterestedWatchers(System.String[])">
            <summary>
            Gets the watchers for the specified attributes.
            </summary>
            <param name="attributeNames">The attribute names.</param>
            <returns>The watchers and which changed attributes they were watching.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.GetAttributeAsString(System.String)">
            <summary>
            Gets the attribute as a string.
            </summary>
            <param name="name">The name.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.GetAttributeAsStrings(System.String,System.Char)">
            <summary>
            Gets the string values for the named attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="splitChar">The split char.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.GetAttributeAsBool(System.String)">
            <summary>
            Gets the attribute as a bool.
            </summary>
            <param name="name">The name.</param>
            <returns>The bool.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.GetAttributeAsInt32(System.String)">
            <summary>
            Gets the attribute as int32.
            </summary>
            <param name="name">The name.</param>
            <returns>The integer value.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.WatchedAttributeCache.SetAttribute(System.String,System.String)">
            <summary>
            Sets the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="P:ININ.IceLib.Interactions.WatchedAttributeCache.ManagedWatchCount">
            <summary>
            Gets the total number of managed watchers.
            </summary>
            <value>The watch count.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.WatchedAttributeCache.ManagedWatchers">
            <summary>
            Gets the watchers.
            </summary>
            <value>The watchers.</value>
            <remarks>
            Be sure to lock while accessing the watcher list.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionCache.NotifyAttributesUpdatedImpl(System.Object,System.Collections.Generic.List{System.String})">
            <summary>
            Change notification implementation for inheriting classes.
            </summary>
            <param name="watcher">The watcher.</param>
            <param name="attributeNames">The attribute names.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionCache.FetchAttributeValuesImpl(System.String[])">
            <summary>
            Attribute initialization for inheriting classes.
            </summary>
            <param name="attributeNames">The attribute names.</param>
            <returns>The attribute Values.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionCache.UpdateAttributeCacheImpl(System.String,System.String)">
            <summary>
            Attribute cache updating for inheriting classes.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionCache.InteractionsManager">
            <summary>
            Gets the InteractionManager with which this Interaction is associated.
            </summary>
            <value>The interactions manager.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionCache.InteractionId">
            <summary>
            Gets the ID of the Interaction.
            </summary>
            <value>The interaction ID.</value>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteractionCache.CacheMembers">
            <summary>
            Gets the chat members.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatInteractionCache.InteractionsManager">
            <summary>
            Gets the InteractionManager with which this Interaction is associated.
            </summary>
            <value>The interactions manager.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatInteractionCache.InteractionId">
            <summary>
            Gets the ID of the Interaction.
            </summary>
            <value>The interaction ID.</value>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteractionCache.EmailXML_UnknownNode(System.Object,System.Xml.Serialization.XmlNodeEventArgs)">
            <summary>
            Handler for XML parser when an Unknown Node is encountered.
            </summary>
            <param name="sender">Object sending the event message.</param>
            <param name="e">XML Node data for the Unknown Node event.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteractionCache.EmailXML_UnknownAttribute(System.Object,System.Xml.Serialization.XmlAttributeEventArgs)">
            <summary>
            Handler for XML parser when an Unknown Attribute is encountered.
            </summary>
            <param name="sender">Object sending the event message.</param>
            <param name="e">XML Node data for the Unknown Attribute event.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteractionCache.SetResponse(ININ.IceLib.Interactions.EmailResponse)">
            <summary>
            Sets the email response.
            </summary>
            <param name="emailResponse">The email response.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailInteractionCache.InteractionsManager">
            <summary>
            Gets the InteractionManager with which this Interaction is associated.
            </summary>
            <value>The interactions manager.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailInteractionCache.InteractionId">
            <summary>
            Gets the ID of the Interaction.
            </summary>
            <value>The interaction ID.</value>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlEmailMessage">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailMessage.Id">
            <summary>
            Id of email.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailMessage.EntityId">
            <summary>
            Id of email.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailMessage.Version">
            <summary>
            Version of email xml.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailMessage.Subject">
            <summary>
            Subject of email.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailMessage.Sender">
            <summary>
            Sender of email.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailMessage.DateReceived">
            <summary>
            Date email was received.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailMessage.Body">
            <summary>
            Body of email message.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailMessage.EncryptionInfo">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailMessage.Equals(System.Object)">
            <summary>
            Compares two XmlEmailMessage objects.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailMessage.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlEmailMessage.ToRecipients">
            <summary>
            Array of recipients for this email.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlEmailMessage.CcRecipients">
            <summary>
            Array of recipients for this email.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlEmailMessage.BccRecipients">
            <summary>
            Array of recipients for this email.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlEmailMessage.Attachments">
            <summary>
            Array of attachments for this email.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlEmailMessage.OriginalAttachments">
            <summary>
            Array of attachments for this email.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Internal.XmlEmailMessage.Signatures">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlEmailSignature">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailSignature.Status">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailSignature.StatusText">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailSignature.X509">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlEmailEncryptionInfo">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailEncryptionInfo.EncryptionStatus">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailEncryptionInfo.EncryptionStatusText">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailEncryptionInfo.Algorithm">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailEncryptionInfo.IssuerSignature">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlEmailReceiveTime">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailReceiveTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Internal.XmlEmailReceiveTime"/> class.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailReceiveTime.ReceiveTime">
            <summary>
            Gets the ReceiveTime.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlEmailBody">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailBody.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Internal.XmlEmailBody"/> class.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailBody.Body">
            <summary>
            Gets the Body.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlEmailSubject">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailSubject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Internal.XmlEmailSubject"/> class.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailSubject.Subject">
            <summary>
            Gets the Subject.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlEmailRecipient">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailRecipient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Internal.XmlEmailRecipient"/> class.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailRecipient.Name">
            <summary>
            Gets the Name.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailRecipient.Address">
            <summary>
            Gets the Address.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailRecipient.Equals(System.Object)">
            <summary>
            Compares two Recipient objects.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailRecipient.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailRecipientArrayList.Equals(System.Object)">
            <summary>
            Compares two Recipient lists (recipient ordering within the list is considered)
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailRecipientArrayList.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:ININ.IceLib.Internal.XmlEmailAttachment">
            <exclude/><summary>For internal use only.</summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailAttachment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Internal.XmlEmailAttachment"/> class.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailAttachment.Name">
            <summary>
            The name of the attachment.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Internal.XmlEmailAttachment.Id">
            <summary>
            Attachment Id.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailAttachment.Equals(System.Object)">
            <summary>
            Compares two Attachment objects.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailAttachment.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailAttachmentArrayList.Equals(System.Object)">
            <summary>
            Compares two Attachment lists (attachment ordering within the list is considered)
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailAttachmentArrayList.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailSignatureArrayList.Equals(System.Object)">
            <summary>
            Compares two Signature lists (recipient ordering within the list is considered)
            </summary>
        </member>
        <member name="M:ININ.IceLib.Internal.XmlEmailSignatureArrayList.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionQueueCache.InteractionsManager">
            <summary>
            Gets the InteractionManager with which this Interaction is associated.
            </summary>
            <value>The interactions manager.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionQueueCache.QueueId">
            <summary>
            Gets the queue ID.
            </summary>
            <value>The queue ID.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionId">
            <summary>
            Identifies an Interaction within the Interaction Center system.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionId.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionId"/> class with the specified values.
            </summary>
            <param name="id">The ID.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionId"/> class with the specified values.
            </summary>
            <param name="id">The ID.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionId.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionId"/> class with the specified values.
            </summary>
            <param name="wireId">The wire ID.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionId.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionId.Equals(System.Object)">
            <overloads>
            Determines whether two InteractionId instances are equal.
            </overloads>
            
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionId.Equals(ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Determines whether the specified InteractionId is equal to the current InteractionId.
            </summary>
            <param name="other">The InteractionId to compare with the current InteractionId. </param>
            <returns><c>true</c> if the specified InteractionId is equal to the current InteractionId; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionId.op_Equality(ININ.IceLib.Interactions.InteractionId,ININ.IceLib.Interactions.InteractionId)">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionId.op_Inequality(ININ.IceLib.Interactions.InteractionId,ININ.IceLib.Interactions.InteractionId)">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionId.Id">
            <summary>
            Gets a numeric representation of the Interaction ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionId.WireId">
            <summary>
            Gets a numeric (non-CLS-compliant) representation of the Interaction ID.
            </summary>
            <value>The wire ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionId.RawId">
            <summary>
            Gets a numeric (non-CLS-compliant) representation of the Interaction ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionState">
            <summary>
            Specifies constants indicating the state of an Interaction.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.None">
            <summary>The Interaction is in an indeterminate state.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.Alerting">
            <summary>The Interaction is alerting.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.Connected">
            <summary>The Interaction is connected.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.Held">
            <summary>The Interaction is held.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.Messaging">
            <summary>The Interaction is messaging.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.Offering">
            <summary>The Interaction is in an offering state.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.Parked">
            <summary>The Interaction is parked.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.Proceeding">
            <summary>The Interaction is proceeding.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.System">
            <summary>The Interaction is being processed by the system.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.InternalDisconnect">
            <summary>The Interaction has been disconnected internally.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionState.ExternalDisconnect">
            <summary>The Interaction has been disconnected externally.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionPartyType">
            <summary>
            Represents local party type and remote party type of an interaction
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionPartyType.Internal">
            <summary>
            Party type is internal
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionPartyType.External">
            <summary>
            Party type is external
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionDirection">
            <summary>
            Specifies constants indicating the direction of an Interaction.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionDirection.None">
            <summary>The Interaction has an indeterminate direction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionDirection.Incoming">
            <summary>The Interaction is incoming.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionDirection.Outgoing">
            <summary>The Interaction is outgoing.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionType">
            <summary>
            Specifies constants indicating the type of an Interaction.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionType.None">
            <summary>The Interaction is of an unknown type.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionType.Call">
            <summary>The Interaction is a Call.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionType.Callback">
            <summary>The Interaction is a Callback.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionType.Chat">
            <summary>The Interaction is a Chat.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionType.Email">
            <summary>The Interaction is an Email.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionType.Generic">
            <summary>The Interaction is a Generic object.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionType.Monitor">
            <summary>The Interaction is a Monitor.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionType.Recorder">
            <summary>The Interaction is a Record.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionEventArgs">
            <summary>
            Provides data for events involving a single <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionEventArgs.#ctor(ININ.IceLib.Interactions.Interaction)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionEventArgs"/> class with the specified values.
            </summary>
            <param name="interaction">The interaction.</param>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionEventArgs.Interaction">
            <summary>
            Gets the Interaction associated with the change.
            </summary>
            <value>The interaction.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionCapabilities">
            <summary>
            Specifies constants indicating the capabilities of an Interaction.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.None">
            <summary>The Interaction has no capabilities.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Consult">
            <summary>The Interaction can perform consults.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Disconnect">
            <summary>The Interaction can be disconnected.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Hold">
            <summary>The Interaction can be held.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Listen">
            <summary>The Interaction can perform listens.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Messaging">
            <summary>The Interaction can perform messaging.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Mute">
            <summary>The Interaction can be muted.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Park">
            <summary>The Interaction can be parked.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Pause">
            <summary>The Interaction can pause recording.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Pickup">
            <summary>The Interaction can be picked up.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Private">
            <summary>The Interaction can be marked private.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Record">
            <summary>The Interaction can be recorded.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.RequestHelp">
            <summary>The Interaction can have help requested.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Transfer">
            <summary>The Interaction can be transferred.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Join">
            <summary>The ConferenceInteraction can be joined.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.ObjectWindow">
            <summary>The Interaction can have an object window displayed.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Conference">
            <summary>The Interaction can be conferenced.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionCapabilities.Coach">
            <summary>The Interaction can be coached.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.AttributesEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.Interactions.Interaction.AttributesChanged"/> event of a <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.AttributesEventArgs.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.AttributesEventArgs"/> class with the specified values.
            </summary>
            <param name="interactionAttributeNames">The interaction attribute names.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.AttributesEventArgs.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:AttributesEventArgs"/> class.
            </summary>
            <param name="interactionAttributeNames">The interaction attribute names.</param>
        </member>
        <member name="P:ININ.IceLib.Interactions.AttributesEventArgs.InteractionAttributeNames">
            <summary>
            Gets the attribute names associated with the change.
            </summary>
            <value>The interaction attribute names.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.GetAttributeCompletedEventArgs`1">
            <summary>
            Provides data for the <c>completedCallback</c> delegate of <see cref="M:ININ.IceLib.Interactions.Interaction.GetBooleanAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.Boolean}},System.Object)"/>, <see cref="M:ININ.IceLib.Interactions.Interaction.GetStringAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.String}},System.Object)"/>, <see cref="M:ININ.IceLib.Interactions.Interaction.GetIntegerAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.Int32}},System.Object)"/>, and <see cref="M:ININ.IceLib.Interactions.Interaction.GetDateTimeAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.DateTime}},System.Object)"/> events of a <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <typeparam name="TAttributeValue">The attribute value.</typeparam>
            <remarks>An <b>interaction attribute</b> is a piece of information about an interaction that travels with it 
            throughout the Interaction Center. For example, Telephone calls, chat sessions, Emails, and generic 
            objects are entities in IC that have some type of attribute associated with them. Attributes can be 
            created by a variety of entities, including the Interaction Center itself. For example, the Telephony 
            Services subsystem creates default call object attributes when a call object is established. Handlers, 
            IC applications, and programs developed using APIs can create and modify attributes.<br/><br/>
            Attributes are name/value pairs. To retrieve the value of an attribute, you must know its attribute name. 
            The value of an attribute is usually string data. However, chat and call attributes can contain 32-bit 
            binary data in DWORD format. Email objects return data that is stored in Interaction Designer’s list 
            variable format.<br/><br/>
            <para><list type="bullet">
            <item>Attribute names are not case-sensitive. "Eic_StationName" "eic_stationname" refer to the same attribute.<br/><br/></item>
            <item>Attributes names that begin with Eic_ are primarily used by Interaction Client to display information about an object.<br/><br/></item>
            <item>Attributes whose name does not begin with Eic_ are primarily used by handlers or chat objects.<br/><br/></item>
            <item>Attributes whose name ends with "Raw" contain original, unprocessed values. These attributes are logged for reporting purposes.<br/><br/></item>
            <item><i>Directory Services</i> "attributes" are not the same as <i>interaction</i> attributes discussed here. A Directory Services attribute is an item of information that is stored in Directory Services as a registry key. Interaction attributes are name/value pairs that travel with an object as it is processed by the Interaction Center server.</item>
            </list><br/><br/></para>
            <note>For more information about attributes, see <i>Interaction Attributes Reference Guide</i> in the
            <i>System APIs</i> section of the IC Documentation library on your IC server.</note>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.GetAttributeCompletedEventArgs`1.#ctor(System.String,`0,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of this class with the specified values.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <param name="attributeValue">The attribute value.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <c>true</c> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.GetAttributeCompletedEventArgs`1.AttributeName">
            <summary>
            Gets the attribute name associated with the event.
            </summary>
            <value>The name of the attribute.</value>
            <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> 
            property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException">InnerException</see> 
            property holds a reference to Error.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.GetAttributeCompletedEventArgs`1.AttributeValue">
            <summary>
            Gets the attribute value associated with the event.
            </summary>
            <value>The attribute value.</value>
            <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> 
            property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException">InnerException</see> 
            property holds a reference to Error.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.Interaction">
             <summary>
             Represents an Interaction within the Interaction Center system.
             </summary>
             <example>The following is an example of retrieving an interaction attribute and returning the string value.
             <code lang="C#" escaped="false">
             ...
             _Interaction.GetStringAttributeCompleted += GetStringAttributeCompleted;
               
             <span style="color:blue">private void</span> queryAttributeButton_Click(<span style="color:blue">object</span> sender, System.EventArgs e)
            	{
            		if (_Interaction != <span style="color:blue">null</span>)
            		{
            			_Interaction.GetStringAttributeAsync(attributeNameTextBox.Text, <span style="color:blue">null</span>);
            		}
            	}
            
             <span style="color:blue">private void</span> GetStringAttributeCompleted(<span style="color:blue">object</span> sender, GetAttributeCompletedEventArgs&lt;string&gt; e)
            	{
            		<span style="color:blue">try</span>
            		{
                      attributeValueTextBox.Text = e.AttributeValue;
            		}
            		<span style="color:blue">catch</span> (Exception ex)
            		{
            			attributeValueTextBox.Text = String.Empty;
            			MessageBox.Show(ex.StackTrace, ex.Message);
            		}
            	}
             </code>
             </example>
             <remarks>Interactions in the Interaction Center system can be calls, chats, e-mails, email, monitors, or recordings.
             <para>This class allows you to start, stop, and change watches on interaction attributes along with interaction control actions such as
             pickup, hold, disconnect, park, etc.</para>
             <para>To start watching interaction attributes, call <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> passing in an array of 
             attribute names to watch. When the asynchronous start watching completes it invokes the <c>completedCallback</c> delegate.</para>
             <para>To stop watching interaction attributes, call <see cref="M:ININ.IceLib.Interactions.Interaction.StopWatching"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous stop watch action completes,
             it invokes the <c>completedCallback</c> delegate.</para>
             <para>To change the interaction attributes to watch, call <see cref="M:ININ.IceLib.Interactions.Interaction.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.ChangeWatchedAttributesAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the 
             asynchronous change watched attributes action completes it invokes the <c>completedCallback</c> delegate.</para>
             <para>Calling <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch is in place or <see cref="M:ININ.IceLib.Interactions.Interaction.StopWatching"/>, <see cref="M:ININ.IceLib.Interactions.Interaction.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>,
             <see cref="M:ININ.IceLib.Interactions.Interaction.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)"/>, or <see cref="M:ININ.IceLib.Interactions.Interaction.ChangeWatchedAttributesAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch is not in place raises an <see cref="T:System.InvalidOperationException"/>.</para>
             <para>Accessing interaction properties when a watch is not in place raises a <see cref="T:ININ.IceLib.NotCachedException"/>.</para>
             <para>To retrieve the value of a Boolean attribute call <see cref="M:ININ.IceLib.Interactions.Interaction.GetBooleanAttribute(System.String)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.GetBooleanAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.Boolean}},System.Object)"/> and provide an attribute name. When
             the asynchronous get attribute operation completes it invokes the <c>completedCallback</c> delegate returning the value of this attribute.</para>
             <para>To retrieve the value of a integer attribute call <see cref="M:ININ.IceLib.Interactions.Interaction.GetIntegerAttribute(System.String)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.GetIntegerAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.Int32}},System.Object)"/> and provide an attribute name. When
             the asynchronous get attribute operation completes it invokes the <c>completedCallback</c> delegate returning the value of this attribute.</para>
             <para>To retrieve the value of a string attribute call <see cref="M:ININ.IceLib.Interactions.Interaction.GetStringAttribute(System.String)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.GetStringAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.String}},System.Object)"/> and provide an attribute name. When
             the asynchronous get attribute operation completes it invokes the <c>completedCallback</c> delegate returning the value of this attribute.</para>
             <para>To retrieve the value of a DateTime attribute call <see cref="M:ININ.IceLib.Interactions.Interaction.GetDateTimeAttribute(System.String)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.GetDateTimeAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.DateTime}},System.Object)"/> and provide an attribute name. When
             the asynchronous get attribute operation completes it invokes the <c>completedCallback</c> delegate returning the value of this attribute.</para>
             <para>To set the value of a DateTime attribute call <see cref="M:ININ.IceLib.Interactions.Interaction.SetDateTimeAttribute(System.String,System.DateTime)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.SetDateTimeAttributeAsync(System.String,System.DateTime,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the set attribute value
             completes it invokes the <c>completedCallback</c> delegate.</para>
             <para>To set the value of a string attribute call <see cref="M:ININ.IceLib.Interactions.Interaction.SetStringAttribute(System.String,System.String)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.SetStringAttributeAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the set attribute value
             completes it invokes the <c>completedCallback</c> delegate.</para>
             <para>To append a value to a string attribute call <see cref="M:ININ.IceLib.Interactions.Interaction.AppendStringAttribute(System.String,System.String,System.String)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.AppendStringAttributeAsync(System.String,System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> and provide the string to
             append to the attribute value. When the append operation completes it invokes the <c>completedCallback</c> delegate.</para>
             <para>To perform a Pickup operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Pickup"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.PickupAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Pickup operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Disconnect operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Disconnect"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.DisconnectAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Disconnect operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Hold operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Hold(System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.HoldAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Hold operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Record operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Record(System.Boolean,System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.RecordAsync(System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Record operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a BlindTransfer operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.BlindTransfer(System.String)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.BlindTransferAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous BlindTransfer operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a ConsultTransfer operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.ConsultTransfer(ININ.IceLib.Interactions.InteractionId)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.ConsultTransferAsync(ININ.IceLib.Interactions.InteractionId,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous ConsultTransfer operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a TransferToVoicemail operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.TransferToVoicemail(System.String)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.TransferToVoicemailAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous TransferToVoicemail operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Park operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Park(System.String)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.ParkAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Park operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Listen operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Listen(System.Boolean,System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.ListenAsync(System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Listen operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Coach operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Coach(System.Boolean,System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.CoachAsync(System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Coach operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Mute operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Mute(System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.MuteAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Mute operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Pause operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Pause(System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.PauseAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Pause operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Private operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Private(System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.PrivateAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Private operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Voicemail operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Voicemail"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.VoicemailAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Voicemail operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a Join operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.Join"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.JoinAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous Join operation completes it invokes the
             <c>completedCallback</c> delegate.</para>
             <para>To perform a RequestHelp operation on an interaction, call <see cref="M:ININ.IceLib.Interactions.Interaction.RequestHelp(System.String)"/> or <see cref="M:ININ.IceLib.Interactions.Interaction.RequestHelpAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous RequestHelp operation completes it invokes the
             <c>completedCallback</c> delegate.<br/><br/></para>
             <note>The asynchronous methods are preferred since the above operations can be lengthy.</note>
             </remarks>
             <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.Interaction"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="interactionId">The interaction ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.IsValidCapability(ININ.IceLib.Interactions.InteractionCapabilities)">
            <summary>
            Determines whether the interaction has the specified capabilities.
            </summary>
            <param name="interactionCapabilities">The interaction capabilities.</param>
            <returns>
            	<c>true</c> if the interaction has the capabilities; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetRemoteName(System.String)">
            <summary>
            Sets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteName"/>.
            </summary>
            <param name="remoteName">Remote party name.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetRemoteNameAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteName"/>.
            </summary>
            <param name="remoteName">Remote party name.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.AppendNote(System.String)">
            <summary>
            Appends to the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Notes"/>.
            </summary>
            <param name="appendedText">The appended text.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.AppendNoteAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously appends to the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Notes"/>.
            </summary>
            <param name="appendedText">The appended text.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetStateDescription(System.String)">
            <summary>
            Sets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.StateDescription"/>.
            </summary>
            <param name="stateDescription">The state description.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetStateDescriptionAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.StateDescription"/>.
            </summary>
            <param name="stateDescription">The state description.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetAccountCodeId(System.String)">
            <summary>
            Sets the <see cref="P:ININ.IceLib.Interactions.Interaction.AccountCodeId">Account Code ID</see>.
            </summary>
            <param name="accountCodeId">The account code ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetAccountCodeIdAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sets the <see cref="P:ININ.IceLib.Interactions.Interaction.AccountCodeId">Account Code ID</see>.
            </summary>
            <param name="accountCodeId">The account code ID.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetWrapUpCodeId(System.String)">
            <summary>
            Sets the <see cref="P:ININ.IceLib.Interactions.Interaction.WrapUpCodeId">WrapUp Code ID</see>.
            </summary>
            <param name="wrapUpCodeId">The WrapUp code ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetWrapUpCodeIdAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sets the <see cref="P:ININ.IceLib.Interactions.Interaction.WrapUpCodeId">WrapUp Code ID</see>.
            </summary>
            <param name="wrapUpCodeId">The WrapUp code ID.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.IsWatching">
            <overloads>
            Determines whether a watch is active.
            </overloads>
            
            <summary>
            Determines whether a watch is active.
            </summary>
            <returns>
            	<c>true</c> if a watch is active; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method determines whether a watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.IsWatching(System.String)">
            <summary>
            Determines whether a watch is active and if the specified value is being watched.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <returns>
            	<c>true</c> if a watch is active and the specified value is being watched; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>
            This method determines whether a watch is in place for this instance and whether the specified value is being watched.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.StartWatching(System.String[])">
            <summary>
            Starts watching.
            </summary>
            <param name="attributeNames">The attribute names.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">The object is already being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously starts watching.
            </summary>
            <param name="attributeNames">The attribute names.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)">
            <summary>
            Changes how the Interaction is being watched.
            </summary>
            <param name="attributeNamesToAdd">The attribute names to add. (Can be <b>null</b>.)</param>
            <param name="attributeNamesToRemove">The attribute names to remove. (Can be <b>null</b>.)</param>
            <param name="replaceExisting">if set to <c>true</c>, replace the existing existing list.</param>
            <remarks>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ChangeWatchedAttributesAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes how the Interaction is being watched.
            </summary>
            <param name="attributeNamesToAdd">The attribute names to add. (Can be <b>null</b>.)</param>
            <param name="attributeNamesToRemove">The attribute names to remove. (Can be <b>null</b>.)</param>
            <param name="replaceExisting">if set to <c>true</c>, replace the existing existing list.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>
            <para>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</para>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.StopWatching">
            <summary>
            Stops watching the Interaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops watching the Interaction.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetStringAttribute(System.String)">
            <summary>
            Gets the value of an attribute as a string.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>The string value.</returns>
            <remarks>
            This method will return the value from the cache, if the attribute is cached.
            If the attribute is not being cached, it will send a request to the server and get the attribute.
            </remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The interaction is not being watched.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetStringAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.String}},System.Object)">
            <summary>
            Asynchronously gets the value of an attribute as a string.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>
            <para>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</para>
            <para>
            This method will return the value from the cache, if the attribute is cached.
            If the attribute is not being cached, it will send a request to the server and get the attribute.
            </para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetWatchedStringAttribute(System.String)">
            <summary>
            Gets a string attribute.
            This method can get values of the attributes that are currently being watched.
            If this method is used to get a unwatched-attribute it will result in a NotCachedException.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <returns>The <see cref="T:System.String"/> that was returned.</returns>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <exception cref="T:System.ArgumentNullException">An argument was <c>null</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetWatchedStringsAttribute(System.String)">
            <summary>
            Gets an attribute containing an array of strings.
            This method can get values of the attributes that are currently being watched.
            If this method is used to get a unwatched-attribute it will result in a NotCachedException.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <returns>The <see cref="T:System.String"/> array that was returned.</returns>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <exception cref="T:System.ArgumentNullException">An argument was <c>null</c>.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetDateTimeAttribute(System.String)">
            <summary>
            Gets the value of an attribute as a System.DateTime.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>The System.DateTime value.</returns>
            <remarks>
            This method will return the value from the cache, if the attribute is cached.
            If the attribute is not being cached, it will send a request to the server and get the attribute.
            </remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The interaction is not being watched.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetDateTimeAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.DateTime}},System.Object)">
            <summary>
            Asynchronously gets the value of an attribute as a System.DateTime.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>
            <para>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</para>
            <para>
            This method will return the value from the cache, if the attribute is cached.
            If the attribute is not being cached, it will send a request to the server and get the attribute.
            </para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetWatchedDateTimeAttribute(System.String)">
            <summary>
            Gets a DateTime attribute.
            This method can get values of the attributes that are currently being watched.
            If this method is used to get a unwatched-attribute it will result in a NotCachedException.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <returns>The <see cref="T:System.DateTime"/> that was returned.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetBooleanAttribute(System.String)">
            <summary>
            Gets the value of an attribute as a Boolean.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>The Boolean value.</returns>
            <remarks>
            This method will return the value from the cache, if the attribute is cached.
            If the attribute is not being cached, it will send a request to the server and get the attribute.
            </remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The interaction is not being watched.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetBooleanAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.Boolean}},System.Object)">
            <summary>
            Asynchronously gets the value of an attribute as a Boolean.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>
            <para>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</para>
            <para>
            This method will return the value from the cache, if the attribute is cached.
            If the attribute is not being cached, it will send a request to the server and get the attribute.
            </para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetWatchedBooleanAttribute(System.String)">
            <summary>
            Gets a bool attribute.
            </summary>
            <remarks>
            This method can get values of the attributes that are currently being watched.
            If this method is used to get an unwatched attribute it will result in a NotCachedException.
            </remarks>
            <param name="attributeName">The attribute name.</param>
            <returns>The <see cref="T:System.Boolean"/> that was returned.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetIntegerAttribute(System.String)">
            <summary>
            Gets the value of an attribute as a Integer.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>The Integer value.</returns>
            <remarks>
            This method will return the value from the cache, if the attribute is cached.
            If the attribute is not being cached, it will send a request to the server and get the attribute.
            </remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The interaction is not being watched.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetIntegerAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.Int32}},System.Object)">
            <summary>
            Asynchronously gets the value of an attribute as a Integer.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>
            <para>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</para>
            <para>
            This method will return the value from the cache, if the attribute is cached.
            If the attribute is not being cached, it will send a request to the server and get the attribute.
            </para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.GetWatchedIntegerAttribute(System.String)">
            <summary>
            Gets an integer attribute.
            </summary>
            <remarks>
            This method can get values of the attributes that are currently being watched.
            If this method is used to get an unwatched attribute it will result in a NotCachedException.
            </remarks>
            <param name="attributeName">The attribute name.</param>
            <returns>The <see cref="T:System.Int32"/> that was returned.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetStringAttribute(System.String,System.String)">
            <summary>
            Sets the value of a string attribute.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <param name="attributeValue">The attribute value.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetStringAttributeAsync(System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sets the value of a string attribute.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <param name="attributeValue">The attribute value.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetDateTimeAttribute(System.String,System.DateTime)">
            <summary>
            Sets the value of a string attribute.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <param name="attributeValue">The attribute value.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.SetDateTimeAttributeAsync(System.String,System.DateTime,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sets the value of a string attribute.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <param name="attributeValue">The attribute value.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.AppendStringAttribute(System.String,System.String,System.String)">
            <summary>
            Sets the value of a string attribute.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <param name="appendedValue">The value to append.</param>
            <param name="delimiter">The string used to separate appeneded values.  If <c>delimiter</c> is <c>null</c>
            the default delimiter of "|" will be used.  Use <c>String.Empty</c> to specify that no delimter is to be used.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.AppendStringAttributeAsync(System.String,System.String,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sets the value of a string attribute.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <param name="appendedValue">The value to append.</param>
            <param name="delimiter">The string used to separate appeneded values.  If <c>delimiter</c> is <c>null</c>
            the default delimiter of "|" will be used.  Use <c>String.Empty</c> to specify that no delimter is to be used.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.DisconnectImpl">
            <summary>
            These values are used to tell session manager how to deal with set attribute operation.  This currently
            only applies to AppendStringAttribute and SetStringAttribute.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Disconnect">
            <summary>
            Disconnects this <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.DisconnectAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously disconnects this <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Pickup">
            <summary>
            Picks up this <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.PickupAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously picks up this <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.BlindTransfer(System.String)">
            <summary>
            Performs a blind transfer to the specified number.
            </summary>
            <param name="target">The number to which to transfer.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.BlindTransferAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously performs a blind transfer to the specified number.
            </summary>
            <param name="target">The number to which to transfer.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ConsultTransfer(ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Performs a consult transfer with the specified interaction.
            </summary>
            <param name="consultId">The interaction to consult with.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException">The <c>Session</c> has been disposed.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ConsultTransferAsync(ININ.IceLib.Interactions.InteractionId,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously performs a consult transfer with the specified interaction.
            </summary>
            <param name="consultId">The interaction to consult with.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.TransferToVoicemail(System.String)">
            <summary>
            Transfers to voicemail at the specified number.
            </summary>
            <param name="target">The number to which to transfer.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.TransferToVoicemailAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously transfers to voicemail at the specified number.
            </summary>
            <param name="target">The number to which to transfer.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Park(System.String)">
            <summary>
            Parks the <see cref="T:ININ.IceLib.Interactions.Interaction"/> on the specified target.
            </summary>
            <param name="target">The number to which to transfer.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.ResourceInUseException">Attempt to park to orbit queue failed because the Orbit was already in use.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ParkAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously parks the <see cref="T:ININ.IceLib.Interactions.Interaction"/> on the specified target.
            </summary>
            <param name="target">The number to which to transfer.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Listen(System.Boolean,System.Boolean)">
            <summary>
            Changes the listen.
            </summary>
            <param name="on">If set to <c>true</c>, on.</param>
            <param name="supervisor">If set to <c>true</c>, supervisory.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.ListenAsync(System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes the listen.
            </summary>
            <param name="on">If set to <c>true</c>, on.</param>
            <param name="supervisor">If set to <c>true</c>, supervisory.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Coach(System.Boolean,System.Boolean)">
            <summary>
            Changes the coaching.
            </summary>
            <param name="on">If set to <c>true</c>, on.</param>
            <param name="supervisor">If set to <c>true</c>, supervisory.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.CoachAsync(System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes the coaching.
            </summary>
            <param name="on">If set to <c>true</c>, on.</param>
            <param name="supervisor">If set to <c>true</c>, supervisory.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Hold(System.Boolean)">
            <summary>
            Changes the held state.
            </summary>
            <param name="on">If set to <c>true</c>, on.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.HoldAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes the held state.
            </summary>
            <param name="on">If set to <c>true</c>, on.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Mute(System.Boolean)">
            <summary>
            Changes the mute state.
            </summary>
            <param name="on">If set to <c>true</c>, on.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.MuteAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes the mute state.
            </summary>
            <param name="on">If set to <c>true</c>, on.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Pause(System.Boolean)">
            <summary>
            Changes the recording pause state.
            </summary>
            <param name="on">If set to <c>true</c>, on.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.PauseAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes the recording pause state.
            </summary>
            <param name="on">If set to <c>true</c>, on.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Private(System.Boolean)">
            <summary>
            Changes the private state.
            </summary>
            <param name="on">If set to <c>true</c>, on.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.PrivateAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes the private state.
            </summary>
            <param name="on">If set to <c>true</c>, on.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Record(System.Boolean,System.Boolean)">
            <summary>
            Changes the record state.
            </summary>
            <param name="on">If set to <c>true</c>, on.</param>
            <param name="supervisor">If set to <c>true</c>, supervisory.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.RecordAsync(System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes the record state.
            </summary>
            <param name="on">If set to <c>true</c>, on.</param>
            <param name="supervisor">If set to <c>true</c>, supervisory.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Voicemail">
            <summary>
            Sends the <see cref="T:ININ.IceLib.Interactions.Interaction"/> to voicemail.
            </summary>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.VoicemailAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends the <see cref="T:ININ.IceLib.Interactions.Interaction"/> to voicemail.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.Join">
            <summary>
            Joins this <see cref="T:ININ.IceLib.Interactions.Interaction"/> in a conference.
            </summary>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.JoinAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously joins this <see cref="T:ININ.IceLib.Interactions.Interaction"/> in a conference.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.RequestHelp(System.String)">
            <summary>
            Sends a request for help.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.Interaction.RequestHelpAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends a request for help.
            </summary>
            <param name="message">The message.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.InteractionsManager">
            <summary>
            Gets the InteractionManager with which this Interaction is associated.
            </summary>
            <value>The interactions manager.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.InteractionId">
            <summary>
            Gets the ID of the Interaction.
            </summary>
            <value>The interaction ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.IsShared">
            <summary>
            Gets a value indicating whether this is a shared instance.
            </summary>
            <value><c>true</c> if this is a shared instance; otherwise, <c>false</c>.</value>
            <remarks>
            <para>IceLib automatically conserves memory by maintaining a shared instance of each unique Interaction that it creates internally.</para>
            <para>A shared instance cannot be watched. This prevents the assignment of conflicting sets of watched attributes. To watch this Interaction, create a new instance using the InteractionId.</para>
            </remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.Interaction.AttributesChanged">
            <summary>
            Occurs when an Interaction's watched attributes change.
            </summary>
        </member>
        <member name="E:ININ.IceLib.Interactions.Interaction.Deallocated">
            <summary>
            Occurs when an Interaction is deallocated.
            </summary>
        </member>
        <member name="E:ININ.IceLib.Interactions.Interaction.LostRights">
            <summary>
            Occurs when the User loses rights for the Interaction.
            </summary>
        </member>
        <member name="E:ININ.IceLib.Interactions.Interaction.Morphed">
            <summary>
            Occurs when an Interaction is replaced by another (e.g. during a Consult operation).
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.IsConnected">
            <summary>
            Gets a value indicating whether the Interaction is in a connected state.
            </summary>
            <value>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
            <remarks>
            It is considered connected if its in Connected, Messaging, or System.
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.IsDisconnected">
            <summary>
            Gets a value indicating whether the Interaction is in a disconnected state.
            </summary>
            <value>
            	<c>true</c> if this instance is disconnected; otherwise, <c>false</c>.
            </value>
            <remarks>
            Looks for External or Internal disconnect state.
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.Capabilities">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Capabilities"/>.
            </summary>
            <value>The capabilities.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.ConferenceId">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.ConferenceId"/>.
            </summary>
            <value>The conference ID, or a null reference (Nothing in Visual Basic).</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.InitiationTime">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.InitiationTime"/>.
            </summary>
            <value>The initiation time.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.DisconnectionTime">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.DisconnectionTime"/>.
            </summary>
            <value>The disconnection time.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.Duration">
            <summary>
            Gets the duration of the Interaction as of the current time (using <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.InitiationTime"/> and <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.DisconnectionTime"/>).
            </summary>
            <value>The duration.</value>
            <remarks>
            This is a helper that returns the duration from the InitiationTime until either the DisconnectionTime (if disconnected)
            or the current time (if connected).
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.DeallocationTime">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.DeallocationTime"/>.
            </summary>
            <value>The deallocation time.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.LineName">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.LineQueueName">name of the line queue</see>.
            </summary>
            <value>The unscoped name of the line queue.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.IsMuted">
            <summary>
            Gets a value indicating whether this instance is <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Muted"/>.
            </summary>
            <value><c>true</c> if this instance is muted; otherwise, <c>false</c>.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.IsHeld">
            <summary>
            Gets a value indicating whether this instance is <see cref="F:ININ.IceLib.Interactions.InteractionState.Held"/>.
            </summary>
            <value><c>true</c> if this instance is held; otherwise, <c>false</c>.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.IsRecording">
            <summary>
            Gets a value indicating whether this instance is being recorded by the session user.
            </summary>
            <value>
            	<c>true</c> if this instance is being recorded; otherwise, <c>false</c>.
            </value>
            <remarks>
            Requires both <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Recorders"/> and <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.SupervisorRecorders"/>.
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">An associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.IsPaused">
            <summary>
            Gets a value indicating whether this instance has a paused recorder for the session user.
            </summary>
            <value><c>true</c> if this instance is paused; otherwise, <c>false</c>.</value>
            <remarks>
            Requires both <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Recorders"/> and <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.SupervisorRecorders"/>.
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">An associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.IsMonitored">
            <summary>
            Gets a value indicating whether this instance is being monitored by the session user.
            </summary>
            <value>
            	<c>true</c> if this interaction is monitored; otherwise, <c>false</c>.
            </value>
            <remarks>
            Requires both <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Monitors"/> and <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.SupervisorMonitors"/>.
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">An associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.IsPrivate">
            <summary>
            Gets a value indicating whether this instance is <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Private"/>.
            </summary>
            <value><c>true</c> if this instance is private; otherwise, <c>false</c>.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.RemoteAddress">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteAddress"/>.
            </summary>
            <value>The remote address.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.RemoteId">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteId">remote party ID</see> as a friendly display value.
            </summary>
            <value>The remote ID.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.RemoteName">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteName">name of the remote party</see>.
            </summary>
            <value>The name of the remote.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.RemoteDisplay">
            <summary>
            Gets a displayable indentifer for an interaction.
            </summary>
            <value>The <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteName"/> if populated, otherwise the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteId"/>.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.StationQueueNames">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.StationQueueNames">unscoped name(s) of the station queue(s)</see>.
            </summary>
            <value>The unscoped name(s) of the station queue(s).</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.UserQueueNames">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.UserQueueNames">unscoped name(s) of the user queue(s)</see>.
            </summary>
            <value>The unscoped name(s) of the user queue(s).</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.IsOnMyInteractionsQueue">
            <summary>
            Gets a value indicating whether this instance is on the MyInteractions queue.
            </summary>
            <value>
            	<c>true</c> if this instance is on the MyInteractions queue; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attributes are not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.WorkgroupQueueDisplayName">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.WorkgroupQueueDisplayName">display name of the workgroup queue</see>.
            </summary>
            <value>The display name of the workgroup queue.</value>
            <remarks>
            <para>This can be assigned via handlers to be different than the actual workgroup name.
            The associated attribute to set from handlers is 'Eic_AssignedWorkgroup'.</para>
            <para>This can allow client applications to display a more "friendly name" to the end user,
            by making the desired handler customization and using the WorkgroupQueueDisplayName attribute
            for display purposes.</para>
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.WorkgroupQueueName">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.WorkgroupQueueName">unscoped name of the workgroup queue</see>.
            </summary>
            <value>The unscoped name of the workgroup queue.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.Notes">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Notes"/>.
            </summary>
            <value>The notes.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.Log">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Log"/>.
            </summary>
            <value>The log.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.StateDescription">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.StateDescription">state display string</see>.
            </summary>
            <value>The state display string.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.State">
            <summary>
            Gets the Interaction <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.State"/>.
            </summary>
            <value>The state.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.Direction">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Direction"/>.
            </summary>
            <value>The direction.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.Monitors">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Monitors"/>.
            </summary>
            <value>The monitors.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.SupervisorMonitors">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.SupervisorMonitors"/>.
            </summary>
            <value>The supervisor monitors.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.MonitorsCombinedCount">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.MonitorsCombinedCount"/>.
            </summary>
            <value>The monitors combined count.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.Recorders">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.Recorders"/>.
            </summary>
            <value>The recorders.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.SupervisorRecorders">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.SupervisorRecorders"/>.
            </summary>
            <value>The supervisor recorders.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.RecordersCombinedCount">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.RecordersCombinedCount"/>.
            </summary>
            <value>The recorders combined count.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.InteractionType">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.InteractionType">type of the interaction</see>.
            </summary>
            <value>The type of the interaction.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.MonitorType">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.MonitorType">type of the monitor</see>.
            </summary>
            <value>The type of the monitor.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.DisconnectRingNoAnswer">
            <summary>
            Gets a value indicating whether to <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.DisconnectRingNoAnswer">disconnect on ring no answer</see>.
            </summary>
            <value>
            	<c>true</c> if to disconnect on ring no answer; otherwise, <c>false</c>.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.ClientMessage">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.ClientMessage"/>.
            </summary>
            <value>The client message.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.AlertSound">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.AlertSound"/>.
            </summary>
            <value>The alert sound.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.CallIdKey">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.CallIdKey"/>.
            </summary>
            <value>The call ID key. IC generates unique IDs for each interaction in the system. These identifiers are called "Call ID" 
            in Interaction Client, and they are modified and stored in the IC database as unique "CallIDKey" in the 
            "Call ID" column. These identifiers apply to all interaction types, not just calls. The CallID is 
            embedded in the CallIDKey. CallIDKey is the 10 digit CallId plus an eight digit date in this format:  
            YYYYMMDD.  For example, a call placed on April 9, 2004 might show a Call ID of 2101990183 on Interaction
            Client.  The resulting CallIDKey stored in the database would be that CallID plus the date: 
            210199018320040409.
            </value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.PopApplication">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.PopApplication">application that should be popped</see> for the Interaction.
            </summary>
            <value>The pop application.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.ImmediateAccess">
            <summary>
            Gets a value indicating whether to allow <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.ImmediateAccess"/>.
            </summary>
            <value><c>true</c> if immediate access allowed; otherwise, <c>false</c>.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.OrbitQueueName">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.OrbitQueueName">unscoped orbit queue name</see>.
            </summary>
            <value>The unscoped name of the orbit queue.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.AccountCodeId">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.AccountCodeId">Id of the account code</see>.
            </summary>
            <value>The account code ID.</value>
            <remarks><i>Account codes</i> are used in IC to associate calls with accounts. An account 
            code is a number assigned to an account name. Account codes are mapped to incoming and 
            outgoing calls for reporting purposes. For example, Interaction Client users can assign 
            account codes to incoming and outgoing calls from the Interactions page, or from any queue.
            <para>Users who have been given access to an account code can assign it to a call so it can 
            be tracked. Account codes can also be used to track outgoing calls made to specific customers, 
            or to track incoming call information for billing purposes.</para>
            <para>For more information about Account Codes, refer to the topic titled <i>Account Codes in IC</i> in 
            the <i>Technical Reference Documents</i> section of the <i>IC Documentation library</i> on your 
            server.<br/><br/></para>
            
            <note>The account code ID can be used with an ININ.IceLib.People.AccountCode.</note>
            </remarks>
            
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.Interaction.WrapUpCodeId">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.WrapUpCodeId">ID of the wrap up code</see>.
            </summary>
            <value>The wrap up code ID.</value>
            <remarks>The ID can be used with an ININ.IceLib.People.WrapUpCode.</remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionAttributeName">
            <summary>
            Specifies attribute names that can be used with Interactions.
            </summary>
            <doccompleted/>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.Capabilities">
            <summary>The capabilities of the <see cref="T:ININ.IceLib.Interactions.Interaction"/>.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.ConferenceId">
            <summary>The <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.InteractionId"/> of the associated ConferenceInteraction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.InitiationTime">
            <summary>The time when the interaction was initiated.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.DisconnectionTime">
            <summary>The time when the interaction was disconnected.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.DeallocationTime">
            <summary>The time when the interaction was deallocated.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.InteractionId">
            <summary>The <see cref="F:ININ.IceLib.Interactions.InteractionAttributeName.InteractionId"/> of the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.LineQueueName">
            <summary>The unscoped name of the line queue on which the interaction is occurring.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.Muted">
            <summary>Whether the interaction is muted.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.Private">
            <summary>Whether the interaction is marked as private.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteAddress">
            <summary>The remote address.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteId">
            <summary>The ID of the remote party.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.RemoteName">
            <summary>The name of the remote party.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.StationQueueNames">
            <summary>The name(s) of the station queue(s).</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.UserQueueNames">
            <summary>The unscoped names of the user queue(s).</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.WorkgroupQueueDisplayName">
            <summary>The display name of the workgroup queue.</summary>
            <remarks>
            <para>This can be assigned via handlers to be different than the actual workgroup name.
            The associated attribute to set from handlers is 'Eic_AssignedWorkgroup'.</para>
            <para>This can allow client applications to display a more "friendly name" to the end user,
            by making the desired handler customization and using the WorkgroupQueueDisplayName attribute
            for display purposes.</para>
            </remarks>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.WorkgroupQueueName">
            <summary>The unscoped name of the workgroup queue.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.Notes">
            <summary>The notes associated with the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.Log">
            <summary>The log associated with the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.StateDescription">
            <summary>The interaction state description.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.State">
            <summary>The interaction state.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.Direction">
            <summary>The direction of the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.Monitors">
            <summary>The monitors on the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.SupervisorMonitors">
            <summary>The supervisory monitors on the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.MonitorsCombinedCount">
            <summary>The total number of monitors.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.Recorders">
            <summary>The recorders of the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.SupervisorRecorders">
            <summary>The supervisory recorders of the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.RecordersCombinedCount">
            <summary>The total number of recorders.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.InteractionType">
            <summary>The type of interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.MonitorType">
            <summary>The type of monitor on the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.DisconnectRingNoAnswer">
            <summary>Whether to disconnect on ring no answer.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.ClientMessage">
            <summary>The client message to display.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.AlertSound">
            <summary>The sound to play when the interaction is alerting.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.CallIdKey">
            <summary>The call ID key of the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.PopApplication">
            <summary>The application that should be popped for the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.ImmediateAccess">
            <summary>Whether to allow immediate access to the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.OrbitQueueName">
            <summary>The unscoped name of the orbit queue containing the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.AccountCodeId">
            <summary>The ID of the account code associated with the interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAttributeName.WrapUpCodeId">
            <summary>The ID of the wrap up code associated with the interaction.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.ChatInteractionAttributeName">
            <summary>
            Specifies attribute names that can be used with ChatInteractions.
            </summary>
            <doccompleted/>
        </member>
        <member name="F:ININ.IceLib.Interactions.ChatInteractionAttributeName.ParentConferenceId">
            <summary>The ID the conference from which a sidebar chat was created.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.CallbackInteractionAttributeName">
            <summary>
            Specifies attribute names that can be used with CallbackInteractions.
            </summary>
            <doccompleted/>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallbackInteractionAttributeName.CallbackPhone">
            <summary>The phone number to callback.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallbackInteractionAttributeName.CallbackMessage">
            <summary>The callback message.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallbackInteractionAttributeName.CallbackCompletion">
            <summary>The callback completion.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.MonitorInteractionAttributeName">
            <summary>
            Specifies attribute names that can be used with the MonitorInteractions class.
            </summary>
            <doccompleted/>
        </member>
        <member name="F:ININ.IceLib.Interactions.MonitorInteractionAttributeName.MonitoredInteractionId">
            <summary>The monitored interaction ID.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.MonitorInteractionAttributeName.MonitoredInteractionType">
            <summary>The type of monitored interaction.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.RecorderInteractionAttributeName">
            <summary>
            Specifies attribute names that can be used with RecorderInteractions.
            </summary>
            <doccompleted/>
        </member>
        <member name="F:ININ.IceLib.Interactions.RecorderInteractionAttributeName.RecordedInteractionId">
            <summary>The recorded interaction ID.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.RecorderInteractionAttributeName.RecordedInteractionType">
            <summary>The type of recorded interaction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.RecorderInteractionAttributeName.RecordedFileName">
            <summary>The recorded file.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionMonitorType">
            <summary>
            Specifies constants indicating the type of an Interaction monitor.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionMonitorType.None">
            <summary>The Interaction is not being monitored.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionMonitorType.Coach">
            <summary>The Interaction monitor is a coach. Coaching is typically performed by supervisors 
            who provide advice to an agent without the customer knowing that anyone is assisting on the 
            interaction. The agent can hear the coach, but the customer cannot.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionMonitorType.Monitor">
            <summary>The Interaction monitor is a normal monitor, meaning that the queue object is being 
            listened to or examined by someone who is not coaching or interacting with the agent.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionMonitor">
            <summary>
            Represents a monitoring on an <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <remarks>Interactions sent to an agent, station, workgroup, or line queue, can be monitored. 
            You must have security rights to view any queues other than your own.</remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionMonitor.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionMonitor.User">
            <summary>
            Gets the user.
            </summary>
            <value>The user.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionMonitor.MonitorType">
            <summary>
            Gets the type of the monitor.
            </summary>
            <value>The type of the monitor.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionRecord">
            <summary>
            Represents a recording of an <see cref="T:ININ.IceLib.Interactions.Interaction"/>.
            </summary>
            <remarks>Objects of this class are used in a list of recorders for a given interaction.</remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionRecord.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionRecord.User">
            <summary>
            Gets the user.
            </summary>
            <value>The user name.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionRecord.Paused">
            <summary>
            Gets a value indicating whether this <see cref="T:ININ.IceLib.Interactions.InteractionRecord"/> is paused.
            </summary>
            <value>The property is <c>true</c> if the <see cref="T:ININ.IceLib.Interactions.InteractionRecord"/> is paused; otherwise, it is <c>false</c>.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.CallInteraction">
            <summary>
            Represents a call within the Interaction Center system.
            </summary>
            <remarks>This class provides the ability to play digits, play audio, and stop all audio for the call interaction.
            <para><list type="bullet">
            <item>To play digits, call the <see cref="M:ININ.IceLib.Interactions.CallInteraction.PlayDigits(System.String)"/> or <see cref="M:ININ.IceLib.Interactions.CallInteraction.PlayDigitsAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods. When the asynchronous play digits
            operation completes, it invokes the <c>completedCallback</c> delegate.<br/><br/></item>
            <item>To play audio, call the <see cref="M:ININ.IceLib.Interactions.CallInteraction.PlayWaveAudio(System.String,System.Boolean,System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.CallInteraction.PlayWaveAudioAsync(System.String,System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods. When the asynchronous play
            audio operation completes, it invokes the <c>completedCallback</c> delegate.<br/><br/></item>
            </list></para>
            <note>The asynchronous methods are preferred since the above operations can be lengthy.</note>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteraction.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CallInteraction"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="interactionId">The interaction ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteraction.PlayDigits(System.String)">
            <summary>
            Plays the digits to the <see cref="T:ININ.IceLib.Interactions.CallInteraction"/>.
            </summary>
            <param name="digits">The digits.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteraction.PlayDigitsAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously plays the digits to the <see cref="T:ININ.IceLib.Interactions.CallInteraction"/>.
            </summary>
            <param name="digits">The digits.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteraction.PlayWaveAudio(System.String,System.Boolean,System.Boolean)">
            <summary>
            Plays a server-located WAV file into the call.  This request will end when the audio has completed playing.
            </summary>
            <param name="fileName">The name of a WAV file to play. If this file is located locally, this must be the full path to the file. 
            If it is located remotely, this must be the result of calling <see cref="M:ININ.IceLib.Connection.RemoteFileHelper.NewRemoteFileName(ININ.IceLib.Connection.ServerFileType)"/>.</param>
            <param name="isRemoteFile">Whether the specified file is located locally (and needs to be uploaded) or is located on the server.</param>
            <param name="enableDigits"><c>true</c> to enable playing of digits into the call to skip forward and backwards, <c>false</c> to ignore digits.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteraction.PlayWaveAudioAsync(System.String,System.Boolean,System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously plays a server-located WAV file into the call.  This request will end when the audio has completed playing.
            </summary>
            <param name="fileName">The name of a WAV file to play. If this file is located locally, this must be the full path to the file.
            If it is located remotely, this must be the result of calling <see cref="M:ININ.IceLib.Connection.RemoteFileHelper.NewRemoteFileName(ININ.IceLib.Connection.ServerFileType)"/>.</param>
            <param name="isRemoteFile">Whether the specified file is located locally (and needs to be uploaded) or is located on the server.</param>
            <param name="enableDigits"><c>true</c> to enable playing of digits into the call to skip forward and backwards, <c>false</c> to ignore digits.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteraction.StopAllWaveAudio">
            <summary>
            Stops all wave audio playback on this call.
            </summary>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteraction.StopAllWaveAudioAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops all wave audio playback on this call.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.CallInteraction.PlayWaveAudioComplete">
            <summary>
            Occurs when audio played by PlayWaveAudio is completed.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.CallbackCompletion">
            <summary>
            Specifies constants indicating the completion of a <see cref="T:ININ.IceLib.Interactions.CallbackInteraction"/>.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallbackCompletion.None">
            <summary>The completion has not been assigned.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallbackCompletion.Success">
            <summary>The callback succeeded.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallbackCompletion.Failure">
            <summary>The callback failed.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.CallbackInteraction">
            <summary>
            Represents a callback interaction within the Interaction Center system. Callback interactions occur when agents call a customer
            in accordance with a callback request.</summary>
            <remarks>To set a callback request to completed, call either the <see cref="M:ININ.IceLib.Interactions.CallbackInteraction.SetCompletion(System.Boolean)"/> or the <see cref="M:ININ.IceLib.Interactions.CallbackInteraction.SetCompletionAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods and provide
            a boolean to indicate success or failure. When the asynchronous method returns it invokes the <c>completedCallback</c> delegate.
            <para>Calling properties on this object without a watch in place raises the <see cref="T:ININ.IceLib.NotCachedException"/>.<br/><br/></para>
            <note>The asynchronous methods are preferred since the stop completion task can be lengthy.</note>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallbackInteraction.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CallbackInteraction"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="interactionId">The interaction ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallbackInteraction.SetCompletion(System.Boolean)">
            <summary>
            Sets the callback completion.
            </summary>
            <param name="completion">If set to <c>true</c> completed successfully.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallbackInteraction.SetCompletionAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sets the callback completion.
            </summary>
            <param name="completion">If set to <c>true</c> completed successfully.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallbackInteraction.CallbackPhone">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.CallbackInteractionAttributeName.CallbackPhone">callback phone number</see>.
            </summary>
            <value>The callback phone number.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallbackInteraction.CallbackMessage">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.CallbackInteractionAttributeName.CallbackMessage">callback message</see>.
            </summary>
            <value>The callback message.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallbackInteraction.CallbackCompletion">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.CallbackInteractionAttributeName.CallbackMessage">callback completion</see>.
            </summary>
            <value>The callback completion.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.ChatMemberType">
            <summary>
            Specifies constants indicating the whether a ChatMember is internal or external.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.ChatMemberType.None">
            <summary>There is no chat member type available.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.ChatMemberType.SystemMember">
            <summary>The SystemMember.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.ChatMemberType.ChatInteraction">
            <summary>The chat member associated with the ChatInteraction.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.ChatMemberType.Internal">
            <summary>The chat member is internal.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.ChatMemberType.External">
            <summary>The chat member is external.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.ChatMember">
            <summary>Represents a member (person participating) in a <see cref="T:ININ.IceLib.Interactions.ChatInteraction"/>.</summary>
            <remarks>Chat interactions in IC allow users to send and receive text, files, or URLs. Chat members 
            have a type (usually internal or external), a display name, an associated interaction id, and a typing indicator. 
            There is also an explicit "System Member" that represents the IC system chat text.
            </remarks>
            <doccompleted/>
        </member>
        <member name="F:ININ.IceLib.Interactions.ChatMember.SystemMember">
            <summary>
            Represents the Chat System as a member.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatMember.#ctor(ININ.IceLib.Interactions.InteractionId,System.String,ININ.IceLib.Interactions.ChatMemberType)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ChatMember"/> class.
            </summary>
            <param name="interactionId">The interaction ID of the member.</param>
            <param name="displayName">Display name of the member.</param>
            <param name="chatMemberType">Type of the chat member.</param>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatMember.InteractionId">
            <summary>
            Gets the interaction ID of the member.
            </summary>
            <value>The interaction ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatMember.DisplayName">
            <summary>
            Gets the display name of the member.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatMember.ChatMemberType">
            <summary>
            Gets the type of the chat member.
            </summary>
            <value>The type of the chat member.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatMember.IsTyping">
            <summary>
            Gets a value indicating whether this <see cref="T:ININ.IceLib.Interactions.ChatMember"/> is typing.
            </summary>
            <value><c>true</c> if typing; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.ChatText">
            <summary>
            Represents a single chat entry in a <see cref="T:ININ.IceLib.Interactions.ChatInteraction"/>. 
            </summary>
            <remarks>The Text property of the ChatText object contains the text of a single entry in the chat history. 
            To get all entries exchanged in the course of the chat, call the <see cref="M:ININ.IceLib.Interactions.ChatInteraction.GetHistory"/> method of the ChatInteraction 
            class. It returns a read-only collection of ChatText objects.
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatText.#ctor(ININ.IceLib.Interactions.ChatMember,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ChatText"/> class.
            </summary>
            <param name="chatMember">The chat member.</param>
            <param name="text">The text.</param>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatText.ChatMember">
            <summary>
            Gets the chat member.
            </summary>
            <value>The chat member.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatText.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.ChatMemberEventArgs">
            <summary>
            Provides data for the ChatMemberAdded/Changed/Removed events of a <see cref="T:ININ.IceLib.Interactions.ChatInteraction"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatMemberEventArgs.#ctor(ININ.IceLib.Interactions.ChatMember)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ChatMemberEventArgs"/> class with the specified values.
            </summary>
            <param name="chatMember">The chat member.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatMemberEventArgs.ChatMember">
            <summary>
            Gets the ChatMember associated with the change.
            </summary>
            <value>The chat member.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.ChatUpdateEventArgs">
            <summary>
            Provides data for the ChatMemberAdded/Removed events of a <see cref="T:ININ.IceLib.Interactions.ChatInteraction"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatUpdateEventArgs.#ctor(ININ.IceLib.Interactions.ChatMember)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ChatUpdateEventArgs"/> class with the specified values.
            </summary>
            <param name="chatMember">The chat member.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatUpdateEventArgs.ChatMember">
            <summary>
            Gets the ChatMember associated with the change.
            </summary>
            <value>The chat member.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatUpdateEventArgs.Text">
            <summary>
            Gets the Text associated with the change (if any).
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ChatUpdateEventArgs.Url">
            <summary>
            Gets the Url associated with the change (if any).
            </summary>
            <value>The URL.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.ChatInteraction">
             <summary>Represents a chat within the Interaction Center system.</summary>
             <remarks>Chat interactions allow users to interact by sending and receiving text, files, or URLs.
             <para>
             <list type="bullet">
             <item>To <b>start watching</b> a chat interaction call <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatching"/> or 
             <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous chat start watch completes it invokes the   
             <c>completedCallback</c> delegate.<br/><br/></item>
             <item>To <b>stop watching</b> a chat interaction call <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStopWatching"/> or 
             <see cref="M:ININ.IceLib.Interactions.ChatInteraction.ChatStopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous chat stop watch completes, it invokes the   
             <c>completedCallback</c> delegate.<br/><br/></item>
             <item>To <b>add members</b> to the chat call <see cref="M:ININ.IceLib.Interactions.ChatInteraction.AddMembers(ININ.IceLib.Interactions.InteractionId[])"/> or <see cref="M:ININ.IceLib.Interactions.ChatInteraction.AddMembersAsync(ININ.IceLib.Interactions.InteractionId[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> providing an 
             array of <see cref="T:ININ.IceLib.Interactions.InteractionId"/> for all members to add to this chat. When the asynchronous add members 
             operation completes it invokes the <c>completedCallback</c> delegate.<br/><br/></item>
            <item>To <b>set an indicator</b> to the members that a member is typing call the 
             <see cref="M:ININ.IceLib.Interactions.ChatInteraction.SetTypingIndicator(System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.ChatInteraction.SetTypingIndicatorAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> providing a flag 
             to indicate if the typing indicator is visible or not. When the asynchronous set typing indicator 
             operation completes it invokes the <c>completedCallback</c> delegate.<br/><br/></item> 
             <item>To <b>send text</b> to members of this chat, call the <see cref="M:ININ.IceLib.Interactions.ChatInteraction.SendText(System.String)"/> or 
             <see cref="M:ININ.IceLib.Interactions.ChatInteraction.SendTextAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods with the text to send. When the asynchronous send text 
             operation completes it invokes the <c>completedCallback</c> delegate.<br/><br/></item>
             <item>To <b>send a URL</b> to the chat members, call the <see cref="M:ININ.IceLib.Interactions.ChatInteraction.SendUrl(System.Uri)"/> or <see cref="M:ININ.IceLib.Interactions.ChatInteraction.SendUrlAsync(System.Uri,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> 
             methods. When the asynchronous send URL operation completes it invokes the <c>completedCallback</c> delegate.<br/><br/></item>
            <item>To <b>send a file</b> to chat members call <see cref="M:ININ.IceLib.Interactions.ChatInteraction.SendFile(System.String)"/> or <see cref="M:ININ.IceLib.Interactions.ChatInteraction.SendFileAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the 
             asynchronous send file operation completes it invokes the <c>completedCallback</c> delegate.<br/><br/></item>
             <item>Calling <i>ChatStartWatching</i> or <i>ChatStartWatchingAsync</i> when a watch is already
             in place, or calling <i>ChatStopWatching</i> or <i>ChatStartWatchingAsync</i> when a watch is 
             not in place raises an <see cref="T:System.InvalidOperationException"/>.<br/><br/></item> 
             </list>
             </para>
             <note>The asynchronous versions of the above methods are preferred since they can be lengthy operations.</note>
             </remarks>
             <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ChatInteraction"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="interactionId">The interaction ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.GetMembers">
            <summary>
            Gets the members.
            </summary>
            <returns>The <see cref="T:ININ.IceLib.Interactions.ChatMember"/> array.</returns>
            <exception cref="T:ININ.IceLib.NotCachedException">The interaction is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.GetHistory">
            <summary>
            Gets the chat history-returned in an array of ChatText objects.
            </summary>
            <returns>The <see cref="T:ININ.IceLib.Interactions.ChatText"/> array.</returns>
            <exception cref="T:ININ.IceLib.NotCachedException">The interaction is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.ChatIsWatching">
            <summary>
            Determines whether an chat watch is active.
            </summary>
            <returns>
            	<c>true</c> if an chat watch is active; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method determines whether an chat watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatching">
            <summary>
            Starts watching the chat interaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">The object is already being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.ChatStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously starts watching the chat interaction.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.ChatStopWatching">
            <summary>
            Stops watching the chats interaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.ChatStopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops watching the chats interaction.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.AddMembers(ININ.IceLib.Interactions.InteractionId[])">
            <summary>
            Adds interactions to the chat.
            </summary>
            <param name="interactionsToAdd">The interactions to add.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.AddMembersAsync(ININ.IceLib.Interactions.InteractionId[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously adds interactions to the chat.
            </summary>
            <param name="interactionsToAdd">The interactions to add.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.AddUsers(System.String[])">
            <summary>
            Adds users to the chat.
            </summary>
            <param name="userIdsToAdd">The users to add.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.AddUser(System.String)">
            <summary>
            Adds user to the chat.
            </summary>
            <param name="userIdToAdd">The user to add.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.AddUsersAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously adds users to the chat.
            </summary>
            <param name="userIdsToAdd">The users to add.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.AddUserAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously adds user to the chat.
            </summary>
            <param name="userIdToAdd">The user to add.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.SetTypingIndicator(System.Boolean)">
            <summary>
            Sets the typing indicator for the Session user.
            </summary>
            <param name="isTyping">If set to <c>true</c> user is typing.</param>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.SetTypingIndicatorAsync(System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sets the typing indicator for the Session user.
            </summary>
            <param name="isTyping">If set to <c>true</c> user is typing.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.SendText(System.String)">
            <summary>
            Sends text to the chat members.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.SendTextAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends text to the chat members.
            </summary>
            <param name="message">The message.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.SendUrl(System.Uri)">
            <summary>
            Sends a Url to the chat members.
            </summary>
            <param name="uri">The url to send.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.SendUrlAsync(System.Uri,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends a Url to the chat members.
            </summary>
            <param name="uri">The url to send.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.SendFile(System.String)">
            <summary>
            Sends a file to the chat members.
            </summary>
            <param name="path">The path of the file to send.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.ChatInteraction.SendFileAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends a file to the chat members.
            </summary>
            <param name="path">The path of the file to send.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.ChatInteraction.ChatMemberAdded">
            <summary>
            Occurs when a ChatMember is added to the ChatInteraction.
            </summary>
        </member>
        <member name="E:ININ.IceLib.Interactions.ChatInteraction.ChatMemberChanged">
            <summary>
            Occurs when a ChatMember's <see cref="P:ININ.IceLib.Interactions.ChatMember.DisplayName"/> property changes.
            </summary>
        </member>
        <member name="E:ININ.IceLib.Interactions.ChatInteraction.TypingChanged">
            <summary>
            Occurs when a ChatMember's <see cref="P:ININ.IceLib.Interactions.ChatMember.IsTyping"/> property changes.
            </summary>
        </member>
        <member name="E:ININ.IceLib.Interactions.ChatInteraction.ChatMemberRemoved">
            <summary>
            Occurs when an ChatMember is removed from the ChatInteraction.
            </summary>
        </member>
        <member name="E:ININ.IceLib.Interactions.ChatInteraction.TextAdded">
            <summary>
            Occurs when text is added to the chat.
            </summary>
        </member>
        <member name="E:ININ.IceLib.Interactions.ChatInteraction.UrlAdded">
            <summary>
            Occurs when a URL is added to the chat.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailInteraction">
            <summary>
            Represents an email within the Interaction Center system.
            </summary>
            <remarks>This class can be used to start and stop watches on an email interaction along with
            downloading, uploading, and deleting attachments, sending responses, and sending email messages.
            <para>To <b>start a watch</b>, call <see cref="M:ININ.IceLib.Interactions.EmailInteraction.EmailStartWatching"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.EmailStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When
            the email start watch operation completes it invokes the <c>completedCallback</c> delegate. To stop
            watching an email interaction call <see cref="M:ININ.IceLib.Interactions.EmailInteraction.EmailStopWatching"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.EmailStopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the email stop
            watch operation completes it invokes the <c>completedCallback</c> delegate.</para>
            <para>To <b>set an email response</b>, call <see cref="M:ININ.IceLib.Interactions.EmailInteraction.SetResponse(ININ.IceLib.Interactions.EmailResponse)"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.SetResponseAsync(ININ.IceLib.Interactions.EmailResponse,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> with an <see cref="T:ININ.IceLib.Interactions.EmailResponse"/> object.
            When the asynchonous set response operation completes it invokes the <c>completedCallback</c> delegate.</para>
            <para>To <b>download an email attachment</b> from the server call <see cref="M:ININ.IceLib.Interactions.EmailInteraction.DownloadAttachment(ININ.IceLib.Interactions.EmailAttachment,System.String)"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.DownloadAttachmentAsync(ININ.IceLib.Interactions.EmailAttachment,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> providing an
            <see cref="T:ININ.IceLib.Interactions.EmailAttachment"/> object and a local path to save the attachment. When the asynchronous download attachment operation
            completes it invokes the <c>completedCallback</c> delegate.</para>
            <para>To <b>upload an email attachment</b> to the server call <see cref="M:ININ.IceLib.Interactions.EmailInteraction.UploadAttachment(System.String)"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.UploadAttachmentAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> providing a file name
            of the attachment to upload. When the asynchronous upload operation completes it invokes the <c>completedCallback</c> delegate.</para>
            <para>To <b>remove an email attachment</b> call <see cref="M:ININ.IceLib.Interactions.EmailInteraction.RemoveAttachment(ININ.IceLib.Interactions.EmailAttachment)"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.RemoveAttachmentAsync(ININ.IceLib.Interactions.EmailAttachment,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> with an <see cref="T:ININ.IceLib.Interactions.EmailAttachment"/> object to
            be removed. When the asynchronous operation completes it invokes the <c>completedCallback</c> delegate.</para>
            <para>To <b>send an email</b>, call <see cref="M:ININ.IceLib.Interactions.EmailInteraction.SendEmail"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.SendEmailAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous send operation
            completes it invokes the <c>completedCallback</c> delegate.</para>
            <para>Calling <see cref="M:ININ.IceLib.Interactions.EmailInteraction.EmailStartWatching"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.EmailStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch is already in place, or calling
            <see cref="M:ININ.IceLib.Interactions.EmailInteraction.EmailStopWatching"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.EmailStopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch is not in place raises and <see cref="T:System.InvalidOperationException"/>.<br/><br/></para>
            <note>The asynchronous version of these methods is preferred since these operations can be lengthy.</note></remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="interactionId">The interaction ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.GetResponse">
            <summary>
            Gets a copy of the email response.
            </summary>
            <returns>The <see cref="T:ININ.IceLib.Interactions.EmailResponse"/>.</returns>
            <remarks>
            <para>This copy can be modified freely then passed to <see cref="M:ININ.IceLib.Interactions.EmailInteraction.SetResponse(ININ.IceLib.Interactions.EmailResponse)"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.SetResponseAsync(ININ.IceLib.Interactions.EmailResponse,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>.</para>
            <para>A call to <see cref="M:ININ.IceLib.Interactions.EmailInteraction.EmailStartWatching"/> or <see cref="M:ININ.IceLib.Interactions.EmailInteraction.EmailStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> is required to initialize the cache.</para>
            </remarks>
            <exception cref="T:ININ.IceLib.NotCachedException">The email is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.EmailIsWatching">
            <summary>
            Determines whether an email watch is active.
            </summary>
            <returns>
            	<c>true</c> if an email watch is active; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method determines whether an email watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.EmailStartWatching">
            <summary>
            Starts watching the email interaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">The email is already being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.EmailStartWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously starts watching the email interaction.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.EmailStopWatching">
            <summary>
            Stops watching the emails interaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">The email is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.EmailStopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops watching the emails interaction.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.SetResponse(ININ.IceLib.Interactions.EmailResponse)">
            <summary>
            Sets the email response.
            </summary>
            <param name="emailResponse">The email response.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.SetResponseAsync(ININ.IceLib.Interactions.EmailResponse,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sets the email response.
            </summary>
            <param name="emailResponse">The email response.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.DownloadAttachment(ININ.IceLib.Interactions.EmailAttachment,System.String)">
            <summary>
            Downloads an attachment into a specified file.
            </summary>
            <param name="emailAttachment">The EmailAttachment of this EmailResponse.</param>
            <param name="fileName">The path and name of a local file to save the attachment into.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The email is not being watched.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.DownloadAttachmentAsync(ININ.IceLib.Interactions.EmailAttachment,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously downloads an attachment into a specified file.
            </summary>
            <param name="emailAttachment">The EmailAttachment of this EmailResponse.</param>
            <param name="fileName">The path and name of a local file to save the attachment into.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.UploadAttachment(System.String)">
            <summary>
            Uploads an attachment from a local file to the current EmailResponse.
            </summary>
            <param name="fileName">The path and name of a local file to upload the attachment from.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.UploadAttachmentAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously uploads an attachment from a local file to the current EmailResponse.
            </summary>
            <param name="fileName">The path and name of a local file to upload the attachment from.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.RemoveAttachment(ININ.IceLib.Interactions.EmailAttachment)">
            <summary>
            Removes an attachment from the current EmailResponse.
            </summary>
            <param name="emailAttachment">The EmailAttachment of this EmailResponse.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The email is not being watched.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.RemoveAttachmentAsync(ININ.IceLib.Interactions.EmailAttachment,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously removes an attachment from the current EmailResponse.
            </summary>
            <param name="emailAttachment">The EmailAttachment of this EmailResponse.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.SendEmail">
            <summary>
            Sends the email.
            </summary>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailInteraction.SendEmailAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends the email.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.EmailInteraction.ResponseUpdated">
            <summary>
            Occurs when the email response changes.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailEncryptionStatus">
            <summary>
            Possible encryption status of an <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailEncryptionStatus.None">
            <summary>
            Message was not encrypted.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailEncryptionStatus.Ok">
            <summary>
            Message was successfully decrypted.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailEncryptionStatus.Denied">
            <summary>
            Decryption was denied by an xIC policy.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailEncryptionStatus.Failed">
            <summary>
            Decryption failed (private key not found, malformed S/MIME, etc.).
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailSignatureStatus">
            <summary>
            Possible status of an <see cref="P:ININ.IceLib.Interactions.EmailResponse.OriginalDigitalSignatures"/>.
            </summary>
            <remarks>
            Any flag being on would indicate that the signature has some errors.
            Please note that 'Unknown' has a value of 0xFF (255) - which has 7 bits on.
            </remarks>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailSignatureStatus.Unknown">
            <summary>
            Any sort of catastrophic failure (malformed S/MIME, internal error, etc.)
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailSignatureStatus.Ok">
            <summary>
            Signature does not show any known problems
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailSignatureStatus.MessageModified">
            <summary>
            The cryptographic hash does not match the message. Message was possibly tampered with in transit.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailSignatureStatus.CertificateNotTrusted">
            <summary>
            The signer's certificate is not trusted. This could be for various reasons:
              * One or more of the certificates in the chain is missing from the certificate store or is not trusted.
              * The signer's certificate has expired or is not yet valid.
              * The signer's certificate does not have Digital Signature or Email Protection (1.3.6.1.5.5.7.3.4) as a valid use.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.EmailSignatureStatus.EmailHeaderMismatch">
            <summary>
            The From: address in the email's header does not match the email address in the certificate.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailAttachment">
            <summary>
            Represents an attachment to a response for an <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailAttachment.#ctor(System.Boolean,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailAttachment"/> class.
            </summary>
            <param name="originalAttachment">If set to <c>true</c> this is an original attachment.</param>
            <param name="id">The ID.</param>
            <param name="name">The name of the attachment file.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailAttachment.Equals(System.Object)">
            <summary>
            The Equals method determines whether the specified System.Object is equal to the current EmailAttachment object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"></see>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailAttachment.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailAttachment.OriginalAttachment">
            <summary>
            Gets a value indicating whether this is an original attachment.
            </summary>
            <value><c>true</c> if an original attachment; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailAttachment.Id">
            <summary>
            Gets the ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailAttachment.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailEncryptionCertificate">
            <summary>
            Definition for EmailEncryptionCertificate class.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailEncryptionCertificate.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailEncryptionCertificate.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate handle is invalid.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailEncryptionCertificate.Status">
            <summary>
            Gets the encryption status.
            </summary>
            <value>The encryption status.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailEncryptionCertificate.Algorithm">
            <summary>
            Gets the encryption algorithm.
            </summary>
            <value>The encryption algorithm.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailEncryptionCertificate.Certificate">
            <summary>
            Gets the certificate.
            </summary>
            <value>The certificate.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate handle is invalid.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailSignatureCertificate">
            <summary>
            Definition for EmailSignatureCertificate class.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailSignatureCertificate.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailSignatureCertificate.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate handle is invalid.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailSignatureCertificate.Status">
            <summary>
            Gets the signature status.
            </summary>
            <value>The signature status.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailSignatureCertificate.Certificate">
            <summary>
            Gets the certificate.
            </summary>
            <value>The certificate.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The certificate handle is invalid.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailResponse">
            <summary>
            Represents a response for an <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.
            </summary>
            <remarks>This class contains all of the information about the response of an Email interaction
            such as subject, body, sender, To/CC/BCC recipients, and any attachments.</remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailResponse.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailResponse"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="interactionId">The interaction ID.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailResponse.Clone">
            <summary>
            Returns an exact copy of this <b>EmailResponse</b> object.
            </summary>
            <returns>A new EmailResponse object that is a copy of this instance.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailResponse.Equals(System.Object)">
            <summary>
            The Equals method determines whether the specified System.Object is equal to the current EmailResponse object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"></see>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailResponse.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailResponse.LoadFromXmlClass(ININ.IceLib.Internal.XmlEmailMessage)">
            <summary>
            Initializes the <see cref="T:ININ.IceLib.Interactions.EmailResponse"/> class using the specified XML class.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailResponse.SaveToXmlClass">
            <summary>
            Gets the XML class for the <see cref="T:ININ.IceLib.Interactions.EmailResponse"/> class.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailResponse.InteractionsManager">
            <summary>
            Gets the InteractionManager with which this Interaction is associated.
            </summary>
            <value>The interactions manager.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailResponse.InteractionId">
            <summary>
            Gets the ID of the Interaction.
            </summary>
            <value>The interaction ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailResponse.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>The subject.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailResponse.Body">
            <summary>
            Gets or sets the body of the Email message.
            </summary>
            <value>The body.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailResponse.Sender">
            <summary>
            Gets the sender.
            </summary>
            <value>The sender.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailResponse.ToRecipients">
            <summary>
            Gets the 'to' recipients.
            </summary>
            <value>The 'to' recipients.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailResponse.CcRecipients">
            <summary>
            Gets the 'cc' recipients.
            </summary>
            <value>The 'cc' recipients.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailResponse.BccRecipients">
            <summary>
            Gets the 'bcc' recipients.
            </summary>
            <value>The 'bcc' recipients.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailResponse.Attachments">
            <summary>
            Gets the attachments.
            </summary>
            <value>The attachments.</value>
            <remarks>
            To manage the attachments, use the <see cref="M:ININ.IceLib.Interactions.EmailInteraction.UploadAttachmentAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>
            and <see cref="M:ININ.IceLib.Interactions.EmailInteraction.RemoveAttachmentAsync(ININ.IceLib.Interactions.EmailAttachment,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods.
            </remarks>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailResponse.OriginalAttachments">
            <summary>
            Gets the original attachments.
            </summary>
            <value>The original attachments.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailResponse.OriginalEncryptionCertificate">
            <summary>
            Gets the original encryption certificate.
            </summary>
            <value>The original encryption certificate.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailResponse.OriginalDigitalSignatures">
            <summary>
            Gets the original digital signatures.
            </summary>
            <value>The original digital signatures.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailAddress">
            <summary>
            Represents a resolved Email address from an <see cref="T:ININ.IceLib.Interactions.EmailResolver"/>.
            </summary>
            <remarks>
            Email addresses contain the string address and the string containing the display name
            of the Email address.
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailAddress.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailAddress"/> class.
            </summary>
            <param name="address">The Email address.</param>
            <param name="displayName">Display name of the member.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailAddress.Equals(System.Object)">
            <summary>
            The Equals method determines whether the specified System.Object is equal to the current 
            EmailAddress object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current 
            <see cref="T:System.Object"></see>.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current 
            <see cref="T:System.Object"></see>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailAddress.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailAddress.Address">
            <summary>
            Gets the Email address.
            </summary>
            <value>The Email address.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailAddress.DisplayName">
            <summary>
            Gets the display name of the member.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailAddressesEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.Interactions.EmailResolver.EmailResolved"/> event.
            </summary>
            <remarks>
            When the <see cref="E:ININ.IceLib.Interactions.EmailResolver.EmailResolved"/> event is triggered the resolved email addresses are contained in objects
            of this class.</remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailAddressesEventArgs.#ctor(System.String,ININ.IceLib.Interactions.EmailAddress[])">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailAddressesEventArgs"/> class 
            with the specified values.
            </summary>
            <param name="addressSearch">The address search.</param>
            <param name="emailAddresses">The Email addresses.</param>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailAddressesEventArgs.AddressSearch">
            <summary>
            Gets the address search being resolved.
            </summary>
            <value>The address search.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailAddressesEventArgs.Results">
            <summary>
            Gets the EmailAddresses with the change.
            </summary>
            <value>The results.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.EmailResolver">
            <summary>
            Allows resolving Email addresses within the Interaction Center system.
            </summary>
            <remarks>This class takes a string containing a full or partial Email address and the IC server 
            resolves it into an array of <see cref="T:ININ.IceLib.Interactions.EmailAddress"/> objects.
            <para>To resolve an Email address string, pass it to the <see cref="M:ININ.IceLib.Interactions.EmailResolver.ResolveName(System.String)"/> or <see cref="M:ININ.IceLib.Interactions.EmailResolver.ResolveNameAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> methods.
            When the asynchronous resolve name operation completes it invokes the <c>completedCallback</c> delegate. When the server
            has finished resolving the Email address it triggers the <see cref="E:ININ.IceLib.Interactions.EmailResolver.EmailResolved"/> event. The resolved email addresses
            are returned in the <see cref="T:ININ.IceLib.Interactions.EmailAddressesEventArgs"/> object of this event.</para>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailResolver.#ctor(ININ.IceLib.Interactions.InteractionsManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.EmailResolver"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailResolver.ResolveName(System.String)">
            <summary>
            Resolves an email address.
            </summary>
            <param name="addressSearch">The full or partial address.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.EmailResolver.ResolveNameAsync(System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously resolves an email address.
            </summary>
            <param name="addressSearch">The full or partial address.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="P:ININ.IceLib.Interactions.EmailResolver.InteractionsManager">
            <summary>
            Gets the InteractionManager with which this Interaction is associated.
            </summary>
            <value>The interactions manager.</value>
        </member>
        <member name="E:ININ.IceLib.Interactions.EmailResolver.EmailResolved">
            <summary>
            Occurs when Email recipients have been resolved.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.GenericInteraction">
            <summary>
            Represents a generic interaction object within the Interaction Center system.
            </summary>
            <remarks>Generic interactions are generic objects that can be placed on queues and instantiated as part of an interaction queue watch.
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.GenericInteraction.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.GenericInteraction"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="interactionId">The interaction ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.MonitorInteraction">
            <summary>
            Represents a monitor interaction within the Interaction Center system.
            </summary>
            <remarks><para>Interactions in the Interaction Center system can be calls, chats, e-mails, 
            email, monitors, or recordings. Objects of this class represent interactions in which a user is monitoring 
            another user's interaction. These objects are part of an interaction queue watch.<br/><br/></para>
            <note>Accessing the properties of this class when an interaction watch is not in place raises a <see cref="T:ININ.IceLib.NotCachedException"/>.</note></remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.MonitorInteraction.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.MonitorInteraction"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="interactionId">The interaction ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.MonitorInteraction.MonitoredInteractionId">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.MonitorInteractionAttributeName.MonitoredInteractionId"/>.
            </summary>
            <value>The monitored interaction ID.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.MonitorInteraction.MonitoredInteractionType">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.MonitorInteractionAttributeName.MonitoredInteractionType"/>.
            </summary>
            <value>The type of monitored interaction.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.RecorderInteraction">
            <summary>
            Represents a recorder interaction within the Interaction Center system.
            </summary>
            <remarks>Recorded interactions represent an interaction where a supervisor or another user is 
            recording another user's interaction.<br/><br/>
            <note>Accessing the properties of this class without an interaction watch in place raises the <see cref="T:ININ.IceLib.NotCachedException"/>.</note></remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.RecorderInteraction.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.RecorderInteraction"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="interactionId">The interaction ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.RecorderInteraction.RecordedInteractionId">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.RecorderInteractionAttributeName.RecordedInteractionId"/>.
            </summary>
            <value>The recorded interaction ID.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.RecorderInteraction.RecordedInteractionType">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.RecorderInteractionAttributeName.RecordedInteractionType"/>.
            </summary>
            <value>The type of recorded interaction.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.RecorderInteraction.RecordedFileName">
            <summary>
            Gets the <see cref="F:ININ.IceLib.Interactions.RecorderInteractionAttributeName.RecordedFileName"/>.
            </summary>
            <value>The recorded file.</value>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.ConferenceId">
            <summary>
            Identifies a Conference within the Interaction Center system.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceId.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ConferenceId"/> class with the specified values.
            </summary>
            <param name="id">The ID.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ConferenceId"/> class with the specified values.
            </summary>
            <param name="id">The ID.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceId.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ConferenceId"/> class with the specified values.
            </summary>
            <param name="wireId">The wire ID.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceId.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceId.Equals(System.Object)">
            <overloads>
            Determines whether two ConferenceId instances are equal.
            </overloads>
            
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceId.Equals(ININ.IceLib.Interactions.ConferenceId)">
            <summary>
            Determines whether the specified ConferenceId is equal to the current ConferenceId.
            </summary>
            <param name="other">The ConferenceId to compare with the current ConferenceId. </param>
            <returns><c>true</c> if the specified ConferenceId is equal to the current ConferenceId; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceId.op_Equality(ININ.IceLib.Interactions.ConferenceId,ININ.IceLib.Interactions.ConferenceId)">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceId.op_Inequality(ININ.IceLib.Interactions.ConferenceId,ININ.IceLib.Interactions.ConferenceId)">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceId.Id">
            <summary>
            Gets a numeric representation of the Conference ID.
            </summary>
            <value>The conference ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceId.WireId">
            <summary>
            Gets a numeric (non-CLS-compliant) representation of the Conference ID.
            </summary>
            <value>The wire ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceId.RawId">
            <summary>
            Gets a numeric (non-CLS-compliant) representation of the Conference ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.GetContentsCompletedEventArgs">
            <summary>
            Provides data for asynchronous completed events of <see cref="T:ININ.IceLib.Interactions.InteractionConference"/> and <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.GetContentsCompletedEventArgs.#ctor(ININ.IceLib.Interactions.Interaction[],System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.GetContentsCompletedEventArgs"/> class with the specified values.
            </summary>
            <param name="interactions">The interactions.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <c>true</c> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.GetContentsCompletedEventArgs.Interactions">
            <summary>
            Gets the Interactions associated with the event.
            </summary>
            <value>The interactions.</value>
            <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> 
            property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException">InnerException</see> 
            property holds a reference to Error.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.CreateSidebarChatCompletedEventArgs">
            <summary>
            Provides data for asynchronous completed events of <see cref="T:ININ.IceLib.Interactions.InteractionConference"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.CreateSidebarChatCompletedEventArgs.#ctor(ININ.IceLib.Interactions.InteractionId,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CreateSidebarChatCompletedEventArgs"/> class with the specified values.
            </summary>
            <param name="sidebarChatId">The id of the sidebar chat associated with the Conference.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <c>true</c> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.CreateSidebarChatCompletedEventArgs.SidebarChatId">
            <summary>
            Gets the id of the sidebar chat associated with the event.
            </summary>
            <value>The sidebar chat id.</value>
            <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> 
            property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException">InnerException</see> 
            property holds a reference to Error.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionConference">
            <summary>
            Represents a conference within the Interaction Center system.
            </summary>
            <remarks>An interaction conference occurs when multiple parties are participating in the same interaction.
            This class provides support for representing an interaction conference and for adding and listing parties in
            the interaction.
            <para>To add parties to an interaction, call <see cref="M:ININ.IceLib.Interactions.InteractionConference.AddParties(ININ.IceLib.Interactions.Interaction[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionConference.AddPartiesAsync(ININ.IceLib.Interactions.Interaction[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> providing an
            array of <see cref="T:ININ.IceLib.Interactions.Interaction"/> objects. When the asynchronous add parties operation completes, it invokes the <c>completedCallback</c> delegate.</para>
            <para>To get the parties of a conference interaction, call <see cref="M:ININ.IceLib.Interactions.InteractionConference.GetParties"/> or <see cref="M:ININ.IceLib.Interactions.InteractionConference.GetPartiesAsync(System.EventHandler{ININ.IceLib.Interactions.GetContentsCompletedEventArgs},System.Object)"/>. When the asynchronous
            get parties operation completes, it invokes the <c>completedCallback</c> delegate returning the list of interactions in the
            <see cref="T:ININ.IceLib.Interactions.GetContentsCompletedEventArgs"/> object.<br/><br/></para>
            <note>The asynchronous version of the above methods is preferred since these operations can be lengthy.</note></remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionConference.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionType)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionConference"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="conferenceType">Type of the conference.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionConference.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.InteractionType,ININ.IceLib.Interactions.ConferenceId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionConference"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="conferenceType">Type of the conference.</param>
            <param name="conferenceId">The conference ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionConference.AddParties(ININ.IceLib.Interactions.Interaction[])">
            <summary>
            Adds parties to the <see cref="T:ININ.IceLib.Interactions.InteractionConference"/>.
            </summary>
            <param name="interactions">The interactions.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionConference.AddPartiesAsync(ININ.IceLib.Interactions.Interaction[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously adds parties to the <see cref="T:ININ.IceLib.Interactions.InteractionConference"/>.
            </summary>
            <param name="interactions">The interactions.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionConference.GetParties">
            <summary>
            Gets the parties in the <see cref="T:ININ.IceLib.Interactions.InteractionConference"/>.
            </summary>
            <returns>The <see cref="T:ININ.IceLib.Interactions.Interaction"/> array that was returned.</returns>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionConference.GetPartiesAsync(System.EventHandler{ININ.IceLib.Interactions.GetContentsCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously gets the parties in the <see cref="T:ININ.IceLib.Interactions.InteractionConference"/>.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionConference.CreateSidebarChat">
            <summary>
            Creates a sidebar chat including all internal parties in this conference<see cref="T:ININ.IceLib.Interactions.InteractionConference">conference</see>.
            </summary>
            <returns>The ID of the newly created Chat.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionConference.CreateSidebarChatAsync(System.EventHandler{ININ.IceLib.Interactions.CreateSidebarChatCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously creates a sidebar chat including all internal parties in this conference<see cref="T:ININ.IceLib.Interactions.InteractionConference">conference</see>.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionConference.InteractionsManager">
            <summary>
            Gets the InteractionManager with which this Conference is associated.
            </summary>
            <value>The interactions manager.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionConference.ConferenceId">
            <summary>
            Gets the ID of the Conference.
            </summary>
            <value>The conference ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionConference.ConferenceType">
            <summary>
            Gets the type of interactions being conferenced.
            </summary>
            <value>The type of the conference.</value>
            <remarks>
            This is the same as the <see cref="P:ININ.IceLib.Interactions.Interaction.InteractionType"/> property.
            </remarks>
        </member>
        <member name="T:ININ.IceLib.Interactions.QueueType">
            <summary>
            Specifies constants indicating the type of an InteractionQueue.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.QueueType.None">
            <summary>The Queue type cannot be identified.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.QueueType.MyInteractions">
            <summary>A special Queue that represents a interactions on a user's user or station queue.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.QueueType.User">
            <summary>Represents a user's interactions.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.QueueType.Station">
            <summary>Represents a station's interactions.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.QueueType.Workgroup">
            <summary>Represents a workgroup's interactions. Interactions passed to a Workgroup queue can be picked 
            up by its member agents. </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.QueueType.Orbit">
            <summary>Represents an orbit queue's interactions. An <i>orbit queue</i> is a list of all calls parked to 
            specific locations (numbered orbits). This feature is especially helpful for Public Announcement system 
            operators who can park a call in Orbit, then page the recipient and relay that he or she has a call on a 
            specific Orbit (i.e. "John Doe, you have a call on Orbit 12", thus enabling John Doe to move to any station 
            and pick up the call).</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.QueueId">
            <summary>
            Identifies an <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/> within the Interaction Center system.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueId.#ctor(ININ.IceLib.Interactions.QueueType,System.String)">
            <overloads>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.QueueId"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.QueueId"/> class with the specified values.
            </summary>
            <param name="queueType">The queue type enumeration value.</param>
            <param name="queueName">The queue name.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.QueueId"/> class with the specified values.
            </summary>
            <param name="scopedName">The scoped queue name.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueId.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueId.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueId.Equals(System.Object)">
            <overloads>
            Determines whether two QueueId instances are equal.
            </overloads>
            
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueId.Equals(ININ.IceLib.Interactions.QueueId)">
            <summary>
            Determines whether the specified QueueId is equal to the current QueueId.
            </summary>
            <param name="other">The QueueId to compare with the current QueueId. </param>
            <returns><c>true</c> if the specified QueueId is equal to the current QueueId; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueId.op_Equality(ININ.IceLib.Interactions.QueueId,ININ.IceLib.Interactions.QueueId)">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueueId.op_Inequality(ININ.IceLib.Interactions.QueueId,ININ.IceLib.Interactions.QueueId)">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueId.QueueType">
            <summary>
            Gets the type of Queue being identified.
            </summary>
            <value>The type of the queue.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueId.QueueName">
            <summary>
            Gets the name of the Queue being identified.
            </summary>
            <value>The name of the queue.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueueId.ScopedName">
            <summary>
            Gets the scoped name of the Queue being identified.
            </summary>
            <value>The scoped name.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionAttributesEventArgs">
            <summary>
            Provides data for the InteractionAttributesChanged event of a <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAttributesEventArgs.#ctor(ININ.IceLib.Interactions.Interaction,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionAttributesEventArgs"/> class with the specified values.
            </summary>
            <param name="interaction">The interaction.</param>
            <param name="interactionAttributeNames">The interaction attribute names.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAttributesEventArgs.Interaction">
            <summary>
            Gets the Interaction associated with the change.
            </summary>
            <value>The interaction.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAttributesEventArgs.InteractionAttributeNames">
            <summary>
            Gets the attribute names associated with the change.
            </summary>
            <value>The interaction attribute names.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.ConferenceInteractionEventArgs">
            <summary>
            Provides data for the events involving a single <see cref="T:ININ.IceLib.Interactions.Interaction"/> conference member.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceInteractionEventArgs.#ctor(ININ.IceLib.Interactions.Interaction,ININ.IceLib.Interactions.Interaction,ININ.IceLib.Interactions.ConferenceId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.ConferenceInteractionEventArgs"/> class with the specified values.
            </summary>
            <param name="interaction">The interaction.</param>
            <param name="conferenceItem">The conference item.</param>
            <param name="conferenceId">The interaction conference.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceInteractionEventArgs.Interaction">
            <summary>
            Gets the Interaction associated with the change.
            </summary>
            <value>The interaction.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceInteractionEventArgs.ConferenceItem">
            <summary>
            Gets the Conference item associated with the change.
            </summary>
            <value>The conference item.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceInteractionEventArgs.ConferenceId">
            <summary>
            Gets the Conference associated with the change.
            </summary>
            <value>The conference ID.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.ConferenceInteractionAttributesEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionChanged"/> event of an <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/> object.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.ConferenceInteractionAttributesEventArgs.#ctor(ININ.IceLib.Interactions.Interaction,ININ.IceLib.Interactions.Interaction,ININ.IceLib.Interactions.ConferenceId,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionAttributesEventArgs"/> class with the specified values.
            </summary>
            <param name="interaction">The interaction.</param>
            <param name="conferenceItem">The conference item.</param>
            <param name="conferenceId">The interaction conference.</param>
            <param name="interactionAttributeNames">The interaction attribute names.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceInteractionAttributesEventArgs.Interaction">
            <summary>
            Gets the Interaction associated with the change.
            </summary>
            <value>The interaction.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceInteractionAttributesEventArgs.ConferenceItem">
            <summary>
            Gets the Conference item associated with the change.
            </summary>
            <value>The conference item.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceInteractionAttributesEventArgs.ConferenceId">
            <summary>
            Gets the Conference ID associated with the change.
            </summary>
            <value>The conference ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.ConferenceInteractionAttributesEventArgs.InteractionAttributeNames">
            <summary>
            Gets the attribute names associated with the change.
            </summary>
            <value>The interaction attribute names.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionQueue">
            <summary>
            Represents a queue of Interactions within the Interaction Center system.
            </summary>
            <remarks>This class provides support for setting up watches and retrieving the contents of an 
            interaction queue.
            <para>To start a watch on an interaction queue, call <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> and provide and array of attributes. When the asynchronous
            start watch operation completes, it invokes the <c>completedCallback</c> delegate.</para>
            <para>To stop a watch on an interaction queue, call <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StopWatching"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the asynchronous
            stop watch operation completes, it invokes the <c>completedCallback</c> delegate.</para>
            <para>To change the attributes watched, call <see cref="M:ININ.IceLib.Interactions.InteractionQueue.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.ChangeWatchedAttributesAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>. When the
            asynchronous change watch operation completes, it invokes the <c>completedCallback</c> delegate.</para>
            <para>To retrieve the contents of an interaction queue, call <see cref="M:ININ.IceLib.Interactions.InteractionQueue.GetContents"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.GetContentsAsync(System.EventHandler{ININ.IceLib.Interactions.GetContentsCompletedEventArgs},System.Object)"/>. When the asynchronous
            get contents operation completes, it invokes the <c>completedCallback</c> delegate and returns the <see cref="T:ININ.IceLib.Interactions.InteractionCompletedEventArgs"/> object
            containing the contents of the interaction queue. The queue contents is represented by a collection of <see cref="T:ININ.IceLib.Interactions.Interaction"/> objects.</para>
            <para>Calling <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch is in place or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StopWatching"/>, <see cref="M:ININ.IceLib.Interactions.InteractionQueue.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/>,
            <see cref="M:ININ.IceLib.Interactions.InteractionQueue.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)"/>, or <see cref="M:ININ.IceLib.Interactions.InteractionQueue.ChangeWatchedAttributesAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> when a watch is not in place raises an <see cref="T:System.InvalidOperationException"/>.<br/><br/></para>
            <note>The asynchronous version of the above methods is preferred since these operations can be lengthy.</note></remarks>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.#ctor(ININ.IceLib.Interactions.InteractionsManager,ININ.IceLib.Interactions.QueueId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <param name="queueId">The queue ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.IsWatching">
            <overloads>
            Determines whether a watch is active.
            </overloads>
            
            <summary>
            Determines whether a watch is active.
            </summary>
            <returns>
            	<c>true</c> if a watch is active; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method determines whether a watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.IsWatching(System.String)">
            <summary>
            Determines whether a watch is active and if the specified value is being watched.
            </summary>
            <param name="attributeName">The attribute name.</param>
            <returns>
            	<c>true</c> if a watch is active and the specified value is being watched; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>
            This method determines whether a watch is in place for this instance and whether the specified value is being watched.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.StartWatching(System.String[])">
            <summary>
            Starts watching.
            </summary>
            <param name="attributeNames">The attribute names.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException">The object is already being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.StartWatchingAsync(System.String[],System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously starts watching.
            </summary>
            <param name="attributeNames">The attribute names.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.ChangeWatchedAttributes(System.String[],System.String[],System.Boolean)">
            <summary>
            Changes how the InteractionQueue is being watched.
            </summary>
            <param name="attributeNamesToAdd">The attribute names to add. (Can be <b>null</b>.)</param>
            <param name="attributeNamesToRemove">The attribute names to remove. (Can be <b>null</b>.)</param>
            <param name="replaceExisting">if set to <c>true</c>, replace the existing existing list.</param>
            <remarks>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.ChangeWatchedAttributesAsync(System.String[],System.String[],System.Boolean,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously changes how the InteractionQueue is being watched.
            </summary>
            <param name="attributeNamesToAdd">The attribute names to add. (Can be <b>null</b>.)</param>
            <param name="attributeNamesToRemove">The attribute names to remove. (Can be <b>null</b>.)</param>
            <param name="replaceExisting">if set to <c>true</c>, replace the existing existing list.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>
            <para>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</para>
            <para><b>Note: </b>This method silently ignores attempts to add items already being watched or to remove items not being watched.</para>
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.StopWatching">
            <summary>
            Stops watching the InteractionQueue.
            </summary>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops watching the InteractionQueue.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.GetContents">
            <summary>
            Gets the contents.
            </summary>
            <returns>The <see cref="T:ININ.IceLib.Interactions.Interaction"/> array.</returns>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionQueue.GetContentsAsync(System.EventHandler{ININ.IceLib.Interactions.GetContentsCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously gets the contents.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionQueue.InteractionsManager">
            <summary>
            Gets the InteractionManager with which this Queue is associated.
            </summary>
            <value>The interactions manager.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionQueue.QueueId">
            <summary>
            Gets the ID of the Queue.
            </summary>
            <value>The queue ID.</value>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionQueue.InteractionAdded">
            <summary>
            Occurs when an Interaction is added to the Queue.
            </summary>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionQueue.InteractionChanged">
            <summary>
            Occurs when an Interaction on the Queue changes.
            </summary>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionQueue.InteractionRemoved">
            <summary>
            Occurs when an Interaction is removed from the Queue.
            </summary>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionAdded">
            <summary>
            Occurs when a conference Interaction is added to the Queue.
            </summary>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionChanged">
            <summary>
            Occurs when a conference Interaction on the Queue changes.
            </summary>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionQueue.ConferenceInteractionRemoved">
            <summary>
            Occurs when a conference Interaction is removed from the Queue.
            </summary>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionQueue.LostRights">
            <summary>
            Occurs when the User loses rights for the Queue.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.AgentHelpRequest">
            <summary>
            This class represents an agent's request for help from a supervisor.
            </summary>
            <remarks>Agents sometimes need to obtain help with an interaction. For example, an agent 
            might request help when a caller asks a question that the agent cannot answer.
            <para>When the request is sent, all supervisors of the workgroup from which the call originated receive 
            an assistance request stating that the agent needs help. When one supervisor accepts the assistance request, 
            the request is automatically dismissed from all other supervisors' IC systems.</para>
            <para>Objects of this class contain data about an a agent's help request. These data items 
            (agent, problem description, station, extension, etc.) are sent to the supervisor and are returned in 
            the <see cref="T:ININ.IceLib.Interactions.AgentHelpResponse"/> object when the supervisor responds.</para></remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.AgentHelpRequest.#ctor(System.String,System.String,System.String,System.String,System.String,ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.AgentHelpRequest"/> class.
            </summary>
            <param name="workgroup">The workgroup.</param>
            <param name="agent">The agent.</param>
            <param name="station">The station.</param>
            <param name="extension">The extension.</param>
            <param name="problemDescription">The problem description.</param>
            <param name="interactionId">The interaction ID.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpRequest.Workgroup">
            <summary>
            Gets the workgroup.
            </summary>
            <value>The workgroup.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpRequest.Agent">
            <summary>
            Gets the agent.
            </summary>
            <value>The agent.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpRequest.Station">
            <summary>
            Gets the station.
            </summary>
            <value>The station.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpRequest.Extension">
            <summary>
            Gets the extension.
            </summary>
            <value>The extension.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpRequest.ProblemDescription">
            <summary>
            Gets the problem description.
            </summary>
            <value>The problem description.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpRequest.InteractionId">
            <summary>
            Gets the interaction ID.
            </summary>
            <value>The interaction ID.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.AgentHelpRequestEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.Interactions.AgentHelpResponse.AgentHelpRequested"/> event. The
            <see cref="P:ININ.IceLib.Interactions.AgentHelpRequestEventArgs.AgentHelpRequest"/> object is contained in objects of this class.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.AgentHelpRequestEventArgs.#ctor(ININ.IceLib.Interactions.AgentHelpRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.AgentHelpRequestEventArgs"/> class with the specified values.
            </summary>
            <param name="agentHelpRequest">The agent help request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpRequestEventArgs.AgentHelpRequest">
            <summary>
            Gets the agent help request.
            </summary>
            <value>The agent help request.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.AgentHelpResponseEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.Interactions.AgentHelpResponse.AgentHelpResponseReceived"/> event.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.AgentHelpResponseEventArgs.#ctor(ININ.IceLib.Interactions.AgentHelpRequest,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.AgentHelpRequestEventArgs"/> class with the specified values.
            </summary>
            <param name="agentHelpRequest">The agent help request.</param>
            <param name="responder">The responder.</param>
            <param name="willHelp">If set to <c>true</c> will help.</param>
            <param name="response">The response.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpResponseEventArgs.Responder">
            <summary>
            Gets the responder.
            </summary>
            <value>The responder.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpResponseEventArgs.WillHelp">
            <summary>
            Gets a value indicating whether the supervisor will provide help.
            </summary>
            <value><c>true</c> if will provide help; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpResponseEventArgs.Response">
            <summary>
            Gets the response.
            </summary>
            <value>The response.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.AgentHelpResponse">
            <summary>
            This class represents a supervisor's response to an agent's help request.
            </summary>
            <remarks>This class provides support for sending a response to an agent's supervisor help request.
            <para>To send a response to a help request call <see cref="M:ININ.IceLib.Interactions.AgentHelpResponse.SendResponse(ININ.IceLib.Interactions.AgentHelpRequest,System.Boolean,System.String)"/> or <see cref="M:ININ.IceLib.Interactions.AgentHelpResponse.SendResponseAsync(ININ.IceLib.Interactions.AgentHelpRequest,System.Boolean,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)"/> providing
            the <see cref="T:ININ.IceLib.Interactions.AgentHelpRequest"/> object and a flag indicating whether the supervisor will help. When the asynchronous
            send-response operation completes, it invokes the <c>completedCallback</c> delegate.<br/><br/></para>
            <note>The asynchronous version of the method is preferred since sending a response
            can be a lengthy operation.</note>
            </remarks>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.AgentHelpResponse.#ctor(ININ.IceLib.Interactions.InteractionsManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.AgentHelpResponse"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.AgentHelpResponse.SendResponse(ININ.IceLib.Interactions.AgentHelpRequest,System.Boolean,System.String)">
            <summary>
            Sends a response to an <see cref="T:ININ.IceLib.Interactions.AgentHelpRequest"/>.
            </summary>
            <param name="agentHelpRequest">The agent help request.</param>
            <param name="willHelp">If set to <c>true</c> will help.</param>
            <param name="response">The response, if one is provided.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.AgentHelpResponse.SendResponseAsync(ININ.IceLib.Interactions.AgentHelpRequest,System.Boolean,System.String,System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously sends a response to an <see cref="T:ININ.IceLib.Interactions.AgentHelpRequest"/>.
            </summary>
            <param name="agentHelpRequest">The agent help request.</param>
            <param name="willHelp">If set to <c>true</c> will help.</param>
            <param name="response">The response, if one is provided.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="P:ININ.IceLib.Interactions.AgentHelpResponse.InteractionsManager">
            <summary>
            Gets the InteractionManager with which this Interaction is associated.
            </summary>
            <value>The interactions manager.</value>
        </member>
        <member name="E:ININ.IceLib.Interactions.AgentHelpResponse.AgentHelpRequested">
            <summary>
            Occurs when an Agent requests help.
            </summary>
        </member>
        <member name="E:ININ.IceLib.Interactions.AgentHelpResponse.AgentHelpResponseReceived">
            <summary>
            Occurs when an Agent help request is answered.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.GenericInteractionParameters">
            <summary>
            Provides details when creating Generic Interactions via <see cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeGenericInteraction(ININ.IceLib.Interactions.GenericInteractionParameters)"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.GenericInteractionParameters.#ctor(ININ.IceLib.Interactions.QueueId,ININ.IceLib.Interactions.InteractionState)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.GenericInteractionParameters"/> class.
            </summary>
            <param name="targetQueueId">The ID of the target queue.</param>
            <param name="initialState">The initial state.</param>
            <remarks>initialState can be one of Alerting, Connected, Held, Parked, Internal Disconnect, Extenal Disconnect or Messaging</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.GenericInteractionParameters.ToString">
            <summary>
            Gets the string representation of GenericInteractionParameters
            </summary>
            <value>The string representation.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.GenericInteractionParameters.TargetQueueId">
            <summary>
            Gets the queue ID.
            </summary>
            <value>The queue ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.GenericInteractionParameters.InitialState">
            <summary>
            Gets the initial state.
            </summary>
            <value>The initial state.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.GenericInteractionParameters.InteractionDirection">
            <summary>
            Gets or sets the interaction direction.
            </summary>
            <value>The interaction direction.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.GenericInteractionParameters.LocalPartyType">
            <summary>
            Gets or sets the type of the local party.
            </summary>
            <value>The type of the local party.</value>
            <remarks>local party type can be internal or system.</remarks>
            <exception cref="T:System.ArgumentException"><c>LocalPartyType</c> must be <see cref="F:ININ.IceLib.Interactions.InteractionPartyType.Internal"/>
            when creating objects through IceLib.</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.GenericInteractionParameters.LocalLocation">
            <summary>
            Gets or sets the local location.
            </summary>
            <value>The local location.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.GenericInteractionParameters.RemotePartyType">
            <summary>
            Gets or sets the type of the remote party.
            </summary>
            <value>The type of the remote party.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.GenericInteractionParameters.RemoteId">
            <summary>
            Gets or sets the remote ID.
            </summary>
            <value>The remote ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.GenericInteractionParameters.RemoteName">
            <summary>
            Gets or sets the name of the remote.
            </summary>
            <value>The name of the remote.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.GenericInteractionParameters.AdditionalAttributes">
            <summary>
            Gets a collection which can be used to set additional attributes.
            </summary>
            <value>The additional attributes collection.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.CallInteractionParameters">
            <summary>
            Provides details when making a call via <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/>'s MakeCall method.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteractionParameters.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CallInteractionParameters"/> class.
            </overloads>
            
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CallInteractionParameters"/> class with default settings.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteractionParameters.#ctor(System.String,System.String,ININ.IceLib.Interactions.CallMadeStage)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CallInteractionParameters"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="onBehalfOfWorkgroup">The on behalf of workgroup (or null).</param>
            <param name="callMadeStage">Specifies when to raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteractionParameters.#ctor(System.String,ININ.IceLib.Interactions.CallMadeStage)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CallInteractionParameters"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="callMadeStage">Specifies when to raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteractionParameters.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CallInteractionParameters"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallInteractionParameters.ToString">
            <summary>
            Gets the string representation of CallInteractionParameters
            </summary>
            <value>The string representation.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallInteractionParameters.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallInteractionParameters.AccountCodeId">
            <summary>
            Gets or sets the account code ID.
            </summary>
            <value>The account code ID.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallInteractionParameters.Notes">
            <summary>
            Gets or sets the notes.
            </summary>
            <value>The notes.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallInteractionParameters.CallMadeStage">
            <summary>
            Gets or sets the call made stage.
            </summary>
            <value>Specifies when to raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallInteractionParameters.OnBehalfOfWorkgroup">
            <summary>
            Gets or sets the on behalf of workgroup.
            </summary>
            <value>The on behalf of workgroup.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallInteractionParameters.AdditionalAttributes">
            <summary>
            Gets a collection which can be used to set additional attributes.
            </summary>
            <value>The additional attributes collection.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.PerformingActionEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction"/> event.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.PerformingActionEventArgs.#ctor(ININ.IceLib.Interactions.InteractionCapabilities,ININ.IceLib.Interactions.Interaction)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.PerformingActionEventArgs"/> class with the specified values.
            </summary>
            <param name="action">The action.</param>
            <param name="interaction">The interaction.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.PerformingActionEventArgs.Action">
            <summary>
            Gets the <see cref="T:ININ.IceLib.Interactions.InteractionCapabilities"/> associated with the change.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.PerformingActionEventArgs.Interaction">
            <summary>
            Gets the interaction associated with the change.
            </summary>
            <value>The interaction.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.CallMadeEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.CallMadeEventArgs.#ctor(ININ.IceLib.Interactions.Interaction)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.CallMadeEventArgs"/> class with the specified values.
            </summary>
            <param name="interaction">The interaction.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.CallMadeEventArgs.Interaction">
            <summary>
            Gets the Interaction associated with the change.
            </summary>
            <value>The interaction.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionCompletedEventArgs">
            <summary>
            Provides data for the asynchronous completed events of <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionCompletedEventArgs.#ctor(ININ.IceLib.Interactions.Interaction,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionCompletedEventArgs"/> class with the specified values.
            </summary>
            <param name="interaction">The interaction.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <c>true</c> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionCompletedEventArgs.Interaction">
            <summary>
            Gets the Interaction associated with the event.
            </summary>
            <value>The interaction.</value>
            <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> 
            property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException">InnerException</see> 
            property holds a reference to Error.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.MakeChatCompletedEventArgs">
            <summary>
            Provides data for the <see cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeChatAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.MakeChatCompletedEventArgs},System.Object)"/> <c>completedCallback</c> delegate of <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.MakeChatCompletedEventArgs.#ctor(ININ.IceLib.Interactions.ChatInteraction,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.MakeChatCompletedEventArgs"/> class with the specified values.
            </summary>
            <param name="chatInteraction">The ChatInteraction.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <c>true</c> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.MakeChatCompletedEventArgs.ChatInteraction">
            <summary>
            Gets the ChatInteraction associated with the event.
            </summary>
            <value>The chat interaction.</value>
            <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> 
            property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException">InnerException</see> 
            property holds a reference to Error.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.MakeGenericInteractionCompletedEventArgs">
            <summary>
            Provides data for the <see cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeGenericInteractionAsync(ININ.IceLib.Interactions.GenericInteractionParameters,System.EventHandler{ININ.IceLib.Interactions.MakeGenericInteractionCompletedEventArgs},System.Object)"/> <c>completedCallback</c> delegate of <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.MakeGenericInteractionCompletedEventArgs.#ctor(ININ.IceLib.Interactions.GenericInteraction,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.MakeGenericInteractionCompletedEventArgs"/> class with the specified values.
            </summary>
            <param name="genericInteraction">The GenericInteraction.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <c>true</c> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.MakeGenericInteractionCompletedEventArgs.GenericInteraction">
            <summary>
            Gets the GenericInteraction associated with the event.
            </summary>
            <value>The generic interaction.</value>
            <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> 
            property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException">InnerException</see> 
            property holds a reference to Error.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.MakeNewConferenceCompletedEventArgs">
            <summary>
            Provides data for the <see cref="M:ININ.IceLib.Interactions.InteractionsManager.MakeNewConferenceAsync(ININ.IceLib.Interactions.Interaction[],System.EventHandler{ININ.IceLib.Interactions.MakeNewConferenceCompletedEventArgs},System.Object)"/> <c>completedCallback</c> delegate of <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.MakeNewConferenceCompletedEventArgs.#ctor(ININ.IceLib.Interactions.InteractionConference,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.MakeNewConferenceCompletedEventArgs"/> class with the specified values.
            </summary>
            <param name="interactionConference">The interaction conference.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <c>true</c> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.MakeNewConferenceCompletedEventArgs.InteractionConference">
            <summary>
            Gets the InteractionConference associated with the event.
            </summary>
            <value>The interaction conference.</value>
            <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> 
            property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException">InnerException</see> 
            property holds a reference to Error.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.QueryPhoneNumberDetailsCompletedEventArgs">
            <summary>
            Provides data for the <see cref="M:ININ.IceLib.Interactions.InteractionsManager.QueryPhoneNumberDetailsAsync(System.String[],System.EventHandler{ININ.IceLib.Interactions.QueryPhoneNumberDetailsCompletedEventArgs},System.Object)"/> <c>completedCallback</c> delegate of <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/>.
            </summary>
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.QueryPhoneNumberDetailsCompletedEventArgs.#ctor(ININ.IceLib.Interactions.PhoneNumber[],System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.QueryPhoneNumberDetailsCompletedEventArgs"/> class with the specified values.
            </summary>
            <param name="phoneNumbers">A <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/> array.</param>
            <param name="error">The error, if one occurred.</param>
            <param name="cancelled">If set to <c>true</c> the operation was cancelled.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:ININ.IceLib.Interactions.QueryPhoneNumberDetailsCompletedEventArgs.PhoneNumbers">
            <summary>
            Gets the InteractionConference associated with the event.
            </summary>
            <value>The phone numbers.</value>
            <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> 
            property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException">InnerException</see> 
            property holds a reference to Error.</exception>
        </member>
        <member name="T:ININ.IceLib.Interactions.CallMadeStage">
            <summary>
            Specifies constants indicating when the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event should be raised.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallMadeStage.None">
            <summary>No make call operation should be performed.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallMadeStage.Allocated">
            <summary>The call has been allocated.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallMadeStage.Started">
            <summary>The call has started.</summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.CallMadeStage.Completed">
            <summary>The call has completed.</summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionsManager">
             <summary>
             Provides access to Interactions and InteractionQueues.
             </summary>
             <remarks>
             Use the <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/> class to access the functionality
             found in the <see cref="N:ININ.IceLib.Interactions"/> namespace.
             <para>
             The <see cref="N:ININ.IceLib.Interactions"/> namespace includes all functionality for manipulating
             interactions and interaction queues managed by an IC server.  Most features provided in
             the <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/> are available in synchronous and
             asynchronous versions allowing you to choose the model that best suits your
             needs. The asynchronous versions are preferred since these operations can be lengthy and block the calling thread.
             </para>
             <br/>
             <example>
             All "manager" classes found in the IceLib library are designed as
             singletons.  To begin working with any of the functionality provided in
             the <see cref="T:ININ.IceLib.Interactions.InteractionsManager"/> you must obtain the instance
             through a call to <see cref="M:ININ.IceLib.Interactions.InteractionsManager.GetInstance(ININ.IceLib.Connection.Session)"/>.
             <code lang="C#">
             Session session = <span style="color:blue">new</span> Session();
             session.Connect(...);
             InteractionsManager interactionsManager = InteractionsManager.GetInstance(session);
             </code>
             </example>
             <example>The following example illustrates using this class to make a call.
             <code lang="C#" escaped="false">
             ...
             
             <span style="color:blue">string</span> _PhoneNumber = <span style="color:red">"555-1212"</span>;
             
              _InteractionsManager.MakeCallCompleted += <span style="color:blue">new</span> EventHandler&lt;InteractionCompletedEventArgs&gt;(InteractionsManager_MakeCallCompleted);
            		
             <span style="color:blue">private void</span> btMakeCall_Click(<span style="color:blue">object</span> sender, System.EventArgs e)
            	{
            		<span style="color:blue">if</span> (_Session.ConnectionState != ConnectionState.Up)
            		{
                         MessageBox.Show(<span style="color:red">"Connection is down"</span>);
            			<span style="color:blue">return</span>;
            		}		
                 _InteractionsManager.MakeCallAsync(_PhoneNumber, <span style="color:blue">null</span>, CallMadeStage.Allocated, <span style="color:blue">null</span>);
            	}
            
             <span style="color:blue">private void</span> InteractionsManager_MakeCallCompleted(<span style="color:blue">object</span> sender, InteractionCompletedEventArgs e)
             {
                 <span style="color:blue">if</span> (e.Error != <span style="color:blue">null</span>)
                 {
                     MessageBox.Show(e.Error.StackTrace, e.Error.Message);
                     <span style="color:blue">return</span>;
                 }
            
                 Interaction interaction = e.Interaction;
            
                 _LastInteraction = interaction;
            
                 <span style="color:blue">if</span> (interaction != <span style="color:blue">null</span>)
                 {
                     MessageBox.Show(String.Format(<span style="color:red">"Call Made. InteractionId={0}"</span>, interaction.InteractionId);
                 }
                 <span style="color:blue">else</span>
                 {
                     MessageBox.Show(<span style="color:red">"MakeCall Failed."</span>);
                 }
              }
            
             </code>
             </example>
             </remarks>
             <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.GetInstance(ININ.IceLib.Connection.Session)">
            <summary>
            Gets an InteractionsManager.
            </summary>
            <param name="session">The Session with which it is associated.</param>
            <returns>The InteractionsManager.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.CreateInteraction(ININ.IceLib.Interactions.InteractionId)">
            <summary>
            Creates an Interaction instance for a given ID.
            </summary>
            <param name="interactionId">The interaction ID.</param>
            <returns>The <see cref="T:ININ.IceLib.Interactions.Interaction"/> that was returned.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.CreateInteractionAsync(ININ.IceLib.Interactions.InteractionId,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously creates an Interaction instance for a given ID.
            </summary>
            <param name="interactionId">The interaction ID.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeCall(ININ.IceLib.Interactions.CallInteractionParameters)">
            <summary>
            Makes the call.
            </summary>
            <param name="callParams">The call parameters.</param>
            <returns>The <see cref="T:ININ.IceLib.Interactions.Interaction"/> that was returned.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeCallAsync(ININ.IceLib.Interactions.CallInteractionParameters,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously makes a call.
            </summary>
            <param name="callParams">The call parameters.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCall(System.String,ININ.IceLib.Interactions.CallMadeStage)">
            <summary>
            Makes a consult call.
            </summary>
            <param name="target">The target.</param>
            <param name="callMadeStage">Specifies when to raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event.</param>
            <returns>The consult Interaction.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCall(ININ.IceLib.Interactions.CallInteractionParameters)">
            <summary>
            Makes a consult call.
            </summary>
            <param name="callParams">The call parameters.</param>
            <returns>The consult Interaction.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCallAsync(System.String,ININ.IceLib.Interactions.CallMadeStage,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously makes a consult call.
            </summary>
            <param name="target">The target.</param>
            <param name="callMadeStage">Specifies when to raise the <see cref="E:ININ.IceLib.Interactions.InteractionsManager.CallMade"/> event.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.ConsultMakeCallAsync(ININ.IceLib.Interactions.CallInteractionParameters,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously makes a consult call.
            </summary>
            <param name="callParams">The call parameters.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeNewConference(ININ.IceLib.Interactions.Interaction[])">
            <summary>
            Makes the new conference.
            </summary>
            <param name="interactions">The interactions.</param>
            <returns>The Conference.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
            <exception cref="T:ININ.IceLib.NotCachedException">The associated attribute is not being watched.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeNewConferenceAsync(ININ.IceLib.Interactions.Interaction[],System.EventHandler{ININ.IceLib.Interactions.MakeNewConferenceCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously makes the new conference.
            </summary>
            <param name="interactions">The interactions.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeStationConnection(System.String)">
            <summary>
            Makes a connection to a station.
            </summary>
            <param name="station">The station identifier.</param>
            <returns>The <see cref="T:ININ.IceLib.Interactions.Interaction"/> that was returned.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeStationConnectionAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously makes a connection to a station.
            </summary>
            <param name="station">The station identifier.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeRemoteNumberConnection(System.String)">
            <summary>
            Makes a connection to a Remote Number.
            </summary>
            <param name="remoteNumber">The remote number.</param>
            <returns>The <see cref="T:ININ.IceLib.Interactions.Interaction"/> that was returned.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeRemoteNumberConnectionAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.InteractionCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously makes a connection to a Remote Number.
            </summary>
            <param name="remoteNumber">The remote number.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeChat(System.String)">
            <summary>
            Makes a chat.
            </summary>
            <param name="targetUser">The target user to chat with.</param>
            <returns>The <see cref="T:ININ.IceLib.Interactions.ChatInteraction"/> that was returned.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeChatAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.MakeChatCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously makes a chat.
            </summary>
            <param name="targetUser">The target user to chat with.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeGenericInteraction(ININ.IceLib.Interactions.GenericInteractionParameters)">
            <summary>
            Makes a generic interaction.
            </summary>
            <param name="genericInteractionParameters">The generic interaction parameters.</param>
            <returns>
            The <see cref="T:ININ.IceLib.Interactions.GenericInteraction"/> that was returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.MakeGenericInteractionAsync(ININ.IceLib.Interactions.GenericInteractionParameters,System.EventHandler{ININ.IceLib.Interactions.MakeGenericInteractionCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously makes a generic interaction.
            </summary>
            <param name="genericInteractionParameters">The generic interaction parameters.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.QueryPhoneNumberDetails(System.String[])">
            <summary>
            Queries phone number details.
            </summary>
            <param name="phoneNumbers">The phone numbers.</param>
            <returns>A <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/> array.</returns>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionsManager.QueryPhoneNumberDetailsAsync(System.String[],System.EventHandler{ININ.IceLib.Interactions.QueryPhoneNumberDetailsCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously queries phone number details.
            </summary>
            <param name="phoneNumbers">The phone numbers.</param>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">A parameter contains an invalid value.</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionsManager.Session">
            <summary>
            Gets the Session with which this StatisticsManager is associated.
            </summary>
            <value>The session.</value>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionsManager.CallMade">
            <summary>
            Occurs when a MakeCall type operation completes.
            </summary>
            <remarks>
            The event is raised when the call completes the stage specified by the <see cref="T:ININ.IceLib.Interactions.CallMadeStage"/>.
            </remarks>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionsManager.InteractionAutoAnswered">
            <summary>
            Occurs when an Interaction is automatically answered.
            </summary>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionsManager.PerformingAction">
            <summary>
            Occurs when an Action is performed on any Interaction in the Session.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.NamespaceDoc">
            <summary>
            <para>The <b>ININ.IceLib.Interactions</b> namespace contains classes for manipulating Interaction Center interaction queues.</para>
            <para>There are a number of classes within the <b>ININ.IceLib.Interactions</b> namespace that provide support to the classes mentioned in the preceding summary. Example of the supporting classes are enumerations, event argument classes, and delegates used by events within classes.</para>
            <para>
            <b>Queue Watches.</b> There are a number of object classes that are used to get specific attributes for the Interactions
            contained in a given Interaction Queue. They are watched, meaning, that any time an attribute is changed, the internal
            cache of that object is kept up to date so anytime that attribute's property is referenced
            the current value will be returned. An event notification is available when any of the attributes changes in value.<br/><br/>
            </para>
            <note>
            If the entire contents of an InteractionQueue is to be watched, Queue watches are more efficient than having individual Interaction watches
            on each Interaction in the Queue.
            </note>
            <para>
            <b>Interaction Watches.</b> There are a number of object classes that are used to get specific attributes
            for a given Interaction. They are watched, meaning, that any time an attribute is changed, the internal
            cache of that object is kept up to date so anytime that attribute's property is referenced
            the current value will be returned. An event notification is available when any of the attributes changes in value.
            All such objects inherit from <see cref="T:ININ.IceLib.Interactions.Interaction"/>. Examples of Interaction classes are:
            <see cref="T:ININ.IceLib.Interactions.CallInteraction"/>,
            <see cref="T:ININ.IceLib.Interactions.ChatInteraction"/>,
            and <see cref="T:ININ.IceLib.Interactions.EmailInteraction"/>.
            </para>
            <para>
            <b>Interaction Conferences.</b> The <see cref="T:ININ.IceLib.Interactions.InteractionConference"/> object provides
            information about a conference of interactions.  Additionally, the <see cref="T:ININ.IceLib.Interactions.InteractionQueue"/>
            object provides support for watching attribute changes for Interactions within conferences contained on an interaction queue.
            </para>
            <example>The following example illustrates an attribute watch to watch attributes for an interaction queue.
            <para>
            <code escaped="false" lang="C#">
            <span style="color:blue">public class</span> InteractionQueueWatcher
            {
                InteractionsManager _InteractionsManager;
                InteractionQueue _InteractionQueue;
                QueueId _QueueId;
            
                // We are interested in watching the StateDescription and RemoteId attributes of the Workgroup Details.
                <span style="color:blue">string</span>[] _WatchedAttributes = <span style="color:blue">new string</span>[] { InteractionAttributeName.StateDescription, InteractionAttributeName.RemoteId };
            
                <span style="color:blue">public</span> InteractionQueueWatcher(InteractionsManager interactionsManager, <span style="color:blue">string</span> userId)
                {
                    _InteractionsManager = interactionsManager;
            
                    _QueueId = <span style="color:blue">new</span> QueueId(QueueType.User, userId);
                }
                <span style="color:blue">private void</span> InteractionChanged(<span style="color:blue">object</span> sender, ININ.IceLib.Interactions.InteractionAttributesEventArgs e)
                {
                    DisplayAttributes();
                }
                <span style="color:blue">private void</span> DisplayAttributes()
                {
                    ReadOnlyCollection&lt;Interaction&gt; contents = _InteractionQueue.GetContents();
                    StringBuilder sb = <span style="color:blue">new</span> StringBuilder();
            
                    sb.AppendFormat(<span style="color:red">"The contents of {0} is:{1}"</span>, _QueueId, Environment.NewLine);
            
                    <span style="color:blue">foreach</span> (Interaction interaction <span style="color:blue">in</span> contents)
                    {
                       sb.AppendFormat(<span style="color:red">"{0}: to={1}, state={2}{3}"</span>,
                                       interaction.InteractionId, interaction.RemoteId,
                                       interaction.StateDescription, Environment.NewLine);
                    }
            
                    MessageBox.Show(sb.ToString());
                }
                <span style="color:blue">public void</span> StartWatch()
                {
                    <span style="color:blue">if</span>( _InteractionQueue == <span style="color:blue">null</span> )
                    {
                        _InteractionQueue = <span style="color:blue">new</span> InteractionQueue(_InteractionsManager, _QueueId);
                        _InteractionQueue.InteractionChanged += <span style="color:blue">new</span> EventHandler&lt;InteractionAttributesEventArgs&gt;(InteractionChanged);
                        _InteractionQueue.StartWatchingCompleted += <span style="color:blue">new</span> AsyncCompletedEventHandler(_InteractionQueue_StartWatchingCompleted);
                        _InteractionQueue.StopWatchingCompleted += <span style="color:blue">new</span> AsyncCompletedEventHandler(_InteractionQueue_StopWatchingCompleted);
                    }
                    _InteractionQueue.StartWatchingAsync(_WatchedAttributes, <span style="color:blue">null</span>);
                }
            
                <span style="color:blue">void</span> _InteractionQueue_StopWatchingCompleted(<span style="color:blue">object</span> sender, AsyncCompletedEventArgs e)
                {
                    <span style="color:blue">if</span> (e.Error != <span style="color:blue">null</span>) MessageBox.Show(<span style="color:red">"Error encountered: {0}"</span>, e.Error.Message);
                    <span style="color:blue">else</span> MessageBox.Show(<span style="color:red">"InteractionQueue.StopWatchingAsync succeeded!"</span>);
                }
               
                <span style="color:blue">void</span> _InteractionQueue_StartWatchingCompleted(<span style="color:blue">object</span> sender, AsyncCompletedEventArgs e)
                {
                    <span style="color:blue">if</span> (e.Error != <span style="color:blue">null</span>) MessageBox.Show(<span style="color:red">"Error encountered: {0}"</span>, e.Error.Message);
                    <span style="color:blue">else</span> MessageBox.Show(<span style="color:red">"InteractionQueue.StartWatchingAsync succeeded!"</span>);
                }
                <span style="color:blue">public void</span> StopWatch()
                {
                    <span style="color:blue">if</span>( _InteractionQueue == <span style="color:blue">null</span> )
                    {
                        MessageBox.Show(<span style="color:red">"A start watch has not been called"</span>);
                        <span style="color:blue">return</span>;
                    }
                    _InteractionQueue.StopWatchingAsync(<span style="color:blue">null</span>);
                }
            }
            </code>
            </para>
            </example>
            </summary>
            <doccompleted/>
        </member>
        <member name="T:ININ.IceLib.Interactions.PhoneNumber">
            <summary>
            Detailed information about a phone number within the Interaction Center system.
            </summary>
            <remarks>This class contains detailed information about a phone number that is retrieved by calling <see cref="M:ININ.IceLib.Interactions.InteractionsManager.QueryPhoneNumberDetails(System.String[])"/> or <see cref="M:ININ.IceLib.Interactions.InteractionsManager.QueryPhoneNumberDetailsAsync(System.String[],System.EventHandler{ININ.IceLib.Interactions.QueryPhoneNumberDetailsCompletedEventArgs},System.Object)"/>.
            The phone number information is determined by the IC server by applying the dial plan information to a given phone number string
            to determine the normalized phone number for the IC system to make a call. Also, the IC system can determine if the phone number is local, long-distance, international, etc.
            </remarks>       
            <doccompleted/>
        </member>
        <member name="M:ININ.IceLib.Interactions.PhoneNumber.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PhoneNumber"/> class.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.PhoneNumber.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.NormalizedText">
            <summary>
            The system normalized phone number text used for this <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/>.
            </summary>
            <value>The normalized text.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.DisplayText">
            <summary>
            The text used to display this <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/> in a client application.
            </summary>
            <value>The display text.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.DefaultClassification">
            <summary>
            The default classification for this <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/>.
            </summary>
            <remarks>Phone numbers that can be identified by a pattern in the numbers, or an explicit group 
            of phone numbers with a common purpose are called phone number "classifications". For example, 
            internal calls could be identified by the "Internal" classification, toll free (for example, 
            800 numbers) could be identified by the "Toll Free" classification, and calls to emergency services 
            (such as 911, fire department, police, and hospital) could be identified by the "Emergency" 
            classification.<para>When IC users dial a phone number, IC matches the number dialed with the 
            appropriate classification pattern. It then checks the user's dialing privileges to determine if the 
            user or station is authorized to place the call. In this way, IC uses phone number classifications 
            to control individual users, workgroups, roles, and station dialing privileges.</para></remarks>
            <value>The default classification.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.Internal">
            <summary>
            Indicates whether this <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/> in an internal number.
            </summary>
            <value>Returns <c>true</c> if this phone number is internal to IC; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.QueueType">
            <summary>
            The type of the queue for this <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/>.
            </summary>
            <value>The type of the queue.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.QueueName">
            <summary>
            The name of the queue for this <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/>.
            </summary>
            <value>The name of the queue.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.VoicemailCapable">
            <summary>
            Indicates whether this <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/> is configured to receive voice mail.
            </summary>
            <value>Returns <c>true</c> if the number is voice mail capable; otherwise <c>false</c>.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.PhoneNumber.DialCapable">
            <summary>
            Indicates whether this <see cref="T:ININ.IceLib.Interactions.PhoneNumber"/> can be dialed.
            </summary>
            <value>Returns <c>true</c> if this phone number is dial-capable; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionAlertType">
            <summary>
            Represents the reason why an interaction is alerting.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAlertType.None">
            <summary>
            The Interaction is alerting, source unknown.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAlertType.User">
            <summary>
            The Interaction is alerting on a user queue.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAlertType.Station">
            <summary>
            The Interaction is alerting on a station queue.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAlertType.Workgroup">
            <summary>
            The Interaction is alerting on a workgroup queue.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAlertType.StationGroup">
            <summary>
            The Interaction is alerting on a station group queue.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAlertType.AcdUser">
            <summary>
            The Interaction is alerting on the ACD user.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAlertType.AcdStation">
            <summary>
            The Interaction is alerting on ACD station.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionAlertAction">
            <summary>
            Indicates the action that needs to be taken when an alert event is received.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAlertAction.None">
            <summary>
            No action required.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAlertAction.StartAlerting">
            <summary>
            Start alerting for the Interaction.
            </summary>
        </member>
        <member name="F:ININ.IceLib.Interactions.InteractionAlertAction.StopAlerting">
            <summary>
            Stop alerting for the Interaction.
            </summary>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionAlertingDetails">
            <summary>
            Provides details for alerting via the <see cref="T:ININ.IceLib.Interactions.InteractionAlerting"/> class.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlertingDetails.ToString">
            <inheritdoc/>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlertingDetails.AlertType">
            <summary>
            Gets the type of the alert.
            </summary>
            <value>The type of the alert.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlertingDetails.AutoAnswer">
            <summary>
            Gets a value indicating whether the interaction is set to auto answer.
            </summary>
            <value><c>true</c> if is set to auto answer; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlertingDetails.CallingName">
            <summary>
            Gets the name of the calling party.
            </summary>
            <value>The name of the calling party.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlertingDetails.CallingAddress">
            <summary>
            Gets the calling party address.
            </summary>
            <value>The calling party address.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlertingDetails.MonitoredQueue">
            <summary>
            Gets the monitored queue, if any.
            </summary>
            <value>The monitored queue.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionAlertingEventArgs">
            <summary>
            Provides data for the <see cref="E:ININ.IceLib.Interactions.InteractionAlerting.AlertReceived"/> event.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlertingEventArgs.AlertingDetails">
            <summary>
            Gets the alerting details.
            </summary>
            <value>The alerting details.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.AsyncStartWatchCompletedEventArgs">
            <summary>
            Provides data for the <c>completedCallback</c> delegate of <see cref="M:ININ.IceLib.Interactions.InteractionAlerting.StartWatchingAsync(System.EventHandler{ININ.IceLib.Interactions.AsyncStartWatchCompletedEventArgs},System.Object)"/>,
            <see cref="M:ININ.IceLib.Interactions.Interaction.GetStringAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.String}},System.Object)"/>, <see cref="M:ININ.IceLib.Interactions.Interaction.GetIntegerAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.Int32}},System.Object)"/>,
            and <see cref="M:ININ.IceLib.Interactions.Interaction.GetDateTimeAttributeAsync(System.String,System.EventHandler{ININ.IceLib.Interactions.GetAttributeCompletedEventArgs{System.DateTime}},System.Object)"/> events of a
            <see cref="T:ININ.IceLib.Interactions.InteractionAlerting"/>.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.AsyncStartWatchCompletedEventArgs.AlertingDetails">
            <summary>
            Gets the initial alerting details.
            </summary>
            <value>The alerting details.</value>
            <exception cref="T:System.Reflection.TargetInvocationException">The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> 
            property has been set by the asynchronous operation. The <see cref="P:System.Exception.InnerException">InnerException</see> 
            property holds a reference to Error.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlertingCache.#ctor(ININ.IceLib.Interactions.InteractionsManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionAlertingCache"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlertingCache.StartWatchingImpl(ININ.IceLib.Interactions.InteractionAlerting)">
            <summary>
            Implementation for StartWatching.
            </summary>
            <returns>read only collection of InteractionAlertingDetails</returns>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlertingCache.StopWatchingImpl(ININ.IceLib.Interactions.InteractionAlerting)">
            <summary>
            Implementation for StopWatching.
            </summary>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlertingCache.InteractionsManager">
            <summary>
            Gets the InteractionManager with which this Interaction is associated.
            </summary>
            <value>The interactions manager.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlertingCache.UserId">
            <summary>
            Gets the user id.
            </summary>
            <value>The user id.</value>
        </member>
        <member name="T:ININ.IceLib.Interactions.InteractionAlerting">
            <summary>
            This class provides information about Interactions that are alerting for the Session
            User.
            </summary>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlerting.#ctor(ININ.IceLib.Interactions.InteractionsManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ININ.IceLib.Interactions.InteractionAlerting"/> class.
            </summary>
            <param name="interactionsManager">The interactions manager.</param>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlerting.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlerting.IsWatching">
            <summary>
            Determines whether a watch is active.
            </summary>
            <returns>
            	<c>true</c> if a watch is active; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method determines whether a watch is in place for this instance.
            </remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlerting.StartWatching">
            <summary>
            Starts watching for alerting events.
            </summary>
            <returns>The initial alerting details.</returns>
            <exception cref="T:System.InvalidOperationException">The object is already being watched.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlerting.StartWatchingAsync(System.EventHandler{ININ.IceLib.Interactions.AsyncStartWatchCompletedEventArgs},System.Object)">
            <summary>
            Asynchronously starts watching for alerting events.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlerting.StopWatching">
            <summary>
            Stops watching for alerting events.
            </summary>
            <exception cref="T:System.InvalidOperationException">The object is not being watched.</exception>
            <exception cref="T:ININ.IceLib.IceLibException">The Session does not have a valid connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The Session has been disposed.</exception>
        </member>
        <member name="M:ININ.IceLib.Interactions.InteractionAlerting.StopWatchingAsync(System.ComponentModel.AsyncCompletedEventHandler,System.Object)">
            <summary>
            Asynchronously stops watching for alerting events.
            </summary>
            <param name="completedCallback">The callback to invoke when the asynchronous operation completes.</param>
            <param name="userState">An object that contains state information for this request.</param>
            <exception cref="T:System.ArgumentNullException">A parameter is a null reference (Nothing in Visual Basic).</exception>
            <remarks>When completed, the <paramref name="completedCallback"/> delegate is invoked on a thread appropriate to the application-model, such as the GUI thread in a UI application.  The <c>Error</c> property of the <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">AsyncCompletedEventArgs-derived object</see> passed to the delegate will contain any exceptions thrown while executing the asynchronous task.  See the synchronous version of this method for more detailed error information.</remarks>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlerting.InteractionsManager">
            <summary>
            Gets the InteractionManager assocaited with this object.
            </summary>
            <value>The interactions manager.</value>
        </member>
        <member name="P:ININ.IceLib.Interactions.InteractionAlerting.UserId">
            <summary>
            Gets the user ID.
            </summary>
            <value>The user ID.</value>
        </member>
        <member name="E:ININ.IceLib.Interactions.InteractionAlerting.AlertReceived">
            <summary>
            Occurs when an interaction is about to be alerted or when an interaction is about to stop alerting.
            </summary>
        </member>
    </members>
</doc>
